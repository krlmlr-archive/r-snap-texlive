%!PS-Adobe-2.0 EPSF-1.2
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 131 676 316 781
%%HiResBoundingBox: 131.826441 676.583979 315.618178 780.328242
%%EndComments

%%BeginProlog
%%BeginPreview: 185 104 8 520
% 11b67669445044444b4b444450444444504444445044444b4b4444504444445044444b4b44445044
% 4444504444445044444b4b4444504444445044444b4b444450444444504444445044444b4b444450
% 4444445044444b4b4444504444445044444450444450444444504444445044444b4b444450444444
% 5044444450444450444444504444445044444b4b4444504444445044444b4b444450444444504444
% 445044444b4b4444504444445044444b4b4444504450769e71
% 22f2c9b88c9c8888949488889c8c8888a088888c9c8890d6948888a088888c9c8888949488889c8c
% 8888a088b9b09c888894948888a088888c9c8888949488889c8cd688a088888c9c888894948888a0
% 88888c9c88889494d6889c8c8888a088888c9c88889c8c8888a088888ca1d388949488889c8c8888
% a088888c9c88889c8c8888d9ad888c9c8888949488889c8c8888a0888894948888db8c8888a08888
% 8c9c8888949488889c8c8888a08888d99488889c8c98c7eace
% 00df0000000000000000000000000000000000000000008800000000000033440000000000000000
% 00000000444400000000000000000000000000000000000000008800000000000000000000000000
% 00000000000000008800000000000000000000000000000000000000000088000000000000000000
% 00000000000000000000008844000000000000000000000000000000000000000088000000000000
% 00000000000000000000000000000088000000000000004488
% 00df00000000000000000000000000000000000000000088000000000000bbff0000000000000000
% 00000000444400000000000000000000000000000000000000008800000000000000000000000000
% 00000000000000008800000000000000000000000000000000000000000088000000000000000000
% 00000000000000000000008844000000000000000000000000000000000000000088000000000000
% 00000000000000000000000000000088000000000000004488
% 00ab0000000000000000000000000000000000000000091a000000000000bbff0000000000000000
% 001144221a0900000000000000114400000000000000000000002200000000000000000000000000
% 0000000000000000220000000000000000000000000000000000000000091a000000000000000000
% 00000000000000000000001a09000000000000000000000000000000000000000022000000000000
% 00000000000000000000000000000022000000000000004488
% 00ab0000000000000000000000000000000000000000091a000000000000bbff0000000000000000
% 0044ff881a090000000000000044ff44000000000000000000002200000000000000000000000000
% 0000000000000000220000000000000000000000000000000000000000091a000000000000000000
% 00000000000000000000001a09000000000000000000000000000000000000000022000000000000
% 00000000000000000000000000000022000000000000004488
% 00bb00000000000000000000000000000000000000000000000000000000bbff0000000000000000
% 0044ff8800000000000000000044ff44000000000000000000000000000000000000000000000011
% 44444444778800000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000001166446600007755556644553377446633664444556600000000
% 00000000000000000000000000000000000000000000004488
% 00bb00000000000000000000000000000000000000000000000000000000bbff0000000000000000
% 0044ff8800000000000000000077ff44000000000000000000000000000000000000000000000044
% eeffffeeddff00000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000044ffffff0000eeeeffffbbffffffffffbbffffffffff00000000
% 00000000000000000000000000000000000000000000004488
% 009f0000000000000000000000000000000000000000112b000000000000bbff0000000000000000
% 1177ff882b110000000000000099ff44000000000000000000003c00000000000000000000000044
% bb00000000bb00003c0000000000000000000000000000000000000000112b000000000000000000
% 00000000000000000000002b110044ffffff0000bbbbffffbbffffffffffbbffffffbbbb00000000
% 0000000000000000000000000000003c000000000000004488
% 00b700000000000000000000000000000000000000000009000000000000bbff0000000000000000
% 44ffff88090000000000000044ffff44000000000000000000000900000000000000000000000044
% bb00000000bb00000900000000000000000000000000000000000000000009000000000000000000
% 000000000000000000000009000044ffbbff0000bbbbffffbbffffffffffbbffffffbbbb00000000
% 00000000000000000000000000000009000000000000004488
% 00bb00000000000000000000000000000000000000000000000000000000bbff0000000000000000
% 44ffff88000000000000000044dddd44000000000000000000000000000000000000000000000044
% bb00000000bb33000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000044ffbbff0000bbbbffffbbffffffffffbbffffffbbbb00000000
% 00000000000000000000000000000000000000000000004488
% 00bb00000000000000000000000000000000000000000000000000000000bbff0000000000000000
% 44ffff88000000000000000044bbbb44000000000000000000000000000000000000000000000044
% bb00000000bb44000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000044ffbbff0000bbbbffffbbffffddffffbbffffffbbbb44000000
% 00000000000000000000000000000000000000000000004488
% 009c00000000000000000000000000000000000000001133000000000000bbff0000000000000000
% 44bb8888331100000000000044bbbb44000000000000000000004400000000000000000000000044
% bb00000000bb44004400000000000000000000000000000000000000001133000000000000000000
% 000000000000000000000033110044ffbbff0000bbbbffffbbffff88ffffbbffffffbbbb44000000
% 00000000000000000000000000000044000000000000004488
% 00bb00000000000000000000000000000000000000000000000000000000bbff0000000000000000
% 44bb8888000000000000000044bbbb44000000000000000000000000000000000000000000000044
% bb00000000bb44000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000088ffbbff0000bbbbffffbbffff88ffffbbffffffbbbb44000000
% 00000000000000000000000000000000000000000000004488
% 00bb00000000000000000000000000000000000000000000000000000088eeff0000000000000000
% 44bb8888000000000000000044bbbb44000000000000000000000000000000000000000000000044
% bb00000000bb44000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000088ffbbff0000bbbbffffbbffff88ffffbbffffffbbbb44000000
% 00000000000000000000000000000000000000000000004488
% 00b7000000000000000000000000000000000000000000090000000000bbbbff0000000000000000
% 44bb8888090000000000000044bbbb44000000000000000000000900000000000000000000000044
% bb00000000bb44000900000000000000000000000000000000000000000009000000000000000000
% 000000000000000000000009000088ffbbff0022bbbbffffbbffff88ffffbbffffffbbbb44000000
% 00000000000000000000000000000009000000000000004488
% 009f0000000000000000000000000000000000000000112b0000000000bb44ff0000000000000000
% 99bb88882b1100000000000099bbbb44000000000000000000003c00000000000000000000000044
% bb00000000bb44003c0000000000000000000000000000000000000000112b000000000000000000
% 00000000000000000000002b110088ffbbff0044bbbbffffbbffff88ffffbbfffff2bbbb44000000
% 0000000000000000000000000000003c000000000000004488
% 00bb000000000000000000000000000000000000000000000000000000bb44ff0000000000000000
% ffbb88880000000000000000ff66bb44000000000000000000000000000000000000000000000044
% bb00000000bb44000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000088ffbbff0044bbbbffffbbffff88ffffbbffffffbbbb44000000
% 00000000000000000000000000000000000000000000004488
% 00dd8c66092b00001a1a00002b090000330000092b00001a1a00003300bb4bff00001a1a00002b09
% bb00a08800092b00001a1a00ff33bb44092b00001a1a00002b090000330000092b00001a1a000069
% bb00092b00bb571a00002b090000330000092b00002b090000330000092b00001a1a00002b090000
% 330000092b00002b0900003300008cffbbff1a57bbbbffffbbffff88ffffc2ffffffbdbb44330000
% 092b00001a1a00002b0900003300001a1a00002b092288b998
% 00a2000000110000090900001100000011000000110011310900001100bb44ff0000090900001122
% bb0090882b11110000090900ff11bb44001100000909000011003c00110000001100000909000050
% bb00001100bb4b093c0011000000110000001100001100000011000000202b000909000011000000
% 110000001100001100000036110088ffbbff094bbbbbffffbbffff88ffffbdffffffbbbb44110000
% 00110000090900001100000011000041090000110000005088
% 00b7000000000000000000000000000000000000000000090000000000bb44ff0000000000000044
% bb0088880900000000000000ff00bb44000000000000000000000900000000000000000000000044
% bb00000000bb44000900000000000000000000000000000000000000000009000000000000000000
% 0000000000000000000000090000888800bb0044bbbbffffbbffff88ffffbbffffffbbbb44000000
% 00000000000000000000000000000009000000000000004488
% 00bb000000000000000000000000000000000000000000000000000000bb44ff0000000000000044
% bb0088880000000000000000ff00bb44000000000000000000000000000000000000000000000044
% bb00000000bb44000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000888800bb0044bbbbffffbbffff88ffffbbffffffbbbb44000000
% 00000000000000000000000000000000000000000000004488
% 00bb000000000000000000000000000000000000000000000000000000bb44ff0000000000000044
% bb0088880000000000000000ff00bb44000000000000000000000000000000000000000000000044
% bb00000000bb44000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000888800bb0044bbbbffffbbffff88ffffbbffffffbbbb44000000
% 00000000000000000000000000000000000000000000004488
% 009c000000000000000000000000000000000000000011330000000000bb44ff0000000000000044
% bb0088883311000000000000ff00bb44000000000000000000004400000000000000000000000044
% bb00000000bb44004400000000000000000000000000000000000000001133000000000000000000
% 0000000000000000000000331100888800bb0044bbbbffffbbffff88ffffbbffffffbbbb44000000
% 00000000000000000000000000000044000000000000004488
% 00bb000000000000000000000000000000000000000000000000000000bb44ff00000000000000bb
% bb0088880000000000000088ff00bb44000000000000000000000000000000000000000000000044
% bb00000000bb44000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000888800bb0044bbbbffffbbffff88ffffccffffffbbbb44000000
% 00000000000000000000000000000000000000000000004488
% 00bb000000000000000000000000000000000000000000000000000000bb44ff00000000000000ff
% 6600888800000000000000bb7700bb44000000000000000000000000000000000000000000000044
% bb00000000bb44000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000888800bb0044bbbbffffbbffff88ffffffffffffbbbb44000000
% 00000000000000000000000000000000000000000000004488
% 00b70000000000000000000000000000000000000000000900000011bbee44ff00000000000000ff
% 0000888809000000000000bb4400bb4400000000000000000000090000000000000066eebbffdddd
% bb00000000bb44000900000000000000000000000000000000000000000009000000000000000000
% 000099bbbbbbaaaaeeffbbbdddbbdd8800bb0044bbbbffffbbffff88ffffffffffffbbbb44000000
% 00000000000000000000000000000009000000000000004488
% 009f0000000000000000000000000000000000000000112b00000044dd7700ff00000000000000ff
% 000088882b110000000000bb4400bb44000000000000000000003c0000000000000088bb66448888
% 3300000000bb44003c0000000000000000000000000000000000000000112b000000000000000000
% 0000ffffffffffffccbbffffffffff8800bb0044bbbbffffbbffff88ffffffffffffbbbb44000000
% 0000000000000000000000000000003c000000000000004488
% 00bb0000000000000000000000000000000000000000000000000044bb0000ff00000000000000ff
% 0000778800000000000000bb4400bb44000000000000000000000000000000000000888800000000
% 0000000000bb44000000000000000000000000000000000000000000000000000000000000000000
% 0000ffffffffffffbb88ffffffffff8800bb0044bbbbffffbbffff88ffffffffffffbbbb44000000
% 00000000000000000000000000000000000000000000004488
% 00bb0000000000000000000000000000000000000000000000000044bb0000ff00000000000000ff
% 0000448800000000000000bb4400bb44000000000000000000000000000000000000888800000000
% 0000000000bb44000000000000000000000000000000000000000000000000000000000000000000
% 0000ffddffffffffbb88ffffffffff8800bb1155bb88ffffbbffff88ffffffffffffbbbb44000000
% 00000000000000000000000000000000000000000000004488
% 00ab0000000000000000000000000000000000000000091a00000044bb0000ff00000000000000ff
% 000044881a090000000000bb4400bb44000000000000000000002200000000000000888800000000
% 0000000000bb4400220000000000000000000000000000000000000000091a000000000000000000
% 0000ff88ffffffffbb88ffffffffff8800bb4488bb88ffffbbffff88ffffffffffffbbbb44000000
% 00000000000000000000000000000022000000000000004488
% 00ab0000000000000000000000000000000000000000091a00000044bb0000ff00000000000000ff
% 000044881a090000000000bb4400bb44000000000000000000002200000000000000888800000000
% 0000000000bb4400220000000000000000000000000000000000000000091a000000000000000000
% 0000ff88ffffffffbb88ffffffffff8800bb4488bb88ffffbbffff88ffffffffffffbbbb44000000
% 00000022000000000000000000000022000000000000004488
% 00bb00000000000000000000000000000000000000000000000033ffbb0000ff000000000000bbff
% 00004488000000000000bbff4400bb44000000000000000000000000000000000000888800000000
% 0000000000bb44000000000000000000000000000000000000000000000000000000000000000000
% 0000ff88ffffffffbb88ffffffffff8800bb4488bb88ffffbbffff88ffffffffffffbbbb44000000
% 000000ff000000000000000000000000000000000000004488
% 00bb00000000000000000000000000000000000000000000000044dd220000ff000000000000bb55
% 00004488000000000000bb770000bb44000000000000000000000000001100000000888800000000
% 0000000000bb44000000000000000000000000000000000000000000000000000000000000000000
% 0000ff88ffffffffbb88ffffffffff8800bb4499bb88ffffeeffff88ffffffffffffbbbb44000000
% 000000ff000000000000000000000000000000000000004488
% 009c0000000033ff00000000000000000000aaffffffffffffffffbb000000ff0000000033ffff44
% 000044883311000077ffff440000bb4400000000000000000000a8ffffffffffffffff8800000000
% 0000000000bb44004400000000000000000000000000000000000000eeffffffffeeffffeeffeeff
% ffeeff88ffffffffbb88ffffffffff8800bbffffbb88ffffffffff88ffffffffffffbbbbffffffff
% ffffffff3300000000000000bb110044000000000000004488
% 00bb0000000044ff00000000000000000000bb443344444444ff4422000000ff0000000044cc3300
% 0000448800000000889922000000bb440000000000000000000088ff554422444433440000000000
% 00000000008844000000000000000000000000000000000000000000ff443344bbffffffff66ffff
% ffff8888ffffffffbb88ffffffff8811001155552288ffffffffff88ffffffffffffbb3344334444
% 554444cc4400000000000000ff440000000000000000004488
% 00f1e0d6bdcbccffc4c4bbbbcbbdbbbbcdbbdd093c00002222ff0044000009ff0000222244bb3c09
% 0000768800093c00889822000044bb44093c0000222200003c8cddff690000093c00002222000044
% 0000093c00885d2200003c090000440000093c00003c090000440000ff3c0000c4ffffffff4bffff
% ffff888cffffffffbd88ffffffff8c3c000022220088ffffffffff88ffffffffffffbd0000440000
% 093c00bbd3c4bbbbcbbdbbbbffccbbc4c4bbbbcbbdc4dfee98
% 00b70000000044ff3300000000000000000000000000000900000000000000bb1100000044bb0000
% 000044883a000000888800000000bb66330000000022113311cc0900000000000000000000000000
% 00000000008877443a22221122440000000000000000000000000022ff000900bbffffffff44ffff
% ffff7788ffffffffaa88ffffffff8800000000000088ffffffffff88ffffffffffffbb0000000000
% 00000000000000000000000000000009000000000000004488
% 009f0000000044ff0000000000000000000000000000112b00000000000000bbffbb000044bb0000
% 000044ffff410000888800000000bbffff330000bbffffffffff3c00000000000000000000000000
% 000000000088ffffffffffffffff8800000000ff330000000000aaffee112b00aaffffeeff44ffff
% ffff7788ffffffff8888ffffffff8800000000000088ffffffffff88ffffffffffffbb0000000000
% 0000000000000000000000000000003c000000000000004488
% 00bb00000000000000000000000000000000000000000000000000000000002233cc110044bb0000
% 00000044cc6600008844000000001133cc550000bb77330044330000000000000000000000000000
% 00000000001133113344443344998800000000ff440000000000bb66110000000022111133003311
% 22440088ffffffff8888ffffffff8800000000000088ffffffffff88ffffffffffffbb0000000000
% 00000000000000000000000000000000000000000000004488
% 00bb00000000000000000000000000000000000000000000000000000000000000ffbb0044bb0000
% 00000000bbff00008844000000000000bbff0000bb44000000000000000000000000000000000000
% 00000000000000000000000000888800000011ff440000000000bb44000000000000000000000000
% 00000088ffffffff8888ffffffff8800000000000088ffffffffff88ffffffffffffbb0000000000
% 00000000000000000000000000000000000000000000004488
% 00ab0000000000000000000000000000000000000000091a00000000000000000055bb0044bb0000
% 0000000039bd0000884400000000000000ff0000bb44000000002200000000000000000000000000
% 00000000000000002200000000888800000044ff440000000000bb4400091a000000000000000000
% 00000088ffffffff8888ffffffff8800000000000088ffffffffff88ffffffffffffbb0000000000
% 00000000000000000000000000000022000000000000004488
% 00ab0000000000000000000000000000000000000000091a00000000000000000044bb0044bb0000
% 000000001abd1100884400000000000000ff0000bb44000000002200000000000000000000000000
% 00000000000000002200000000888800000044ff440000000000bb4400091a000000000000000000
% 00000088ffffffff8888ffffffff8800000000000088ffffffffff88ffffffffffffbb0000000000
% 00000000000000000000000000000022000000000000004488
% 00bb0000000000000000000000000000000000000000000000000000000000000044bb0044bb0000
% 0000000000bb4400884400000000000000ff0000bb44000000000000000000000000000000000000
% 00000000000000000000000000668800000044ff440000000000bb44000000000000000000000000
% 00000088ffffffff8888ffffffff8800000000000088ffffffffff88ffffffffffffbb0000000000
% 00000000000000000000000000000000000000000000004488
% 00bb0000000000000000000000000000000000000000000000000000000000000044bb0044bb0000
% 0000000000bb4400884400000000000000ff0000bb44000000000000000000000000000000000000
% 00000000000000000000000000448800000044ff440000000000bb44000000000000000000000000
% 00000088ffffffff8888ffffffff8800000000000088ffffffffff88ffffffffffffbb0000000000
% 00000000000000000000000000000000000000000000004488
% 009f0000000000000000000000000000000000000000112b00000000000000000044bb0044bb0000
% 000000002bc04400884400000000000000ff0000bb44000000003c00000000000000000000000000
% 00000000000000003c0000000044aa77444477ff440000000000bb4400112b000000000000000000
% 00000088ffffffff8888ffffffff8800000000000088ffffffffff88ffffffffffffbb0000000000
% 0000000000000000000000000000003c000000000000004488
% 00b70000000000000000000000000000000000000000000900000000000000000044bb0044bb0000
% 0000000009bb4400884400000000000000ffbb00bb44000000000900000000000000000000000000
% 0000000000000000090000000033cceeffffeeff440000000000bb44000009000000000000000000
% 00000066ddcceedd7766ffffeebb6600000000000088ffffffffff88ffffffffffffbb0000000000
% 00000000000000000000000000000009000000000000004488
% 00bb0000000000000000000000000000000000000000000000000000000000000044cc1144bb0000
% 0000000000bb7700884400000000000000ffbb00bb44000000000000000000000000000000000000
% 00000000000000000000000000000000111100bb440000000000bb44000000000000000000000000
% 00000000001111000000000000000000000000000088ffffffffff88ffffffffffffbb0000000000
% 00000000000000000000000000000000000000000000004488
% 00b70000000000000000000000000000000000000000000900000000000000000044ff8844bb0000
% 000000000999ff00884400000000000000ddbb00bb44000000000900000000000000000000000000
% 00000000000000000900000000000000000000bb440000000000bb44000009000000000000000000
% 00000000000000000000000900000000000000000088ffffffffff88ffffffffffffbb0000000000
% 00000000000000000000000000000009000000000000004488
% 009f0000000000000000000000000000000000000000112b00000000000000000044ff8844bb0000
% 000000002b11ff0088440000000000000044bb00bb44000000003c00000000000000000000000000
% 00000000000000003c00000000000000000000bb440000000000bb4400112b000000000000000000
% 00000000000000000000002b11000000000000000088ffffffffff88ffffffffffffbb0000000000
% 0000000000000000000000000000003c000000000000004488
% 00bb0000000000000000000000000000000000000000000000000000000000000044ff8844bb0000
% 000000000000ff0088440000000000000044bb00bb44000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb440000000000bb44000000000000000000000000
% 00000000000000000000000000000000000000000088ffffffffff88ffffffffffffbb0000000000
% 00000000000000000000000000000000000000000000004488
% 00bb0000000000000000000000000000000000000000000000000000000000000044ff8844bb0000
% 000000000000ff0088440000000000000044bb00bb44000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb440000000000bb44000000000000000000000000
% 00000000000000000000000000000000000000000088ffffffffff88ffffffffffffbb0000000000
% 00000000000000000000000000000000000000000000004488
% 00ab0000000000000000000000000000000000000000091a00000000000000000033dd8844990000
% 000000001a09ff0088440000000000000044bb00bb44000000002200000000000000000000000000
% 00000000000000002200000000000000000000bb440000000000bb4400091a000000000000000000
% 00000000000000000000001a09000000000000000088ffddffffff88ffffffffffffbb0000000000
% 00000000000000000000000000000022000000000000004488
% 00ab0000000000000000000000000000000000000000091a00000000000000000000888844880000
% 000000001a09ff0088440000000000000044bb00bb44000000002200000000000000000000000000
% 00000000000000002200000000000000000000bb440000000000bb4400091a000000000000000000
% 00000000000000000000001a09000000000000000088ffbbffffff88ffffffffffffbb0000000000
% 00000000000000000000000000000022000000000000004488
% 00e08c66093c0000222200003c090000440000093c000022220000440000093c0000989844883c09
% 000044000009ff00885d2200004400000970bb00c45d00003c090000440000093c00002222000044
% 0000093c0000222200003c090000440000093cbb443c09000044bb44093c0000222200003c090000
% 440000093c00003c090000440000093c000022220088ffbdffffff88ffffffffffffbd0000440000
% 093c0000222200003c090000440000222200003c092288bf98
% 00bb000000000000000000000000000000000000000000000000000000000000000088cc66880000
% 000000000000ff88bb440000000000000044dd33bb44000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb440000000000bb44000000000000000000000000
% 00000000000000000000000000000000000000000088ffbbffffff88ffffffffffffbb0000000000
% 00000000000000000000000000000000000000000000004488
% 009f0000000000000000000000000000000000000000112b0000000000000000000066ff88880000
% 000000002b1199bbbb440000000000000022ee88bb44000000003c00000000000000000000000000
% 00000000000000003c00000000000000000000bb440000000000bb4400112b000000000000000000
% 00000000000000000000002b11000000000000000088ffbbffffff88ffffffffffffbb0000000000
% 0000000000000000000000000000003c000000000000004488
% 00b7000000000000000000000000000000000000000000090000000000000000000000bb88880000
% 00000000090044bbbb4400000000000000008888bb44000000000900000000000000000000000000
% 00000000000000000900000000000000000000bb440000000000bb44000009000000000000000000
% 00000000000000000000000900000000000000000088ffbbffffff88ffffffffffffbb0000000000
% 00000000000000000000000000000009000000000000004488
% 00bb000000000000000000000000000000000000000000000000000000000000000000bb88880000
% 00000000000044bbbb4400000000000000008888bb44000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb440000000000bb44000000000000000000000000
% 00000000000000000000000000000000000000000088ffbbffffff88ffffffffffffbb0000000000
% 00000000000000000000000000000000000000000000004488
% 00bb000000000000000000000000000000000000000000000000000000000000000000bb88880000
% 00000000000044bbbb4400000000000000008888bb44000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb440000000000bb44000000000000000000000000
% 00000000000000000000000000000000000000000088ffbbffffff88ffffffffffff990000000000
% 00000000000000000000000000000000000000000000004488
% 009c000000000000000000000000000000000000000011330000000000000000000000bb88880000
% 00000000331111bbbb4400000000000000008888bb44000000004400000000000000000000000000
% 00000000000000004400000000000000000000bb440000000000bb44001133000000000000000000
% 00000000000000000000003311000000000000000088ffbbffffff88ffbbffffffff880000000000
% 00000000000000000000000000000044000000000000004488
% 00bb000000000000000000000000000000000000000000000000000000000000000000bb88880000
% 00000000000000bbbb4400000000000000008888bb44000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb440000000000bb44000000000000000000000000
% 00000000000000000000000000000000000000000088ffbbffffff88ffbbffffffff880000000000
% 00000000000000000000000000000000000000000000004488
% 00bb000000000000000000000000000000000000000000000000000000000000000000bb88880000
% 00000000000000bbbb44000000000000000088bbdd44000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb440000000000bb44000000000000000000000000
% 00000000000000000000000000000000000000000088ffbbffffff88ffbbffeeffff880000000000
% 00000000000000000000000000000000000000000000004488
% 00b7000000000000000000000000000000000000000000090000000000000000000000bbbb880000
% 00000000090000eeee44000000000000000088ffff00000000000900000000000000000000000000
% 00000000000000000900000000000000000000bb440000000000bb44000009000000000000000000
% 00000000000000000000000900000000000000000088ffbbffffff88ffbbffbbffff880000000000
% 00000000000000000000000000000009000000000000004488
% 009f0000000000000000000000000000000000000000112b000000000000000000000088ff880000
% 000000002b1100ccff44000000000000000011ddff00000000003c00000000000000000000000000
% 00000000000000003c00000000000000000000bb440000000000bb4400112b000000000000000000
% 00000000000000000000002b11000000000000000088ffbbffffff88ffbbffbbffff880000000000
% 0000000000000000000000000000003c000000000000004488
% 00bb00000000000000000000000000000000000000000000000000000000000000000044ff880000
% 0000000000000088ff4400000000000000000099ff00000000000000000000000000000000000000
% 00000000000000000000000000000000000000bbccccddccbbbbff44000000000000000000000000
% 00000000000000000000000000000000000000000088ffbbffddff88ffbbffbbffff880000000000
% 00000000000000000000000000000000000000000000004488
% 00bb00000000000000000000000000000000000000000000000000000000000000000022ff880000
% 0000000000000088ff4400000000000000000088ff00000000000000000000000000000000000000
% 00000000000000000000000000000000000000447788888888887711000000000000000000000000
% 00000000000000000000000000000000000000000022776666555511884477337766440000000000
% 00000000000000000000000000000000000000000000004488
% 009f0000000000000000000000000000000000000000112b000000000000000000000000ff880000
% 000000002b110088ff4400000000000000000088ff00000000003c00000000000000000000000000
% 00000000000000003c0000000000000000000000000000000000000000112b000000000000000000
% 00000000000000000000002b1100000000000000000000000000000000000000003c000000000000
% 0000000000000000000000000000003c000000000000004488
% 00b70000000000000000000000000000000000000000000900000000000000000000000066330000
% 00000000090000228811000000000000000000559900000000000900000000000000000000000000
% 00000000000000000900000000000000000000000000000000000000000009000000000000000000
% 00000000000000000000000900000000000000000000000000000000000000000009000000000000
% 00000000000000000000000000000009000000000000004488
% 00df0000000000000000000000000000000000000000008800000000000000000000000000000000
% 00000000444400000000000000000000000000000000000000008800000000000000000000000000
% 00000000000000008800000000000000000000000000000000000000000088000000000000000000
% 00000000000000000000008844000000000000000000000000000000000000000088000000000000
% 00000000000000000000000000000088000000000000004488
% 00df0000000000000000000000000000000000000000008800000000000000000000000000000000
% 00000000444400000000000000000000000000000000000000008800000000000000000000000000
% 00000000000000008800000000000000000000000000000000000000000088000000000000000000
% 00000000000000000000008844000000000000000000000000000000000000000088000000000000
% 00000000000000000000000000000088000000000000004488
% 11e77669445044444b4b44445044444450444444504450bc4b4444504444445044444b4b44445044
% 44445044917f5044444b4b4444504444445044444b4b44445044bf44504444445044444b4b444450
% 4444445044444b4bbf44504444445044444450444450444444504444445bb9444b4b444450444444
% 5044444450444450444444bc7f44445044444b4b4444504444445044444b4b4444c1444444504444
% 445044444b4b444450444444504444c14b444450445076bec9
% 22ceaba08c9c8888949488889c8c8888a088888c9c888894948888a088888c9c8888949488889c8c
% 8888a088888c9c888894948888a088888c9c8888949488889c8c8888a088888c9c888894948888a0
% 88888c9c8888949488889c8c8888a088888c9c88889c8c8888a088888c9c8888949488889c8c8888
% a088888c9c88889c8c8888a088888c9c8888949488889c8c8888a08888949488889c8c8888a08888
% 8c9c8888949488889c8c8888a08888949488889c8c90a8cf7c
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000003399001177000000
% 00000000000000000077000000000000117700000000000000000000000000000044445500000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000bb001177000000
% 00000000000000000077000000000000117700000000000000000000000000006633009944000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000bb003344003344
% 22330000445522002244000022442200334433442233000000000000000000005555008888000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000bb0000bb0000dd
% 1144775566009900008800446600664400bb00dd114477003388888888888811000000aa22000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000bb0000bb0000bb
% 004488aa55448800008800aa110044aa00bb00bb0044880000000000000000000000773300000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000bb0000bb0000bb
% 0044889933001100008800993300449900bb00bb0044880033888888888888110055330033000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000033dd2233dd2233dd
% 2277aa2177445500008800227744771133dd4edd2277aa11000000000000000055ddbbbb44000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000111188000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000338888000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000
%%EndImage
%%EndPreview
%%Page: 1 1 
%%BeginDocument: D:\Dissertation_Projekt_DH\experiments\Haftreibung_Kraftmessung\Dokumentation_Versuchsauswertung\tex\graphics\ag_eps\fig_NoiseData_OpenLine.eps 
/InitDictCount countdictstack def gsave save mark newpath 
userdict /setpagedevice /pop load put 
%!PS-Adobe-2.0
%%Creator: dvips(k) 5.992 Copyright 2012 Radical Eye Software
%%Title: D:\Dissertation_Projekt_DH\experiments\Haftreibung_Kraftmessung\Dokumentation_Versuchsauswertung\tex\graphics\tmp\figure_main.dvi
%%CreationDate: Wed Aug 08 09:37:20 2012
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: LMRoman10-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Ppdf -q -R0 -o
%+ D:\Dissertation_Projekt_DH\experiments\Haftreibung_Kraftmessung\Dokumentation_Versuchsauswertung\tex\graphics\tmp\fig_NoiseData_OpenLine.ps
%+ D:\Dissertation_Projekt_DH\experiments\Haftreibung_Kraftmessung\Dokumentation_Versuchsauswertung\tex\graphics\tmp\figure_main.dvi
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2012.08.08:0937
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: psfrag.pro 0 0
%%
%% This is file `psfrag.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% psfrag.dtx  (with options: `filepro')
%% 
%% Copyright (c) 1996 Craig Barratt, Michael C. Grant, and David Carlisle.
%% All rights reserved.
%% 
%% This file is part of the PSfrag package.
%% 
userdict begin
/PSfragLib 90 dict def
/PSfragDict 6 dict def
/PSfrag { PSfragLib begin load exec end } bind def
end
PSfragLib begin
/RO /readonly      load def
/CP /currentpoint  load def
/CM /currentmatrix load def
/B { bind RO def } bind def
/X { exch def } B
/MD { { X } forall } B
/OE { end exec PSfragLib begin } B
/S false def
/tstr 8 string def
/islev2 { languagelevel } stopped { false } { 2 ge } ifelse def
[ /sM /tM /srcM /dstM /dM /idM /srcFM /dstFM ] { matrix def } forall
sM currentmatrix RO pop
dM defaultmatrix RO idM invertmatrix RO pop
srcFM identmatrix pop
/Hide { gsave { CP } stopped not newpath clip { moveto } if } B
/Unhide { { CP } stopped not grestore { moveto } if } B
/setrepl islev2 {{ /glob currentglobal def true setglobal array astore
                   globaldict exch /PSfrags exch put glob setglobal }}
                {{ array astore /PSfrags X }} ifelse B
/getrepl islev2 {{ globaldict /PSfrags get aload length }}
                {{ PSfrags aload length }} ifelse B
/convert {
   /src X src length string
   /c 0 def src length {
      dup c src c get dup 32 lt { pop 32 } if put /c c 1 add def
   } repeat
} B
/Begin {
    /saver save def
    srcFM exch 3 exch put
    0 ne /debugMode X 0 setrepl
    dup /S exch dict def { S 3 1 roll exch convert exch put } repeat
    srcM CM dup invertmatrix pop
    mark { currentdict { end } stopped { pop exit } if } loop
    PSfragDict counttomark { begin } repeat pop
} B
/End {
    mark { currentdict end dup PSfragDict eq { pop exit } if } loop
    counttomark { begin } repeat pop
    getrepl saver restore
    7 idiv dup /S exch dict def {
        6 array astore /mtrx X tstr cvs /K X
        S K [ S K known { S K get aload pop } if mtrx ] put
    } repeat
} B
/Place {
    tstr cvs /K X
    S K known {
        bind /proc X tM CM pop
        CP /cY X /cX X
        0 0 transform idtransform neg /aY X neg /aX X
        S K get dup length /maxiter X
        /iter 1 def {
            iter maxiter ne { /saver save def } if
            tM setmatrix aX aY translate
            [ exch aload pop idtransform ] concat
            cX neg cY neg translate cX cY moveto
            /proc load OE
            iter maxiter ne { saver restore /iter iter 1 add def } if
        } forall
        /noXY { CP /cY X /cX X } stopped def
        tM setmatrix noXY { newpath } { cX cY moveto } ifelse
    } {
        Hide OE Unhide
    } ifelse
} B
/normalize {
    2 index dup mul 2 index dup mul add sqrt div
    dup 4 -1 roll exch mul 3 1 roll mul
} B
/replace {
    aload pop MD
    CP /bY X /lX X gsave sM setmatrix
    str stringwidth abs exch abs add dup 0 eq
        { pop } { 360 exch div dup scale } ifelse
    lX neg bY neg translate newpath lX bY moveto
    str { /ch X ( ) dup 0 ch put false charpath ch Kproc } forall
    flattenpath pathbbox [ /uY /uX /lY /lX ] MD
    CP grestore moveto
    currentfont /FontMatrix get dstFM copy dup
    0 get 0 lt { uX lX /uX X /lX X } if
    3 get 0 lt { uY lY /uY X /lY X } if
    /cX uX lX add 0.5 mul def
    /cY uY lY add 0.5 mul def
    debugMode { gsave 0 setgray 1 setlinewidth
        lX lY moveto lX uY lineto uX uY lineto uX lY lineto closepath
        lX bY moveto uX bY lineto lX cY moveto uX cY lineto
        cX lY moveto cX uY lineto stroke
    grestore } if
    dstFM dup invertmatrix dstM CM srcM
    2 { dstM concatmatrix } repeat pop
    getrepl /temp X
        S str convert get {
            aload pop [ /rot /scl /loc /K ] MD
            /aX cX def /aY cY def
            loc {
                dup 66  eq { /aY bY def } { % B
                dup 98  eq { /aY lY def } { % b
                dup 108 eq { /aX lX def } { % l
                dup 114 eq { /aX uX def } { % r
                dup 116 eq { /aY uY def }   % t
                if } ifelse } ifelse } ifelse } ifelse pop
            } forall
            K srcFM rot tM rotate dstM
            2 { tM concatmatrix } repeat aload pop pop pop
            2 { scl normalize 4 2 roll } repeat
            aX aY transform
            /temp temp 7 add def
        } forall
    temp setrepl
} B
/Rif {
    S 3 index convert known { pop replace } { exch pop OE } ifelse
} B
/XA { bind [ /Kproc /str } B /XC { ] 2 array astore def } B
/xs   { pop } XA XC
/xks  { /kern load OE } XA /kern XC
/xas  { pop ax ay rmoveto } XA /ay /ax XC
/xws  { c eq { cx cy rmoveto } if } XA /c /cy /cx XC
/xaws { ax ay rmoveto c eq { cx cy rmoveto } if }
    XA /ay /ax /c /cy /cx XC
/raws { xaws { awidthshow } Rif } B
/rws  { xws { widthshow } Rif } B
/rks  { xks { kshow } Rif } B
/ras  { xas { ashow } Rif } B
/rs   { xs { show } Rif } B
/rrs { getrepl dup 2 add -1 roll //restore exec setrepl } B
PSfragDict begin
islev2 not { /restore { /rrs PSfrag } B } if
/show       { /rs   PSfrag } B
/kshow      { /rks  PSfrag } B
/ashow      { /ras  PSfrag } B
/widthshow  { /rws  PSfrag } B
/awidthshow { /raws PSfrag } B
end PSfragDict RO pop
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 647 2012-02-12 15:03:40Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.12, 2012/02/12
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionaray
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
/Rand { rand 4294967295 div } def		% a real random number
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def

    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
  pop pop 
} def
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
/Ellipse { 
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput { 
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
} def
%
/BeginOL { 
  dup (all) eq exch TheOL eq or 
    { IfVisible not { Visible /IfVisible true def } if } 
    { IfVisible { Invisible /IfVisible false def } if } ifelse 
} def
%
/InitOL { 
  /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
  /Visible { CP OLUnit idtransform T moveto } def 
  /Invisible { CP OLUnit neg exch neg exch idtransform T moveto } def 
  /BOL { BeginOL } def
  /IfVisible true def 
} def
%
%%%%%%%%%%%%%%%%% tools %%%%%%%%%%%%%%%%%%%%%%%%%
%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort {
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a
end
} def
%
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 594 2011-10-31 18:13:18Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.04, 2011/10/21
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {%
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 622 2012-01-01 15:36:14Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.02, 2012/01/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 130 2009-08-27 08:55:03Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 645 2012-02-12 09:09:51Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.13, 2011/11/21.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
end
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Created the     : Sat 20 March 2004
% Last Mod        : $Date: 2010/10/02 $
% Version         : 0.62 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 328 2010-05-24 15:56:43Z herbert $
% PostScript prologue for pstricks-add.tex.
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: OpenLine.pro 0 0
%%%%%%%%%%%%%%%%%%%%%%%%%% OpenLine %%%%%%%%%%%%%%%%%%%%%%%%
% copy of /Line
% removed possibility to plot arrows
/OpenLine {
  NArray
	n 0 eq not 
		{ n 1 eq 
			{ 0 0 /n 2 def } if 
		/n n 1 sub def % last point in stack is first point from plot (to plot closed curves)
		n { moveto 2 copy Lineto } repeat 
		pop pop % remove first point from stack
		} if 
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def

 /burl@stx null def /BU.S { /burl@stx null def } def /BU.SS { currentpoint
/burl@lly exch def /burl@llx exch def burl@stx null ne {burl@endx burl@llx
ne {BU.FL BU.S} if} if burl@stx null eq { burl@llx dup /burl@stx exch
def /burl@endx exch def burl@lly dup /burl@boty exch def /burl@topy
exch def } if burl@lly burl@boty gt {/burl@boty burl@lly def} if }
def /BU.SE { currentpoint /burl@ury exch def dup /burl@urx exch def
/burl@endx exch def burl@ury burl@topy lt {/burl@topy burl@ury def}
if } def /BU.E { BU.FL } def /BU.FL { burl@stx null ne {BU.DF} if }
def /BU.DF { BU.BB [ /H /I /Border [burl@border] /Color [burl@bordercolor]
/Action << /Subtype /URI /URI BU.L >> /Subtype /Link BU.B /ANN pdfmark
/burl@stx null def } def /BU.BB { burl@stx HyperBorder sub /burl@stx
exch def burl@endx HyperBorder add /burl@endx exch def burl@boty HyperBorder
add /burl@boty exch def burl@topy HyperBorder sub /burl@topy exch def
} def /BU.B { /Rect[burl@stx burl@boty burl@endx burl@topy] } def /eop
where { begin /@ldeopburl /eop load def /eop { SDict begin BU.FL end
@ldeopburl } def end } { /eop { SDict begin BU.FL end } def } ifelse
 
@fedspecial end
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C07F1ADDACFDC3CF4D1F9037F027E63B522C41
BCC160FB1D794455CBED4C049ED67502630A8A1C2ED11A53852E7B9910D008B8
DF64C3DA1E469128BF3B45D99837E560B852F87024C48C184E2BC4358D34EBE8
48ACC9B93C575C363FAC585CA35C2C450B5929783DA0ACF374733D7447051366
BA3065066563083DE0E1494B6433BC4BD86CBFF1A9034F40380C333A5F16A4F9
9BA2C4BB3D31412356B9E978BADC3548EC4946749CDC981002C4414156DFE0D7
83460C816ED040C9568CC2EFE4A607C3EB4A6C06AD50B3CB1C886ACB3D1022F7
70E256CD75521A8C02071A25B0C96706BB7AE920C15804482D69A32FE000AF1E
D8CB928BA33D61D0F17C1E7D2A1403C4ACB7D923E66F10354BDAECB0ADC7DC3F
A7B24303B3C291B987C490B04B0CA0A969E41E3F04FA629E2B6649661FBF165F
F099E2D5173413B3995A7DB9B4C56C828F8C614AD3607A91673A3DF62988DE97
DA96C5C43CC63C14EF7C24C48C184E2BC4350D72B6956D0C2F549618A0061284
E6AF01D8B9FAEE674122BA926D2DB941B0C26F6274027559A8B3843FCFFBC8C6
E51250F22B812E47ED46E67410144A520F7F66B64A927F0A67BB50BF09591782
F8A664335F67B9DDE36DBA793EC77E5D84F6E298C4F428617BADEE752997B940
93316F759F1A0053B7E9268CF93B9763BA70C77A82B01C2B17479DFF58CA2C67
01C4D3E39979022FEFF095DA482A4E99A4A3259B2FBC52122E7974849DD398C0
44CB32F94F500BA9BFC908A2BAC4B3062E37B68DCA401224AD75DCA40F5946D9
266E07CBF681164FEAF332C19BB64203E7291357E4C4F9A6725247F3ACB29005
4C79132FBC49F5FDFCA8BE38549AE53F72B85A6F03B58AE0D30DCF02DECFD422
DAB156ABDF73CBA7DE351875F5131518D2DB628C3C99D0EBAC0F0017D917875B
D4F18169CFFB98AD6151A16BCAA3540A85AA395D5B94927C063B7A789EB1E6F3
A07B777B22BE5EA7B6D8F1664CE0DD8F43CC580213BEB59D15D30B7292FD83B6
E52EA4270D0D5D9C6112033C467CA867769AC53093BCE223CB286B1721B357D8
D51AC9DE1E9043D7770D32C6E8EF9FF13E29DC064F3C70730B6B567A9AA1CD0C
FB337558AA398E37BF984F934C66986C2EE9A510A314AD971D82FC1EE6868FE3
D060DD7B5AA766C4DF53407517CF6F42243C234413756CA68A0F125A0E7C1E17
E4E9F3C905DC814982B1A40503E899AAA09B2362DF13DE0E31E5E08B89B0E394
1460CCB0AA4CE5F70F9D19F59A963E9F90F4A84685377B43F208A3F331979D1F
51377E69B684C70E9F76F39FC77A46FBA5A77FC361C55F6D7C5ADF691D4C1638
83BB2994826A94CC906E41B4251518F5F104AE5CD4A2FDD0DDF0A49EB8F32036
94BD7EC9430C3C2F7970B696DA577C21452508DA6E9E32F903296B80F87B1797
19D633875594913678A3833636F8B33B0C66ED837176BEE6E6A8F6BF1EF66105
F277E5B6745FF4A5CB0EE90FA42E1529406562EFCA1E621ED2A65D66DFDB2098
887BC845E63B067BC2A4FFE2D0208EDA333AA5F4CAB0ABD7E1CB78637494E68E
34391E2542903355658BD278E67696111019DB87C73771A6CED0715EFF43475A
0FD680DDA2CFAB8D802B28E97E3B1E097CB13153378D85500BB10C661AF17841
FDBD5D61718DE52EB4F11723D1D646B9E9110E87700E6D1522A71B0D0018368E
79712A5AB20318C6045977231D86C8BEB851B96CD7BF88F9A172949DC2969A27
784051AB9E62CBD50ABE89F5DA433EA9D4D67FD60C7A551828813067EED8B44F
8F9316E6E062F1DF68BCC50EAB2B6C8E7EC2B798E2E8BBB1AD5D775F54B78C79
4B35A41FCAB99493DBECF6620AF09020F0544340C3B4C147A3CA6B939B4B19E8
1AB5B2D968F0729A5A1D1EB41ABB67B9BA1735E4E0555B0ACE192B694582DBC0
21CFE1217CF272748BB9CD72E80B52E247D95BAD5D9ACED37A7E9CDA86B3581F
EA2C336C627BABC4737FC72F8F4F6BB7D73551EE33D7036243002C75ABD706FF
6272EC8B127F512CD94B4F514F2DE812CF0A27F44E3AA88DE45F8F70D60AEE94
B39756DD3301F4C4EB5F7A46D1EF564F9D4A077B55856BE8070C46525A7DDD5F
F93B34767BA45CBA4B18ABA32A3E4DC1E0F3236A1106CD1CF46CF2748A3D67A4
57945BE9186686583FA8B733579DE8AAE808C8916EB45BAA486A85DBC2F45566
226D9EA08B48360A2C2119A60384F37D44F4096D8AE632FB2EBC0DDDFE6490E3
D854243B2D272CF5C16F0AAD1815A417E0437145718C421391BC4E0BDBECE4A7
FC58DCC2F00B5F262263EE95A66B7B588B417B20D3AE846ECF2693940F268C17
45E0FB4E607854D32C6D52E83F24A890B95D6C169E9E7AB8A1ACCA1756D2D72F
0D4A81042FCDF505FFC4FB38AECDEA912516F3828A9480D6179690438CD92FF2
BFB06CA814AD933409C99883AA5D858ADC659C1BA0E3A080CB1E4463CB90DC8A
841CD8A67977D90CEA876880C4118254A19147D1389963C41CFBAC11A51ED614
E0C7FBC7335681207464ABF8C4ED5B859592A3376F58135BCFA5DE0696385BB0
FFB6345B71555B7BADE49A8ACA8D973CC3DF7BED1F3B5D595DFEB596AF649E3C
C9D18701E91F5A47FF6E933E21F0FB9FFB3221EA47B964FDCF13CCAB1353A21A
0CE2631E8E588A4AFA85AB3502A3832F0FA6E4A9E942F3C6B70266EDA218C6D2
606A4B7C2D112FB1E3B5437964E2431F7B614CD62017182AB7C7BCF37B79B1F6
5339265C3BDC27CD99AC7D748CFD1DC2AE04CD5590CD3E0042091DA9CC585AF0
DB968876792926E857CED60024172E360E4B169DA93627BF5BE4A89B8816D5ED
80C3BB5B5A45B52A16879526DFA881D0B5EC317437135C50B27CEFD1F5022BE5
B15E1D75D8A3950397E5EF6999E30CE159C111A6468D2DAB04B3ACAC61986BC3
AF3401CE4FAA2ABE187EEF62A1F70DE1CA0418BA7012133257153F687ADDBEBE
CDCE5D5144613798CBF687FC96944DB5C206999107D67FF7C8989C512DA066D6
D6B8CBC71F9DA6B570B4451375B9EAEDEA1115846E0DE7A3B686AAD19F4E39A7
3DC2E00310DB85AF8D9080EC153CFC0AF60E785B8B723C16F77F4F3568097B60
E1B564F8EBFCC4E3F3D8112A7E8FF270331D2FB475491A51A87210248F9338A5
8F8A83C0D8481C4B7FB4BD0946A0F62F2FA95D10FAA84DFFE90A240EF474ACBB
9E6B044896D3DC2832BF258013E878EE3C5CC43D6AB4C81C1936C442CEDD2F6C
DB3575B617296CDD6A514F2DBED85F14FEF3F00A0A3C2A83A328B249EBF2C31A
EA9D19FABD50B54736FE13D6FFE686B1CFD0EE0B6B7F873F7E4A94CDC4F13B8E
F85867862B8FFA7167A39E37833AFDB4BBAAB388CB87F0B73A502C34012F783B
EE1DD3D04EB580E6D4BE162E2D45F7EF6BBEDD9A5A3A74BE4EB0759ADDD89E44
9CD6AAC616784D91B39AD85200341B4B33127E9AD95910F7642FF192B1241525
D1262B52C70DE1120705CA2197DCEE72A404199E546857DBBB84B62F0E5DDFBA
B3258AABC24AE22C90AA37B1DA67BC83A83F169F626859F00E85979BE5B24381
9BC3EAE9E2425C10CA412982FC6A2B7ED8669633E05B89ABD3332811E39DB955
6E7C9C2A8E6DD1D0D5A8590FA66FE389609A47A92464C8B4B45DFF97719A22BF
F5D31C9C6C0FF56F9B3DF1963735BB55978429DEC75D2A0E8B21B62BEF5EB66D
79C82CEBC2C519EFAAB524A94577EF320491A3FA8CB2D730293FE9ADFC8A933B
E0BC10053DFECF68261DC400897B7D28327E144D9CB0089C91D6A134411D948A
A2F90ED6A01B7306C993D991D70B5EAAC7A639213EC0F82A1D7750F3F799A585
5AA9D1DC181EE715CB577C4DFC25482A27A090A0715E76B238A94A5329C67932
4059B942FBA2C6D3066808AAA990E81BE87FEA27BCD1382A83DC20215D1BA29E
4200DD53397B02197B6FA86ABDCF97ACC1B898DC7DCA38485DDEBAF95388BB7F
6588A5E347A760B51AD502DFED343F64C6CAC65D8218E75ECDA7292A0F2FBB4A
643454F84888CA17948C9FB31CF86E555B4815AA6C81B114399CA1169BDC7F10
4FEF092A2CC807FFFFC7383FDAC67933D28585B6D59163EDAE458E91E7EA641E
A38F9F9AC61A41F2B4CCCA221C3A72AB7584D24400671CD39F2175378C945F31
C26697A7ED159B5292769952925EC981049396532635B98C5018A15684F9BCC7
9AD6DB7694B1DBA4107593EDBBEFF3B140B7CF51BD51B0990458B6C31767179A
1B63E40EAE3829BF4CE47841CC9958B3379E0C407E5604911B96C587E65FD005
8E0576018C746EBA88A44B23A3F56EBCD82E0702C4A95FEE93D8A53178218FF7
4CCFA54911ACD0FF16FEF122729B6E985FA02F7CCBD6BCE95597FC3CE99538FB
17A8238471AD59C3BD9BC4CEA7AFF4075A15327318F6A5962CB9AE8BA6D3F045
E64B4E57F282A1DE2049B163A4288A69ED6EDE22A89902434ACE821D263606A3
74B64A01E25C9C7B71D745FE9F7C891290A2643009F7C21A10C45E2BD3C3439F
E1A8058C20F4C3ECD7CC083D70252227836371FF8387DFECCCE19FA7B3BA9FA1
400F1A17B257DE3F0661DD7CD280C58A33C57BF883777AD1B0FFD5C8C14C34C3
638979F4590D49978B1325CC654E70D7C81F03A2AD9E74B12C90F0BE89FEB4B8
4CC0A3F6BE1B968E6F1750A2379DB3758BF397810D1370567A791629B4F9CDCA
D4A6DC453244EC5932E79727ACF464295E75CFC635036CF27FFBA1DDC816801A
DBE116E0E90E6199B6C6B3594E3B700621EFF790C6D0A2E6E82E6840E51B38C4
579FB95337423C15A8486882520611165AAF3711B005AD3DFBE56FD60AB643DE
608AA42A1678786D34C701AA0836863119C3FBAEDC3D0A32CFC097B05F9D90CC
4B614AE7F58F3BF9C630BC15F2BB7C9625F4B09ADB0BCD6162C0BA1320D30AAD
45EE4BDB168DBA8E27EB9DA43541D7D09EC9520161FE013B8ABE63165ABA1554
5146ED2FCB21B0345A1CA0E4BC2591A87D0CE5AEDA30DA4F11EEEA1031376182
EF54B78FA2E8AA6A9433272C23534CF0E8DE3B2E3D413751D6316C41F695807F
3BC8A261F1C47C4E740A606A97D5EE4608A524C4F1A641735601161669B687EB
8F76B9ABADF9D24B2EB524C6AABD7EFB03CF1B8F6668C8B23694C916BF9A6BDA
A24DE24D6CD65831B8E50C195D028F2DD9BA757902C2B35C13487F0BED5FDC37
8F9CA52C1643CEAD5F98337B73527537B8FA58F86F01329F1C4F14040FAC9792
851F1CC40481634C777018C2E5F8ECF61328625A631D4636B2687B40395531AE
88840CAA74199E48E9FFCAA2C6A2BD03A17B76FAAE9CB0493E6294A9E3D78E70
3FF2732D0D1797B70A52A1BE26E3051FE2211ED58221883665C31B5361DD832C
513510C5F90752F44DBF4736328A6C3A12420D7323D134784C686EBA666E15F4
78D542A4724BC1E122D7DE13083516551E7BDF1BFBB7DCA007DBB44F3C4C41FD
BBFC530D7798851581D0812AFF6F4C8AFE9F42F44BA1841F3AC128FE6CE93C05
1E13CE2DFE658B0A72CFB65D719821DF82B89E2DD0885CA956529EA49D7B9133
7D1C028A665FFFB23654B08776938DFC3DCEEFBBAC6F7EDCD010DB67630CA95C
BD688B57D54C27B00C6A7067BAD1BF473137EE9A79EC3F588762C66D9860B6D4
FA7E3EE93321E82E96046449A558A88D426B6C046E9A088FA25C5A7D0E46716D
81039491DB446916FA5F10B5FF1AE7AC47CBA274592C953BD5A9CBC996C9AE76
5B71717C60CF979FD06C0E2DC5B99D42C49601D06164CF75F70F6E3AF3B31609
AC2AF79ABC77A6717A1AECF7A81906803F86D7FE8BC6D819708103BB963F6F0B
DA611B948CBECB5EFA2B291DA84FC40DFB85321175A3684F32D311455D14F6DA
D759BD39211540C0297FC1BD9FB9D2B58A91DEE10E7F6A0635F4D60C3D5A5D5A
A54D4566C36A1DE47827C4384E996D072E87FBEF1A4EF1FE73D48B3ED3EE3499
8AFA73811F0D3764780499D425F0E19E39718217D80D4D8B9D494D9E203D158F
B6C7637B9996E2CD033AA4E4A7DFAE20ABDE997CE19D34AAAE2E6CB30732E502
C92D35A0618E0A1BE754949F6174DA69822968706EB94D1720FB2879E596D3A7
EF942AC32C93E8D7CBEDD8B5CD37443C40F8CECF61496F87967FEF934783E30F
224E6CD4E1AFA9E60E7D5DF243A1FB709EB59718AA5429ED39CDE4F9CD1F9283
7B1EDAC16B811C28AF2BEBA473AB452018BAE8ECD5B2A3593234E5EF06B6756F
2281E0400F776034AA7370C867BDF8F8CBE63E3506F5C42C194788D20A71C7AB
8A5E0EF0CFB34688BCA5CD32D55AA3E61DCAE5E57A9D3AD3DED4F1EB821AE5ED
C955695970C7A1BAF6614606243C6256300F76B13E2338CDFCE1F3CB0E7863E7
9AA792B335CB8D72978536465393A7DEB7DA08B3012A99FB2FC7F6FF7AE5716D
93FA028DF04128F86348FB9A511FC9C5F2A4948AB8E3D65FB8D395DBC847CFC3
AC4C36967A941825BEAB6AE19FBD2EFE727F36708ECD6D4CA39743D90725B633
A0AB66791DFFB4FF1570574EAC7E17C772540440EA91FE9F951EDF7B8CA9B4FF
039FE7704B8D86E980962317F542C11DA249BA44E0D0D3F6724561ACB8D1BB8C
C89389CE95BFAA2284F02BD11FDE0E5BA107C68B49F80BC01FE2995CB415F1EC
1B57DDF194B61D4473594BC46DCA84D668564C86ADF67D4754AAE8B5021D9EB1
2338ADB319A937E9AA44ECB7649E3347035449BCD936328FEDB5C4A337A0AADE
BEA9D1A4C30F51E9B375D24D089EEF4FE4DB3B91A97827D2AF45C8379364325D
D8DC1AE11DD1E9A881708298C154CA1CBC5A2347AC28E960123A04365E01A049
0FB3CC3086401733F50F636A4C7426584812DB1B205A2BD31BC49F3F6D36A5F9
79FCF84EDC4C4D95FAC2A87D7BA88D58E2EDD30493564B38F53F50A4B25DC768
AD975A9DCFB0A4BE6947FC780F2D4ABE4714DC4CA1197F5D4EF9391026D75CE7
A11CA281E861BB0E2F6D917A8C9416FE9F85C938662C95D21E3C1AD3600CFE96
CA34669E8020FB501C223F493D0FA587209565FAEEC1CEE45AFA1F1C691B9F6A
82EC74B3996022FD4532F533EB63B3D043797EDC00F6DF91C9A02958EA01F55F
00D575182E0D693391DEA7CB26D4A418E48A2989167B7DCE251DA099A2B2F592
AAFA87A5D2351E00F3470C278AC43DEB3772671D5A020E9A7811DD9012B45CF0
DF0644B2E66039C8109064F1B79385F1F09F222B545B1E00A91B39D3337C67CA
2A599F1F4BA039BBB26179F2A72599892F0CEBEFE8DDD98B55CACEA45D4046B0
46D2BD09D8972E014EE0030656C55146644AB4081DD7906687B7E22B39FD0D42
52A18ADD5626450A2914B9892E0147A245EE0BED473D485AB9858152E3FA121F
9BDD04B7EA8A00B2A245EB7685488691EF21286FD15A93FF6A0468C6D06CC08E
36EFDA76E57E0A60E1ED9EFD4BA27631BB1FCFAC57659DB0F25B3F1098D001D6
7BABD8AC9E34D9D40FD4B5ADCAC8484B378AD48CDFB645FF9DCE1B9456A8F32C
F9F8ECF3AC649FD0A0C09F19E9C0302071E598DDE8D62114030EB580E8B7B48E
CA10C3B9FD2498D84BAC4D649597EBCFE7DA6DEB238A87FDC41A647D79A3E56C
4B5AB27930AE3392E4D5B7DF63406467FC8E6A63DE565844A055D76B779C8609
E85E4BCFE84319532B3AC9D62BD413CC130A5364EF1F6F3A8F40FC28A8F80062
CD6C9CA9EA841C25782D7534C5486448FC86B1CD00AC242FB0ED93447AFAFDE1
4EE8DC4F4D6AA70536BD8E66FEAAA8CE3B4BEABF5450D66D3003483BB525E726
24E6CDD62EB5BBD375B908144FD6A49D62B4AA487C72F456899AB0902462A452
FC4FB95130181253E90EEDE1268161B9A03DDFEF4110456758B49C4B75E97026
A70A7D06D47649CBEAE4DE9FCBBD8F6DA5C9DCF1E682A24EE12B834A6D01EAA7
B7D7102CFA11FECE107BBD8ADE967101D476F63193BB25A9BF2F4841144E5B06
E3583F5C997211E5081EBB453FB0D89232567FEF3D544A8F9B896303A47E29FB
09B3F2248934502D0364D400AAC31575417A295DA0B1789F738A6ED721F20116
6F975A39E6DD50A266D0935A38079AA7033BDA2A7CC21BA34994E0C3A0CA9068
3DEF984D2F0CDAE87B801C0C536C101AA0D77A3B65651CDF745B150A22A0FA95
05D9A09C8FD62172610A719CD4E8F67603C4E5E9DC24349F29614784C3339DBF
4C4D4D9524310C3E12D61B75EBF89FD2010C13D41324F365EDBEE47F280A5ED2
A5165A9A2EBC4A7516246D99C18A0A61F65D32B60456344BDB08C929F9453553
452C97E016C26B55893F2D2098D94298EEBD3E93E848FDEB52363762FD7E6B45
3AB36E6E325AEDAC9D82657F8ED07C3F4BAB14F04F84FF171362B3551FF7356C
84CF0F2434A53A3873EF60F407CA937D4D90887795B84C8A54C899C531EFCDD5
E8F4304327B11C6AD9295E00BDAF29369F62CB781E07F75A30CFD72807F18859
2F0A82200400C10C6DFF085FD50CD7AAC72A99F351D824F86D33CC89BD70DD41
F5E2414906C86EAB1DF73EEC1E8AFA68C7E230DAD77D995F5615DE0DA8F40992
ED9BCE277024155EE3A67C4311F57D2F983D6B19A9B435B32E268C5C50DA95EF
3F0F921E54FE0F2EBBB1972248F0E4BB8AE3948A408FAA0CB608FB551AC48207
62C25577BE27D8FDBE6424EE94CA99A97DD2A7A9362E8EDD114145042751E6A5
DAFD97118BE5B8681B248F0CE3D77AEF339FB455F3817CF7182D1C2D452F250D
FC5608982CE8CFA119B586A83E8FEA614BF10DC8D2140B854F2E7C3CCABAAE3D
2A80837BF7F8C88090B5C75BD053588563850206DAEFE33E4C6725EEDDFA70FD
5DF78932BA7924543317680052CED9038CEFD1B642973E31253DAD08488B1C71
AA6F08A5FE3F6222ADB66F0401E33DFD17F6080B00A9B3BB548FD2D8337553B1
F01137667331B98B6E645E4CAF177E39995BF7AFCB57856350661189F7EB8082
ABD4364A7B1630CA0BD029D0CD9175762CB58143266F22BF8D0512F7C77FA590
13B731670B06E01630670DC48DEB43518B241CFF20023158FA3213ECF7D1A49B
E7AD6D6BAACE6C3E98644BEC821046C9246699909AC060DCC4606454904FB9E7
BC9FCBF739E57645355991B4511E39D8B71F1B8622A7A5D19975D41ADEFC852D
2E598734CDCCCFD8C05DDC3040E38DF0B9608179C8BF28994732BCC57D928BC8
83B8E7606DE2F7128954373F9718877DA7599DE0AFF6ABB520C27D7186077CE7
67994941E9A5D75A8FBBEDA2F3FDF20CF337C7E72EADA68F6A0DDC1BF80268E5
088BDBE5E056BBDB0F1BFEC6663C275934BF33671BD55C838F4ABD354B2B3DDE
8CBB6FB74CEBCFFD03DA113B0397D52763EB0358D32C0912CBF14A1982227AB2
14371C060C9383278C825595196DB28B1A5318E868D3EFBB90D58EEFD17FB2A3
E1910BD6004EAB05E713C3C62B0853381B561B1DF0A772DFD5D1048DC87D9F8B
BF3A28847AFE8A99CC319CC0C31760E7B2BD1AB594E30D797581F5A0E81AB0F7
ADA196F2F7001A3D0E8A24476CEB3AF69E875DE4F79039F09792A2B6E296CE4A
007648C0CE655612567DA35A9C3D178828BB42507B524B622F10AC8781B19CE8
AA2759D809D76A28F8E732D208E54844EC9B612458EFC5CF430FF322B870CED5
2E42690F98083FC259BB194F4DB7EAD5804EEC91B7197B98C9CDF8D319208C19
E655EBEB21109414C1615EBD061E219BC5C5BD8D317087226B2FDF7D9520909D
5589C52B018E46EBE636B6214175D6C3850D944E43E0BE6E4DD3C751E3FD6AA8
BB509B5085445A66B6A58DBBDAB5EE420B6D136FDC941CE819C6D2BD022A09A8
E951FC4F6A4CDF352FDFD48E76C5737253FB5D2AE26F681D5370A3F98510D85C
DB54556BC6C7FF68FBD045C771820686C412BFC78C427E8E051B99E95D205AD9
D4EFC079314D208363013D8E09405D069A5E6BCE653FBDE9A895EE1224500D4E
89F4CD31A93C312EA467473043C6D187DE8A6A3C971A03327FEC53F1F4391328
2D7DD34B9613E47E2507EDD79BF25B181AD308D29C23074544C3C2DE35DE090F
1E6616D745D03C080D30E00F6F434FDFCD6DB57706DA244B8DFDC8661514CDE0
29EAA738F71105E8A3010266862CF39FBBA573AADD91993E707C36F369654F6E
978CB8E88E1DDFB252FF9ED5F0D2EBB74F9C89A4DB9FFD25C55A4F377E53B352
830FA336B8CDA184121EF64D57F39DA7E5CA0A68D62BF6FC705468B2FE766795
4B34C69C09F6B2A5FD58037D23055702D827942BBDAB0A2F50FD97666B5D8929
A96E6D27DD8B231EE59BCA64DAF1EFD40AF797F32DC9655692C15AC45C83A6E9
E8079853BC21C88A8E8AD88833808160A84F3F9F2C4BF5FF43DFA0932B65C1FF
7776FC2AD3CC8496259C1EAD651B01ED4C112B8E1D0991D0294BB9A13B7E9A88
322F5314B56F8E0190FD4FA2A0A6266B9A9511819D1F2CAC4DAAF3214DC47D57
754E55CE6588CD0FDD9D151FAA4634D7CAFB950DF5FD1CFDF348B8A1F0837992
2A63779BF0C85B224108ED3708C50B070833B9DD6E94F1A57DBA88B65EE0DCF0
830C02BEA2CAE21DFAAFB537D8D9F21CAE9970EA77FD4B311D6C3705C2C7FA6F
07F63D81F5C0FE93F08C5B690EDF00F3FE36C9CAA4C56E41279AC673BC00B2AF
ABE69FF4B9B275C6F1CBEA80629C8B10C5758D1EC4DF4956D533E0A0670D60CB
D73D1E1B9865CD24370A85275A7DA9E0E1336F13F8526C6BBFF2B1DB7D377F39
6DC6F6110A42D0F70DABBE7DA6F9BA6173277A7D63DD47BD4F4E79F0740EEB96
9B8B374E4975E93D6CC7892552A9EDDE88EC7BAAF00545A2E2020E33CE29175A
0E7D978742CEE7D5CE5A41AD7F4A2230EF20EC7F9E54E92E75E48291ABB565C1
F8644CD5D9F0197C792926E857CED60024172E360E4B169DA93627B56C489129
5C531C39169D02359BF7628F4CA71278FA389756FBAD53C403EC4BCD0B75DF80
08633BCACB1FF8C13AF834996E87AE9B53C0B8009CCFE62C17E001C966343418
DC0FE5F0495F54931E74E8794276F856200CAA4510D460128B422B6C3FE9EE33
9CFBAB2C866D8E212928169BE9BEDB12DFECC33451DD7E052CF00FDC0A854E02
406EC8D807EBDEFBB74E9894BF0EC793699F0E682639B1B41048F325F95AB5F5
B11C33DADCA31A2CD474FB45D9E93FB4E3D4A824349A563D628BC5B81D682AB6
4F08DF66F749B1803E3C1EF42D935EFB4AEBC656854ADB4AEA878B757A68BFC5
3ADF8F88D7F4844A8FA4414EF33942C8DDA7C7C36002FF4DBE9029A1E79BD5F1
65EDCCF408D0D1608B7033F0395339E53E260D76BB4BA02B72FA2A60F93DE35F
B61FDFA5A4C78E426D6F68DFE42F76B00689AE9526C39853101B9461F4C1862A
4534F300477E33CE830DEC524749A6C5C0F20571C577ED03D63028C0A9CCB910
BB59940BAC40E626D5E1C7A474BA19F3AFC8DAB46E47A3E91301863DA4F885FE
0CF685B6724744DD939F03D40585C0AB2F5ACE792F05368499B19687E504C4A6
611C750B87D2A920F3A7345EF355E8BF2AC5122174ABAAF89F14D3B913E320F9
F732DF9D07CDD357005BC5FA657327D41340F9D2987CF9462B74259F19F9A268
8B456DCFF82529C7CE1504213EBD9FDAE57CD482A24A50DCF54CE999BCE6425C
6A0BE4F2A54569A59D638F40AC88082421D6EE28D15083E41EDC53EE7F396692
FE52B93E33C87D3DA3F5DB311E5672052E05C3A5CCB847F119A7D98D00CEBF27
30D812FDDDD016B803C38B892380B527B462508AB5353B6428ABB42BBE9C1F6C
104A56F6F097412BCB80AA7307A1C978F414458F9A7EC07EB5F23823EA401C06
D3D5E81C497121E89D672888605828AE138E237D67F4E6D9031F874AC47BEB4E
84870290E8B30944DA29B54CD2EC33F618B8CA36FCDA32FDC097B1935F5A07D4
02D14F972D7E215A6942623456E577D8AC3D2D8C5450771F19B59A2760C52C87
C36694BE5257D9DAA43CCF04187CA5BDC8EF1246B62339A063C5D408C56020A0
C4C52CCB460E7D37F4F3FAB67FF5C6BF23015225809F377D80FCCAF634AE7A1D
21B652818AABE247C5D56B75399BA25DC06AA5E5CDF0DB7CF70534F620EE513E
A8403894775B2DF1F871924CE2C0479EA8C8C337504EF1D71C4BC9EFA3BEE0D6
3E0DC4E6F253A60B2B187AAD8FC51219E393C3F3334854C5D7495678DE754AF0
AED1ECBC76A385CEC705A2EB89D7F32FBD60C08B86A3021B0CDC0B407F725096
DEC84C574452605A8E2D4D83EFDB8229FBB5FAD6BC8BEDDD96595D60F3C71202
EFBB2393DD45B978ACC96226775B037B920804532521E7EDE46962B649E80C67
BA35C6FAFBFD9818C21E96827534175F5304428ED37AF944D326EDDB80820D55
0FBC010FB410689BD4AF92BA5D627FA697E110BC240CD8069D8039DBED8BBF9C
76C921024B55FC6D5DB5BCCCF77226C214AB72F623651E77725BFCAB36FEC044
A22874D19630E3FFEF0393A6BBD801CA0B0320DD3970FC1804D241E14CED521C
D2BFFF553A539F05BFD3125B9A52934AC46E268D28E8B6FB0433BCD7424BCAD8
24AD77D8837021895B04400D540B1A42B6D057F6EC11DC7BD2F47472592808C5
F4357D292335BF6663088E4A13FF65FB1A4A5E6C8CF97392CC410505B03C28B5
A0D0B0C052CD7679FFFF591DD2E4B65B1BD866436AA7E2D2C09DDEBD95B89FEE
748C22D04028A12064034A7290750EBC897F11987CE12AC4C09820CFE12B6629
1A897CD411560247B4D041902FEA91165041696C183D62872AA2923D802D9427
8A2835C91B8E929599A0F81B43C52F5C88CA3242F20984B44BB4BFA718783CA8
1177E26CF828FED0D16B16987D62B6EED163A7462EFA11B131B70FD5509D40C2
02ACF1153F62C77072F4618CDC774CAC643C8A0519441C6043AFE063AE129245
3F5050DEA499563C86523C08C94F417CA514CB0A60DEF84924B838AE79C66892
756972251698C73C6006B18CEE5DD843B5FE4096F520222A20FE01B307905002
20E46FF64199038C006B74DD8D060CE5FE0B0EAC5A0065F244704AE2B065259E
E821CAAD682B251DF5679E7DBA6DB828E48ECA9018B12EA9801A93F1D2EA5B38
FAA200D1D0B9A91F0F83DAD1DFED8E8E569D3D3DC4E19ED8BB7B63CB86D66631
89688C6E5B123733610842E1E7E858EC1F4619F671605FACD5B6AF9A887A21D5
935681F3B59F4353D9020ADF5271790BBBB6BA3D4E22B144A961EE0B8DCC3F56
219CF698FFD3BC5E89C0FD5D7B7E401AB82D0B85C4629DCDCC78451DC4504267
25D35E38F856777BF90A75073302BBE80809A0E934D63F193DFB746D2899D07E
3F8CE1918548FE197A0F6E54EEF9B3879A404F1019BEEEF9DACF5F60C8D9DB5D
FC8201ABE06DAADAE39D1EC954B803C19DD4F5B58C4D2012E04E630A683CC5E3
B553E8D513719B4467FF2EBB5C7489358364CC0A9B3EE1860D5F11A241C4889F
C8C0F634CABABB7EEC7805C060D65C25FEA1A5980EC3B8FDD9F568AF98704D01
CAF403BB449F19BE418B41F69BC01816313959F547D42805E2042E248A874E81
4B3D78F46AF4F001A3885FB94815E33196056BC687F886C067FC70DE0B05B110
93AFCD07D26BBFC6568B8E12707DBA8BC1F786DCCB60523F143A1574FC22CEDB
DF325F5F3D4E773B8D621B2368D99F9AAC581DC1F040BAF224FB5C0FA52C0B89
FD7BC847B052C16E049D2E6645239263D0B6E6419174661473016B33B5418F21
0BACAA8CCC7D60AF299F7A6109C5F714CA50F1B85F57673C6CE09EFC4E229D46
3548AB417B1ADC0C2D9D95F7E82180B767328BFC532CCF26068F66BE3B79B89D
E7E561195C6853D22BF99D85992FEAD42182B1A6C6754F6487EE04ACD8E91BF3
42F4087D9BC3F7E7C5F35440E94C8261317E023D1EE84E77FA87202078297C3E
BE04470D136433372FB330C9251103E56744B6F4BF9007CD86D2AA045ED8F5B2
2144D82C90F5D0F35955E9F70669113065923D7A6457012D7D59BAE248FB6A6F
0BA4AFF79E9ADC4FEC9D11B0CB1EE425FA28690CE3904813B0A01DF8F876EDCC
4F384055FD37C5757267BEB106FA04FC210E9E3DD63F00738AFFF0F2903EFF7F
87C2E66069D56F6579693CB65053BF56062972DE5B5030A53582DAD4BDE5254C
4660274462334AF71A1E8789DACF6EDCDE5659639825AC78602AD07851D8FE9B
CA921C410EDC6802C21B5561DBC1B19BFA4431E2C5647895A7F7469F71248E27
1FE38DB3B824A78B6761B22CE4DA9F12658E1B06DCA548D41AC58850911D4D3A
68BFC499BC89A4DA1DB50DABC0C0F1EC4248CFF24B78C4B4DEABC1D3C21B126F
607D31F950B24B2C9042139D5E7DD43E07C180D36EC0611DB7DFD41217DF50CF
B8585136029084CD63E7526A427499AFAF4ACD6C6A475373979424F0107B66BC
BFC852454446457A97395E80B0B978A58EDDD9BD34947AF82D8D10AB50C26895
953E493CD5E3519BA7E212220D0EF7CB139D0745C61011010407B5F2CAE24000
9B69B6A167BC387D06AE5D07A38877924D5DB468558E60F3C8EE3A7AE59C665C
D642F51EF1EBA346173B377573E9760C57EAD7CB37952D1A0E9F744FBE8041D1
C10CD8EC38910D05E5AAB0AC7F4AB9CE3BAE1E96309D95CCE788036B4867F90D
40C1E4FF7460399F1F08F98F0D334F90367DD0CFAA01DAB7A5752742E65D77FE
A9809360E599A5E23CC2A3BB44438C741B79546B6FB5CAC002FC158F4177AEF0
B44D466103BDAE0D6DF3697FF03EFB856B18697134143D76C8B2184A53DC34FB
9699097483C5376A2C3719CB2FB7C4B1311ADB97C07BA24772579B344930B4AA
C76A132C32DCBECD227134E7F747AEFDC1000E48A784CED2BEE9375D7DDBDCA3
C894A1527C8EC06EF8DD24262D80A1DDA1396947FBE8692B77E9A6F482AC07C7
DC28850415D9AFC1C8A868801B990CE2D26FE851E31ADAE0B467F3CDF0CDE122
00B62FD553359823B345B2DB3B3C57F7748ECBE844CF256D98ED4C5C0A2096FA
FCE1449F0E80BDCBCFCF477A2C30A72EC227B20F7BD6C120C124BAEF8489E22A
13C30552196E990462045B4D171C89D8AB26B7ECBFF4EBCB68A2D325F02C783D
0F080BB9427C07939EB5649DED6075ECFF58FBACC2E7A431527D3338B3E89A18
C5A3DBF575BD2DCEBCE2997C954550A792BFB5004B54A8631F85FF8DEF675A72
FA68478593397942ED0508663E38B7FF05556CDD7FAF7FDB9EE4E2D619D2EA74
D6613E87DEE38A2A9504D47D4E0E4C23BC4F31A4AA99AC8B08E2C1B671986592
AE7310903640089393FCA362BC59A995FE5430B39CB5EC916B7730545539CB2A
58832AA92DA5F34F197E3EFBF17115FEA4973B33A45B38CD6A223B219D9978D3
B9FA37E805892E6D589A52D66CD401D3BE7B698CB264399D901F1DF581877B2A
9A6426F6010B1050C5F50CA931A8AED090264B7AE4A7099844282972DDAB121A
040D3D7CC97870F88C3CAE8386E9FA937A0093127A715FA8CBD9B0CC8D4C2070
A978C4DA25A1CCECAD509C077C58F78173615C962CE32DCECA53608173E9DC5D
8292AAE110DCA268598438992904D307A292EF2BE0378196A107DAD0FB7702DD
52E149617809FB8B2F24322AB310F16A60F884A5889C33E2DDD5D3DC32A37C5B
D00DD016072EEEA098A86BA3776734053FC7DBF813A96D33773AACD4000D7114
0AE606AC156E5CE91FBD5F44F0E247D957956045B1613113FD9B6D3C9D2C4B70
6A00CC6FC0C6FDC412D1B1E0A59F386F1741ABB6BDCA12EBFFD4384FC57CB468
9FC0FF8FAC44B39E0F40D59D152BB1F5E716D30A5646F6E4A7190AF94148B6FB
00A5F0328A6CD7A8669E539995283046A4A6DC6D9AF57EA283EE09BBD61FC4AF
42608C6E01E2E2A3CAEB9C52B1E16C7FCFA694BE8BB2E92544EA213F9B072C85
22639BD02BF782F79CD875F2D2745418BEFCB27ABD9DF99EED9AABA70EBC005B
7E807A854FD70F209AFEC73588593FD61E5A0DC97EA2E4AA2D6C07BC2970A2A6
11750F165CB93993472033D4EECB11AE61D7EA73EC82F137F5D721EBE79A621F
F37033CA412EE05A459953ADB573EFAEEA5D8C588DE556745DA3E386BBD02540
C87F3F7AB9BB690B3F1F8D5D92B0125D3D3408D17A9F943BC6955BE9ED8D0F03
3FB488ECF0ADD93E7E4BF059F3F0CFFCB7894DD565CCF14EAE6264E06D391FEA
E0D8F226723823EC950F683A6BFB55D22DFB161E1D6B6DB05A1262FC7E2E1041
43923BF639CC3241D6FC539FA7677E9DC16D93CA35EB458CAD1AB52FE22BB8EC
A12177C0621857E66D4FDEDBF9258EF212E5C281463B9D81A24C63292BD56F1F
25312B41B125B4A46DA4550DB20C261EFD0C35778E3BB1B1EDE4A453F3188709
A85504074B8243F84B182070AA3A421603ECC1623D32353CD7684A1F437CB3CF
D4E356064154DC618D0031D66724E959D8F9F2B72AA0023E80872307E08BDEE0
3F6F7368F422D97EAF9CD25120B0F2CD2815C6A4C22518A5D3953256B49BCB1E
83AC137591B5122F0BCE995D9D4EE4860BAA23C9B1B2C56A8FD9FD1DC9F621C1
57FC555B4D973E24040DC0817A30CB9800A890813A2F36AA7254E72150CE745B
2E8206D57725D1051C7E8344B56F83FBE176C468E63CDB4B7433D52A8CA1EBC4
E87387ACE2F4D31C0D4E1EFED6B3C9892DF4A062BEA11998D025B544A987BAA1
17DA47CD73F6589DA9180169A94C445DB7A56C39CDAB0ACAD8A3F6E7D29AB122
8A867A6E1EF0E9C6F899B491DC15C651C5CDA311CCA88C2CD5D6A973C98D8813
06BAA479866E9BF7EA521607C9807ABD8B5F2A41D9D60E8E244B19CB13DD58D0
2216A81D710442253365225052ECAC84946C1F08E02E3209022918E3011E2CF8
76AD6F2CAAF5B55DA05E957A0BE481889125A9F918B0D589B3F75131F74C1EB0
2F38BDE00115A21706BC3AE8F29C792E455B4C99016E04B4623EDD9332FD97D0
3F0162CC8BDB0FF0E1C66EDBDF4FC7DE2392905875FC28D07872F48FED69C45D
EB92E0192ACE29AD10E1EA3439C812010BC15B234FBC8D837D072CEE580FA9A7
41026FD76EF7A00B6780E7BFAEBAA6412B6ABAE22BC84F3B2F41285EAB4720FB
C7B133ED8119F306CC5F2623BFDAF5600168775DF39AD09C83F428992270E103
9CAEE78B2D136545062399E91360CED7EE928D24ADD7FF8D9918C339A8E8B413
8360A0DD4999323D8B4FF8129A8EEC3900A00CCB026E694F7EF56933B7194FD9
F3E4EAF4D145E30BD9AF179FD6BFBAE48004033A4C316ABB86A95F8FBDEF27B9
FC1AD3215A03D6C3C61B924612C160DDD5172D98DC5DDFA80D9456928291796D
97AD9CD132894AB79CEDF9AFBEF0323B34ECE54A1BC5E7269F5317D031A400EE
8C4AD035FFABC5957CEA26ACFEF57ACC243EC74C5DAC762566AC995705012873
B96E9DEF3EAEC6D5B9A045F9280D79AC9E0CAADBADD2E056258AA295803C6007
0F8E89217F14F9570108AF03E93373736FF863282261A86067AD7E76C12FFF28
145F3F0029A07BA8C9297BF8B0B016EDCAF80B972ADF0814F5DB640CFDD8221C
0434208142C0B9108FBF43DF70F0ABF9A7691A4F7A75CAA5CBA0CFA815C79669
AFB0BB1A69877EC2E790D0E6C9233DF8DDFADD039C07D7D8FE3BD2D72E438409
C48B746741632E040D458B596AA9B4EE5DFD07ACFFB18E8DFDE785893B5EFD60
19A15F9EB96B38CBE9D36EB79E5D39574DE9428C47AE870F785F1F7CF09A0461
15D45493F7A67587727B64D2D56357FAE158C5F5DFCA81222542CE81F2CD52B4
7A8CDE6B0E47DFAA0539291B9B8004F29F21B2A9D8EA7F0DAD23E33DB5F74420
2CA584A293F65B0EB3258C71CBFE3F8C66700B0F05CB4E8623072F9884ED79A7
5221D2A3772CBC14E6504A1371463674793EB4F5D24B8734863351AE6D01C993
D991D70B5EAAC7A639213EC0F82A1D7750F7C804D9A3A0D376856B2036634A72
710FC8DA959A662CD4557B6C89BBCCE6C448AC5C61D17285F9E2E321C9681F1A
C50E1A0D3251BA7D3E82FBC4218BFCB1270A28513D0730F7AEC84C4D7EE11BFC
90EAC5CF755173A99C31B9DD9689DD84408EEC4830380A6BD3E210DCFC74F2D6
A3B75CFFF40E7A9265B6B00FC75D50975BDB44B28010AFBE000CE1B55B2F5B03
5ED70817E8C999AEF82993A2DBEEE7504AA1542D7B23D36C6BAA8338AC2D98DE
543C1A7093BB4DA538B31952E14D6E5B4077B438642E42FB2D30154E51F564C4
64428ED2D7308D3329788FAF24F2C03698CC81534EE437E8CC706BA4C3D1F8C1
0556655906B164F7BD728B86D3BBE1E37BC2104E797474023615C5AA1E096271
86E9F40DF393CAF0F0AA8A81AB02413E75A9F2241D1D17784CAC36FFACA451C0
2169A1AAE7835D06F6683C5AD462F825F1D3B0B0E9797836CA0B1D5E730546E0
963399EB3291F47FA0A05D57215EF9299486B6CF3200C869DDC5AAE04253AC24
0F7A64999F2421973E06DB49D8C024312CA55295BF0D2089B505B5F326EC4C77
262B58167617019BED0DD554AD31AB998F5821BBBD8B75EE2FB374B1AA261F22
CD75F66E7295A254FEF801B6967BDD5BB072E876DBD7E310E31D3CC5E760B826
8E9C7F1AACB6BCEED9171CD817476967E255F808AD2C72C261D8BC48CC05727B
71589342370F8A366E11B3654B8CDF381CD18139960CFE928A76C33E730F7397
78BBC0E70C059ABFD5CCD1F60FD3DAC30D9E4F76C5144A7C204CFE3ACC9AE672
D7AFB5FFFA51F9DB4454413FBAF3D9D0320F6CF33930DFBC7FA749554A4ABB0C
396A3613EBE7D42FF99D26CFEB72B74A1A139595DD97314168CFEC5746F5FFEB
780D5DBE09AC3B71E1B5CB5CDED5E9404F5B7E35EB202BB6D6EA4BDF374A81C7
126DD8E746FA87E04A8BD485C07E3CCB30E35D159521D62592627B254FA15933
5DFBFE7E501F4D84943CC2883C98DA8B112A75AB907C4F95B383E6DC09DFE6D1
8BF866903D3C694EB91AAA50A2EF66F4E07A077A88210B7A95379D2D7E532DD1
55061B0EFA51945569610079DF9E96CDE8D005FC25E59B029C05A1E699366BAA
2EB284777A24DD129026E160A6453D3B6F5DDCC0FC6453406CEE1E199A2ADF70
8DDDCAEA17D4FADC544D0991E0302D896C0885A3542B3B7216F615642B6D7913
C796CAC09567214488B8CCB2721972CF98BB2CB891F08D774693C45373611268
013B15430C8552DB28DED30EC42990D2D7674A62EACD13CBBB381247F4416082
BB70A06F1FCEF61CD2A5097C4FD2B45BFC50DFFA14347B2C31A6B49436E07AC2
08474DF121D5FDD0071F5D6647109E7943BB2BDEF0E433A3AFCF5D3605F424A5
3292CF5691525858C849C6E3D81F3F7CA4A6D2054364F70512377DD60AD327AA
21A89F9A20140E6CF9AFB508D57BC787EE9649E59EE05322A710B0E857532F9E
B9967F940532E3CA8507FB01B0DC74484791223B7721367C335F779D6EC9D065
C88DBAEF0FA322A1493AD894473939D394549286A20744ABDA8AE0400112199C
50B38B6A331EC43205D364C36DF7EB7D7523D3D47988AF42230906227A0BD1A7
CA849DEA8330552B5EA1764E8FD6C30940E761B8C6728079F6F9D1B52FD3E683
7D783BE9BD1EEB3A5B4973930EE84AC0D010EB5ABA69DCCE0B54A17ADA8CCBE3
F6B306D1B8B98BA21C7367442C2269BCDB0DA14C24A407D408771341818CBD92
12AC5931D8E36555F987566C2B8C83D91079238C2C778E65A3C355E253CBFE5D
F69233DC41378E58BD33F44D76204AFF41F537CC7293367D03DB34C8C4302985
144A0D49172E098D858464B4567F289298A69F79F6981B190F26774B50E7B442
F9537E48E70EB7A5CED3C91B9B95D6779B446C343AFF9D8F9C1FBA4EE76BF161
8A03C6202E27CA82E9A1CA626D8B8E10D901FCDCC7F175AB4519960F1702B4E8
804D87E92E043C327397D4D4DA8C1F3DCC1BA80C0CD5DDF313B203E0A68F8F7D
3A5BD929E83B13CBB42150195CAAFEF9D5D4766BC21BEB95A8CDDB73F2C4370E
3FCE02D064A643D3F64AEE679B05EBAB7F37B118C13A5371D955CDD2470425A6
EF88167AFBB4B6BC1F9F5F844D4988A574FB12CDDD4F1347213C932752145534
BBFDD27F19E63578110A8079C749D8407CA5E5E9D42A8DE84EEC46E015BEB634
516E64EDA0EBF49A3EBF29DCE9B243C773862E06BD9EB89855E00FA4F2651AAF
91B101B01D5D3349B6F868364FA6DEBEFB280385D1C9176E9979BE24A6A444D0
F78102FA63A5508EC4D6FAEFC83672546AF3EDE43B35792D80CE15A6BEF1CE58
16DE8DB10B1FB50C503E5130983C68A4241BEE082E102153FF6FC77F1AA11A8A
FA6B6EBA8FCA6750CB48A95CA33934D7C9F87B96477EDD43D102BD91FE9228C8
E58E19E7325E4B745066FC878C3635F884009281799053F2AD9EF1EB2C265BE6
3A2A2FC874A864FDE98BF0F62DE28079EBC07887EB84556F43AEDEA439FBF139
A16A553429E280865BB73BDA7CF3C2FF259A91F10FE3D43BC2A5698D6BC404AC
B111BB0CB06397DA8C3592E615B6E462AE539E71F362A4BA881C2746ED44CC85
6FE7D20B081260564FA26538BD1F7F090DE03CB62E0F8601FC4D79B524FA4F83
3BA22D2A9012287D8BA8C4CB4307A1188ACC0F29ACFF54FD72789EBA34CC609F
A509C6886BBBC3E7323C6577C42793B52B6C655084B441198134DFA827D69E28
333A6A9E43A0310316F78211ADAA1AA9954C8C41A6AB40AC78C167A0E5CE1888
9CE0B44A0315084F5C57B2E5C1DB6B1A94DBC963FB1BA1018BB02F3E02EAAFB0
BC664D8800386490A8A577304663F5FA4B9CF430BC88CAEA7F5EACA0D28D6A0F
247C07FC508D83491CE04DFA2FF92968376FE7063FFFFEB8C51B57F75ECFE723
8BDE69DDE3E8E76815C389EB932443AB7C855B75672B3C002D0126EB1A7AB269
5ECF4ACCAFF8F2AAE4B0B3B89FE45805A2AA4A5EF425A6A412DBD0F20CDB4D1D
A9E54AAA3DD7E648BDF5083A19705A33842506DE5AACB3B40C2AD1F80145382F
A077AC8473A2197ADF015326BBB45A5A1007852205E640375A9CAA5245667D05
7C95F2CA9599390857286E3B69EDA60B24ADF88E7005807D67178C5745A21FA4
8899F9B2386BA4AD114054FB455C41740DC01DAE096E603D91023125015202C1
C08F03BE8678A22E2FA552E95A37D9CEF904EDEC7EBFB0E60995CF6457CF0CC8
FB4F08F2F02F17C0B8C688C3CCBD2BC6A26E593FD03F67D332BEF4530B351B69
7B29C3DFEA3E474F6287CAE9F65EF5F7024C75B312709B288BD7DC6DCD6FD5D4
0FFCCCEA88F549F4FF7DCDA5DD6F5ABDAF12E0B10F88045C863186227C6499DC
4E6DE17A43D33DB3BE958098A9D86FC2982989C29FCE47F94FD8CBCCF9442211
5A756F2F9D22E5EE37AB81456EDC2766E58C7E0919F96124E17D2C0D6F6F25A3
A3261B5480BBF054147B1CDDB1DF8A05A6FAEB418BF5FC0965BF7B274782C8D6
08698A04F5A157BB16F60486F9C38AF072F4A6A07BCE44699387DCF64A984239
EFBC4A36C40D9A406871E2FDE9D7A8A0DB4270B204E643D52B1C06099A4518FD
0BC54C4AF901938F75A6CE358A3A3368746A027350A9FBF947BB7C46F5346868
2E463E69702266FBCF04AC9A0CAB64076EB9EEC023A760FBD8BAF9809930D788
34A7D4BD3D43D4B2640880ABAB0AC230DCB02818AF9A164918DEA34758E04785
3CFD9FEAA5AA98B091AECE8681999D7C8CE7081C64FFE160F9083E36F3DB62C2
AB6342C5D205EB976040B7AC2FE63CC875F86A646F1492C18B24E84633052EA5
DEF77B504A57187D6235449DBC3F67808F284D5400681016F84A5390F0F2133D
75491624029ADD4A9209DE8A4A3875CEE36203B758F1F30B2302A7B09C784A38
A53B50172C7C3F3FB0FE3C6A0F9989C65473998758CB83768375E8D16FB3061E
4445DD5B88906B59DFE804795EBB81392EC6CE183F72C2571F46E81CE317A0B8
67554FC41DA1EFDB3D586B9579B002548840847A2B333E5E409CFEB234211D83
F40362CEC29A918C3BFDA37C042DD28CC39D9D83AA89103B3603B90E49670D7E
5F34D498E83C0E73105119C0EF23C5A848159823E67B18643C65F6CF2ED1417A
B863C2615F2D26EE13D7A04A1883329A15495850B3DBD091C7D41B7859835D08
CF0AE8B339EFCB4D22BDB414C852C8CBC40EF59777F7F8A391267C66712D4D2A
BBBC5EC181E3F9AABEF35888E87E3AF5DA244DA2CBC269D90D21B62674F16AC5
9608F55AF52A70D97680C942FE914BCA7ADBD966AC2C2197D2C3D6D006031A50
4D585603B92C1EA90C5E2AB594402045BCBDFB0E83E7615C5FCEDFECB3E3080F
C6D8B395542D5E464EA26F3C6264FD726D9C0B7BB9FD97C0233F418BA4179628
529A65F780A78E56CA9D874106924BF00029F54AC12BA31BDB912B371A2751DF
2506A7F75D37231954EDA483592BFD1A77409890FBC33A8EE43EEA03D340D4B5
36FB1F24D33599470CDFB59E2873A84734BE2DBB7AE737DD81D4935D6B2A04A7
884AE4336F3FEBD08B7B93B550CC6D1ED120AB61D15E4004694D39E05F5E2AEE
30F76D51A3CF5FD035B0EDB8964878C02328BD308424854AFD3AD930AF497825
59D72842FD7FB86459BD0F10B0796C113D22152BCE348482CA44B3B19D36FF29
0B4BD1B807749BBF6077BEA7094AA4DD26FE70A69B58F455646837F53728D93B
33ACB965B8C8AF5B39EA303CDB728DFB83ECE29E29F8ACEB8BA25C0FF5F0D840
032F95D39F257C5FFEFDF1E30F5C7E47AC5664BCB5A71663B8B0644BF7E5B57B
4024B9D5756CFB9D939CA9DD44D88E291969747968A767404B85AA04AAAB1492
482AE66546A605B0A862824BEF164116608147691220B40CDED1AADCA60A7E22
E14EC36743B36A7495686545D11C0E99DB92988762E6585B31D75BF5CFF45E0D
732902199C52E26368C631242A501B1BBB6B0865F3B8A875957B66B969354B60
0C1F59DBA1A19F5EA98046364D9C8E8A7E042AA371E061C368E357E57EC59D98
068F254ED1A91F7031FA0B828C89F0402B564C70BA028B70E194489B1FD064E5
15CD8EABBCD4488E8A88C30A33C0E343BB16449961F30B34D1933177E5EADA8E
CCCA37FDAE1C496B5D0E7C1D53E0B769053BED7A9B6273EAEDA71AD36A1E1422
A76D86F602E1FA74D8AD1DB91648C8026F8DC0E546617BDA4097FCB8FCB635C4
ED18C5DC13E2FBE104EE488385C954AF46D90692B49F7B3DC679301967EC4F26
F3CEAA224780C65D0357949E0372F2C52BE2AE157BA062086CAF2EA14B0C75E8
E5D87BFCBED895F5319B213778CE74065A5F5E31B386BA7D57112248C20F8F19
37214062CDB5F5D36768699442FA8CFD47D655952F7731CBD3FFDDAD2B1EFCD4
A73CCE9CCAB6EA497A91E603F12241E2EB52B5EE286D3582FA02F77C415C4187
39003766FB193DD7B97DF0F9A11121F93EECA7681C2397F448C46BA164AC7BE0
C0A73FB423A2ABA4E4987519B549B1E8C80D2631A99DECA92ECCF346912BD843
86209173E3FA5D55A010EC22C303268923DC5E65324AFD19FCD063B9F269AC6B
717E96D7885472A1F3180A5D75CDC4B045FE299484C0EB1522FE220347F9D7D0
24AD69C63018054CB8AE7E077D071F2636D7287B209D2A7FB3F8FE3FF0191A1B
BB94DD7D26D98C3AE27C211C8C4FA5132D2B427B8583BF1CEAA94A5F932FCE2C
D96CA703FFC8167C703D76BE91A2FB548AB5AB1461702C16DB6B9FC7A6BC09A6
7527FB34BC12859424AF93DB66C9EE07FCAD6181F82F434EDA7F6AB973ED254B
7542D9840643A543F4F6CC5AFEBD2578E7A5511219AFBFABAE4AF312575682E6
A86792FF4A68F8ADB5308419481FC1CD966965C72E9490C31153E0C83F0D3768
F4E5FDC99AAA25AD6822B22B9CC8A0E120F1AB9336BC2301C2B38FD9308BDC1A
1B3482A99DC90B2E5FBA8EDF09B8B1BB2CBC48AC2F425E8150E0A2C21129A337
7508BAD0A7CFEAA913B935BA91F1682C8957F5F6C5E05587419C70AA92193462
DE726263DBFD9635B701B700EE212446E70A536F162CB22D6B6BB85AED82C036
8CB98DDD8A8691F3FE1D7B96C516DA7DFE48BF6D59B1C6499F6E71642D04AB88
C99B254649D2EECBCC9267F3A69E5BCD82B4DE1097FBA4DE7BD4F60E2FE39295
95660F7583C833AAA8AC9CA8A26B51FEE38518819916B84008688D162C7FA895
DCCBD8276620B10E6C7E03FEA26880E1217FAC6ABF3636ED201011F687AA6A1F
A145DD16AFB4EF904FFEF935954AFB9BD2041241B1BC8519EDD8F88C8CF53913
7A54C6C787287755650CAF0760C2A23BEB74435A6FCF0C7E4C041BB3ABCC68CE
AEE80B1BD0684279EA28D1F2E996551F69A140A662A98CD3E5784D3FE369550E
C066319191D8B1E41B3BE2BD081CFB9BE57B358EC81D16316F21015487644B55
DDA2E1146AA3CFCB6C3F9C5DBE5087EB9122DE23199AC72B491FF8476240F9DE
95F1F507FEC112903F2439C1E08D8924BAEFB2D5FED007D0E646156C50A6FCCF
B712EC54252EFC5A70CE433F3547D36E0DA51E215709FF69322D42C893A30E07
8C0DDD5C6C2F44BF832E4D54880BAF264A443188405907DFB32DB77E1DA2E2F9
2EB1890FE6BB060A0F1F97ECC3E331AAAFEA5C905FC0D12C6ECB60F72D16E676
754B7F63DDF3174A09E363E92A1EAC874E4BF7544FC3275E36A43E22F67FCCE2
BC52AB9C9DBF4EAF2A244A3D8A0E947BF19773B66A92B751F8427D4AC3CE5993
E17672718FF301DB98A91C6F34AA573BDF47829A0BD0C1FF5B8DE91B681C19DC
F72A684B37FB7BA9F1FC00D98E345A7E0BBF1793146F66B9C5BFA541AEB7BD6F
0625517D54170CF68913009D3B2FE8F085958C9C0857F3604FFF638C9DB5F9E5
3231E03923EDA8E2FBACB8D3C58CCD07BFCAE08D822D88B5833F1A53A80E058C
1EC14B91C6611D4217131350E43A7BD18D8E2D9EADF26324E6856C1174916E4B
587EEA21EA20F863387174E3B1B6DDDCC4C462A2895C9CFD936E8E47D35CA15C
50CD05B5C644D53FFBD3E3C03AA02FFD5CBDC0840F9562D8D8BCCDEC4F62A11D
F4A3856FA4BD3ED8C757A5A7E53B3220627B59CCBB3FCA5940BE73BD2912BE0F
0FAB91E7C13E732A0D8600186A7C0EFB5B5996D0BF5E6784149C85FDA1FC19AA
A54C49F6F0B3243665852D1A5B12F15CA11F3FF558FB0F071597ED31E8072873
6C2D25F4CA2B2F44E2127FD415185CDEC3EB1EDB382EDF55C31E3FE7541B2D4F
B2A2D63041F7D23FD0B336202B92AE410F2420E816824DB8B1D13695840A4B56
14247FC0E0568AE3BDFBDB8295B01C0742475BE2721C7213A713C6CB0A281BCF
F79F658BC4F3889DC98D030FEE6C9774E0E2BC8CE7C700C1260FE4F0D27CB23C
CB5DD5AC1C45B4F6C9EF55D46057C73CB15B8EFEDD59314CB5B5554CB693A534
72074E1C95F4A4B761F25B493F070730D8E13DA60DB2CD8A2335B62CA1D8384D
4869BD9004CBECE1C82C263D047213AEDC309C0ECF1B3312511286D8C3D7B0EB
427C1749969DAF3B72CFD1F579F4A62E705B6DD79D3767DDA456E1B85458CBF0
DDB3DA821FD33EE749DFEFC436701D0C4F7211B5B5CC0A348F325F3E45531781
7FB14FE7F36ED2F1EACB243DDB6C5673A5BD6D0F4E80EB465221B68BFBF3F265
B1D1A1146A91079B753C8F06505DE5844566E465F431B5E2B656524B6D481FF9
A3F38185F7C1D7F378B62DB43CA4BC3A8669F6E924D719F418DA3D91F1056A41
B007AF081136D50948561FF5E7C65677F5C7C882B7BF79F5205F9E9A1EC74128
D2448189E3847756FA99164500A4FF96C938775DDAFF6F38DA8D3E7818E2FA15
FD01A791C75C468626EE4A639E0F2D0019D50E27A688BB92D576D161A3ED4413
DBDE1DAEF3E73608336BD2A14DE9D20A514D29AE12372EA8DD01647B953D17C6
42C853E4936F420867903CBBD57FB065E3B9EE8F6AFD49C342AF0EDE656CDF7E
59EAD6779B3484CE668FB74834A3A78F5B436CF000514A8E7BA6FB5B44EC1920
BCF242DAA985E03B45448F550B37FE6FEF1645AF3209C5C7CB5AECED9B0651A8
A70127A7B6D6928D6393D85B42B3AA17DDFABE69046EB0B0C8C4818AF7E1AC71
DAA73A02AA69A5BA421F382275F0C4E4791A6371735299F22440D02B4D2B19D6
477314944427FC7FC91F7BCA627316CEF67760C94ACDBD349CBD18E8CEA65C0A
0AAD83472B820B871D7979A52174C2BEE17D3818AAE8B6EB70C7D4C37680C273
10CD065D11C45046EC33B07469F871F97B17E57F309B52576A9C1FFAC977C255
DB6E47E385A53F3FD07A191CC377126A41EA96394170A5BF25824F77C7A70164
55E172DE0C8F251558E0D294D3852D68726720BC6447046EEF2AE810351B7FCD
69EE2BF54696702F510496B2536E30A5E1758B293E6B721A13DCA21512C4EA25
73FECF95E68FE5579E0720E18A2BB150D25BFB100A5B0E09C79F2AE5A178E37F
4FFE0300932030C47C025C731BE32DFF3E48051C4F3146917DF98C40DCB82C0D
850DD129C86166CD167E327C8D51E5EB5D7DAEC7FF50682A1A6951F120944F67
9A2F52F8E184590223348E5157AF92AD30C02EE0CC7F10BB2127F7C006E1403D
ABB84F0D3EBD9D0A3DA94D8013DB6CE3DF54B83FCBDA79D667614525D13AB2DB
1F0E6897E6F78FF6635F17CB0302CE7F4A0CF91F7087EE721F64CA0E33B51187
8F1E0C8F4D7FD4F3F0A28C8C1833DFD60525A78B2A4BD7C5BD4EF28BC186834F
549D3C3FF963013711AB72B76C72F095769EA0EE045EBE4A35E0BEDD1E25DF20
EB1EDF35AE4B44754C5A856537C06F75BAB024B682FADA1E3A01E313B7656F1C
924FFD9E94B76F6EB9D89B157A3F26BEA91933F9A7D897D7E9C788459B39B303
21C6ECAE276B63B1238AD31D9FE8EEE9CC9FB78DBF164F52F31EC79ECF16B4BB
1C99DFE0E400838F718712D374D9AED7F0A85A674677985162D53910DE1DA605
60F84973A847723B615C94B89C0F7806D9C84867CCA9F67943DF89183F2CBCDE
4FF10072016879C1CA4E377D77797A32DB18676BA82518660359A8B6BF01600E
4A11FDBAA2689E99E8FA8D8D130A86770FA787F267499DA09EB7239641CFED8C
A464FD3AAF160BD12FA07DF0B9E3900BD08EADBB9EBE4B144AC95721B36BCE33
C6F9A7F35D948232BE5AD2A733D5E4C5F0370307BC6CA5E7CE474F62D5EA99A9
CC556222445EAFC4E6F63A24B5A2CDB4EF4032DCA5CC6D1E11B6B92F18164803
E18FB6CB61F2E6250150868450EF0D08A776CFC7CF7E387414E4A017F9FAE43F
47C36E5544AC9D4DA4B00BF6DA3815B7068A272D1504F4BAE7BC5156FA919BEF
42166C1B312E8C20CB3F080B08A69416DA4A1D037D1AFB8A49609DCCF844AC7E
03278F56A07C342F90314D45238DD0FA9F678D4929D69D192707B1BA6A26EDA2
0F8D0E550C064FEA8E67ADFA6C1FE3316D2B9D7DC2146B6EA657FB1500B51C67
2DDD9181CFAC6D5546F35F31C03711927D4E8BCF6DC82DF9608B80D8E86E8DDF
C77027BC12E2F6B422FDF15DE326F58C22DBBB9B75A62045D74F177EA0EBC1EA
DF96CDA6EE4C5370376350558614E41854631F388B1327B6AF6AECFA67902D01
50E79378BCBEBA936014055D10434972C003AF6BF7798E936DC72CA2782B4185
78622E6A3313CB79B6746E856ED6C28107CC4EB3E5BBF668827AD1CE9ED39E72
42C84FA980A84FE4DCF28E8B1DF45EA09F013C318B8CF74A030F9E6AFB7A4FFE
64FEFEA17A453C13CA5EBC8A94C9651B5A2D30153EA76D8EB7052CD85796326B
AC7405B0AAB71A3E69CC8A4ABBFD5E39DC43512798EF655F7040B42836839048
A5B1E2FCB489F23C7E24E1FA69F604AB39F5C85519549C86332833AEC3917778
FA962235CD25472450500C209EF13B71D689153FDF05D10AF81C83B9097C0E22
1DE7525163B0C8F1EEBE89DB8C477A433531D31C357C8685EC6006B21CEF9E0C
EFA5B764BC54B705A29D1916CB1B945622CA7AEC1BB5CB7A4F7155380C5EEFE6
8862EBF5257EFC2C7E46083004AD4926E95797790138C9A57411AE00E9807F8B
247CB59185880576DC723054C1BEF461A3A01B68EA5D63298DBF47C427BD788C
52A06990AA787A9A653A4FD5D2A0C3F55CB4C49968187712149DCCA8566BAD22
E2556EDB99656B5196B1D8DDA6F9F3CDC435ECAE7B83429D1F3B63CE90451772
4FFFE506A592C7F16145376BEA19619D3312BB0C60369DDEA13E924029D009AC
B332479AFD7C37CAAB3BB3DC56A7F3329CB24C78324046FE4EA6C139D44BB8D5
5A3A637E055EFB1650934EBDF7B7B851C299E4E574F1223A21D684A6FCB8B3DF
5CB3118AC57AD3B8C41FF0830782C430DB4C73BF894005FB893CD6ADF3D13049
128B2CDB52D59791504AEB26264E700BBD5DCBF4FD45D843174687A898B2B598
BFFF18ED7AE5FA4C5D01B40755CFF80772C8726178B436C9E2FE5467FBCDF9E0
269E7CC485970ACD0A64C68031059B9746EEE13CD30B9B2615F7646FD92CA0D8
9929BB73507DDF4D9807D999B2A670
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158278 55380994 1000 8000 8000
(D:\Dissertation_Projekt_DH\experiments\Haftreibung_Kraftmessung\Dokumentation_Versuchsauswertung\te)
@start /Fa 144[553 615 1[307 1[338 307 3[492 39[861 10[553
50[{ enclmec ReEncodeFont }8 1106.96 /LMRoman10-Regular
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (Example with noise - Closed Line)/Subject
(Versuchsauswertung)/Creator (LaTeX with hyperref package)/Author (Thomas Koenig)/Keywords
() /DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 663 -5569
a
SDict begin H.S end
 663 -5569 a 663 -5569 a
SDict begin H.R end
 663 -5569 a 663 -5569 a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 663
-5569 a 0 TeXcolorgray Black 0 TeXcolorgray 774 -1318
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 774 -1318 a 774 -1318 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 774 -1318 a 774 -1318 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 774
-1318 a 774 -1318 a
SDict begin [/PageMode /UseOutlines/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 774 -1318 a 774 -1318 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 774 -1318
a 774 -1318 a
SDict begin H.S end
 774 -1318 a 774 -1318 a
SDict begin 13.6 H.A end
 774 -1318 a 774
-1318 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 774 -1318 a 6710 6778 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 183.34961 17.78412 0.0 17.78412
   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.75 SLW 0.5  setgray  1. .setopacityalpha   3.0 0 0 add  DotLine 
grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0 -12.500000000000000000 sub 250.00
0.07114 mul exch 0.18335 mul exch 0.0 17.78412    /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 1000 -12.500000000000000000 add 250.00
0.07114 mul exch 0.18335 mul exch 183.34961 17.78412    /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 183.34961 35.56824 0.0 35.56824
   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.75 SLW 0.5  setgray  1. .setopacityalpha   3.0 0 0 add  DotLine 
grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0 -12.500000000000000000 sub 500.00
0.07114 mul exch 0.18335 mul exch 0.0 35.56824    /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 1000 -12.500000000000000000 add 500.00
0.07114 mul exch 0.18335 mul exch 183.34961 35.56824    /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 183.34961 53.35236 0.0 53.35236
   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.75 SLW 0.5  setgray  1. .setopacityalpha   3.0 0 0 add  DotLine 
grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0 -12.500000000000000000 sub 750.00
0.07114 mul exch 0.18335 mul exch 0.0 53.35236    /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 1000 -12.500000000000000000 add 750.00
0.07114 mul exch 0.18335 mul exch 183.34961 53.35236    /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 183.34961 71.13647 0.0 71.13647
   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.75 SLW 0.5  setgray  1. .setopacityalpha   3.0 0 0 add  DotLine 
grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0 -12.500000000000000000 sub 1000.00
0.07114 mul exch 0.18335 mul exch 0.0 71.13647    /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 1000 -12.500000000000000000 add 1000.00
0.07114 mul exch 0.18335 mul exch 183.34961 71.13647    /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 183.34961 0.0 0.0 0.0    /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0.5  setgray
 1. .setopacityalpha   3.0 0 0 add  DotLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0 -12.500000000000000000 sub 0.00 0.07114
mul exch 0.18335 mul exch 0.0 0.0    /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 1000 -12.500000000000000000 add 0.00
0.07114 mul exch 0.18335 mul exch 183.34961 0.0    /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 2 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale 2 setlinecap 0 0 moveto 0 0.1 L stroke 0
0 moveto  EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray
 /ArrowA { BeginArrow 1.  1.  scale 2 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 2 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  [ 0.0 71.13647 0.0 0.0    /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 2 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale 2 setlinecap 0 0 moveto 0 0.1 L stroke 0
0 moveto  EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray
 /ArrowA { BeginArrow 1.  1.  scale 2 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 2 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  [ 183.34961 71.13647 183.34961 0.0   
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 21.83327 71.13647 21.83327
0.0    /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add
dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0.5  setgray  1. .setopacityalpha   3.0 0 0 add
 DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 119.08 0 -40.000000000000000000 sub
0.07114 mul exch 0.18335 mul exch 21.83327 0.0    /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 119.08 1000 -40.000000000000000000
add 0.07114 mul exch 0.18335 mul exch 21.83327 71.13647    /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 43.66653 71.13647 43.66653
0.0    /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add
dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0.5  setgray  1. .setopacityalpha   3.0 0 0 add
 DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 238.16 0 -40.000000000000000000 sub
0.07114 mul exch 0.18335 mul exch 43.66653 0.0    /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 238.16 1000 -40.000000000000000000
add 0.07114 mul exch 0.18335 mul exch 43.66653 71.13647    /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 65.4998 71.13647 65.4998 0.0
   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
0.75 SLW 0.5  setgray  1. .setopacityalpha   3.0 0 0 add  DotLine 
grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 357.24 0 -40.000000000000000000 sub
0.07114 mul exch 0.18335 mul exch 65.4998 0.0    /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 357.24 1000 -40.000000000000000000
add 0.07114 mul exch 0.18335 mul exch 65.4998 71.13647    /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 87.33308 71.13647 87.33308
0.0    /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add
dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0.5  setgray  1. .setopacityalpha   3.0 0 0 add
 DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 476.32 0 -40.000000000000000000 sub
0.07114 mul exch 0.18335 mul exch 87.33308 0.0    /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 476.32 1000 -40.000000000000000000
add 0.07114 mul exch 0.18335 mul exch 87.33308 71.13647    /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 109.16635 71.13647 109.16635
0.0    /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add
dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0.5  setgray  1. .setopacityalpha   3.0 0 0 add
 DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 595.40 0 -40.000000000000000000 sub
0.07114 mul exch 0.18335 mul exch 109.16635 0.0    /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 595.40 1000 -40.000000000000000000
add 0.07114 mul exch 0.18335 mul exch 109.16635 71.13647    /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 130.99962 71.13647 130.99962
0.0    /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add
dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0.5  setgray  1. .setopacityalpha   3.0 0 0 add
 DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 714.48 0 -40.000000000000000000 sub
0.07114 mul exch 0.18335 mul exch 130.99962 0.0    /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 714.48 1000 -40.000000000000000000
add 0.07114 mul exch 0.18335 mul exch 130.99962 71.13647    /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 152.83289 71.13647 152.83289
0.0    /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add
dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0.5  setgray  1. .setopacityalpha   3.0 0 0 add
 DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 833.56 0 -40.000000000000000000 sub
0.07114 mul exch 0.18335 mul exch 152.83289 0.0    /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 833.56 1000 -40.000000000000000000
add 0.07114 mul exch 0.18335 mul exch 152.83289 71.13647    /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 174.66617 71.13647 174.66617
0.0    /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add
dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0.5  setgray  1. .setopacityalpha   3.0 0 0 add
 DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 952.64 0 -40.000000000000000000 sub
0.07114 mul exch 0.18335 mul exch 174.66617 0.0    /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 952.64 1000 -40.000000000000000000
add 0.07114 mul exch 0.18335 mul exch 174.66617 71.13647    /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0.5  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 0.0 71.13647 0.0 0.0    /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0.5  setgray
 1. .setopacityalpha   3.0 0 0 add  DotLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.00 0 -40.000000000000000000 sub 0.07114
mul exch 0.18335 mul exch 0.0 0.0    /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.00 1000 -40.000000000000000000 add
0.07114 mul exch 0.18335 mul exch 0.0 71.13647    /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 2 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale 2 setlinecap 0 0 moveto 0 0.1 L stroke 0
0 moveto  EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray
 /ArrowA { BeginArrow 1.  1.  scale 2 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 2 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  [ 183.34961 0.0 0.0 0.0    /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 6710 6778 a
tx@Dict begin  gsave STV CP T /ps@rot 0 0 add def grestore  end
 6710 6778 a 6710
6778 a
tx@Dict begin { 1000.000000000000000000 0.5 mul 0 add 0 0.07114 mul
exch 0.18335 mul exch } PutCoor PutBegin  end
 6710 6778 a 6710 6778 a
tx@Dict begin ps@rot  RotBegin  end
 6710 6778 a 4420 10143
a Fa(linejoin=2)6710 6778 y
tx@Dict begin RotEnd  end
 6710 6778 a 6710 6778 a
tx@Dict begin  PutEnd  end
 6710
6778 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 2 setlinecap
0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB
{ BeginArrow 1.  1.  scale 2 setlinecap 0 0 moveto 0 0.1 L stroke 0
0 moveto  EndArrow  } def /ArrowInside { } def  0.8 SLW 0  setgray
 /ArrowA { BeginArrow 1.  1.  scale 2 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 2 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  [ 183.34961 71.13647 0.0 71.13647    /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  /D {} def mark  0.00 0.00 0.00 0.00 0.00
0.00 0.84 0.00 0.84 0.00 1.68 0.00 1.68 0.00 2.52 0.00 2.52 0.00 3.36
0.00 3.36 0.00 4.20 0.00 4.20 0.00 5.04 0.00 5.04 0.00 5.88 0.00 5.88
0.00 6.72 0.00 6.72 0.00 7.56 0.00 7.56 0.00 8.40 0.00 8.40 0.00 9.24
0.00 9.24 0.00 10.08 0.00 10.08 0.00 10.92 0.00 10.92 0.00 11.76 0.00
11.76 0.00 12.60 0.00 12.60 0.00 13.44 0.00 13.44 0.00 14.28 0.00 14.28
0.00 15.12 0.00 15.12 0.00 15.96 0.00 15.96 0.00 16.80 0.00 16.80 0.00
17.64 0.00 17.64 0.00 18.48 0.00 18.48 0.00 19.32 0.00 19.32 0.00 20.16
0.00 20.16 0.00 21.00 0.00 21.00 0.00 21.84 0.00 21.84 0.00 22.68 0.00
22.68 0.00 23.52 0.00 23.52 0.00 24.36 0.00 24.36 0.00 25.20 0.00 25.20
0.00 26.04 0.00 26.04 0.00 26.88 0.00 26.88 0.00 27.72 0.00 27.72 0.00
28.56 0.00 28.56 0.00 29.40 0.00 29.40 0.00 30.24 0.00 30.24 0.00 31.08
0.00 31.08 0.00 31.92 0.00 31.92 0.00 32.76 0.00 32.76 0.00 33.60 0.00
33.60 0.00 34.44 0.00 34.44 0.00 35.28 0.00 35.28 0.00 36.12 0.00 36.12
0.00 36.96 0.00 36.96 0.00 37.80 0.00 37.80 0.00 38.64 0.00 38.64 0.00
39.48 0.00 39.48 0.00 40.32 0.00 40.32 0.00 41.16 0.00 41.16 0.00 42.00
0.00 42.00 0.00 42.84 0.00 42.84 0.00 43.68 0.00 43.68 0.00 44.52 0.00
44.52 0.00 45.36 0.00 45.36 0.00 46.20 0.00 46.20 0.00 47.04 0.00 47.04
0.00 47.88 0.00 47.88 0.00 48.72 0.00 48.72 0.00 49.56 0.00 49.56 0.00
50.40 0.00 50.40 0.00 51.24 0.00 51.24 0.00 52.08 0.00 52.08 0.00 52.92
0.00 52.92 0.00 53.76 0.00 53.76 0.00 54.60 0.00 54.60 0.00 55.44 0.00
55.44 0.00 56.28 0.00 56.28 0.00 57.12 0.00 57.12 0.00 57.96 0.00 57.96
0.00 58.80 0.00 58.80 0.00 59.64 0.00 59.64 0.00 60.48 0.00 60.48 0.00
61.32 0.00 61.32 0.00 62.16 0.00 62.16 0.00 63.00 0.00 63.00 0.00 63.84
0.00 63.84 0.00 64.68 0.00 64.68 0.00 65.52 0.00 65.52 0.00 66.36 0.00
66.36 0.00 67.20 0.00 67.20 0.00 68.04 0.00 68.04 0.00 68.88 0.00 68.88
0.00 69.72 0.00 69.72 0.00 70.56 0.00 70.56 0.00 71.40 0.00 71.40 0.00
72.24 0.00 72.24 0.00 73.08 0.00 73.08 0.00 73.92 0.00 73.92 0.00 74.76
0.00 74.76 0.00 75.60 0.00 75.60 0.00 76.44 0.00 76.44 0.00 77.28 0.00
77.28 0.00 78.12 0.00 78.12 0.00 78.96 0.00 78.96 0.00 79.80 0.00 79.80
0.00 80.64 0.00 80.64 0.00 81.48 0.00 81.48 0.00 82.32 0.00 82.32 0.00
83.16 0.00 83.16 0.00 84.00 0.00 84.00 0.00 84.84 0.00 84.84 0.00 85.68
0.00 85.68 0.00 86.52 0.00 86.52 0.00 87.36 0.00 87.36 0.00 88.20 0.00
88.20 0.00 89.04 0.00 89.04 0.00 89.88 0.00 89.88 0.00 90.72 0.00 90.72
0.00 91.56 0.00 91.56 0.00 92.40 0.00 92.40 0.00 93.24 0.00 93.24 0.00
94.08 0.00 94.08 0.00 94.92 0.00 94.92 0.00 95.76 0.00 95.76 0.00 96.60
0.00 96.60 0.00 97.44 0.00 97.44 0.00 98.28 0.00 98.28 0.00 99.12 0.00
99.12 0.00 99.96 0.00 99.96 0.00 100.80 0.00 100.80 0.00 101.64 0.00
101.64 0.00 102.48 0.00 102.48 0.00 103.32 0.00 103.32 0.00 104.16
0.00 104.16 0.00 105.00 0.00 105.00 0.00 105.84 0.00 105.84 0.00 106.68
0.00 106.68 0.00 107.52 0.00 107.52 0.00 108.36 0.00 108.36 0.00 109.20
0.00 109.20 0.00 110.04 0.00 110.04 0.00 110.88 0.00 110.88 0.00 111.72
0.00 111.72 0.00 112.56 0.00 112.56 0.00 113.40 0.00 113.40 0.00 114.24
0.00 114.24 0.00 115.08 0.00 115.08 0.00 115.92 0.00 115.92 0.00 116.76
0.00 116.76 0.00 117.60 0.00 117.60 0.00 118.44 0.00 118.44 0.00 119.28
0.00 119.28 0.00 120.12 0.00 120.12 0.00 120.96 0.00 120.96 0.00 121.80
0.00 121.80 0.00 122.64 0.00 122.64 0.00 123.48 0.00 123.48 0.00 124.32
0.00 124.32 0.00 125.16 0.00 125.16 0.00 126.00 0.00 126.00 0.00 126.84
0.00 126.84 0.00 127.68 0.00 127.68 0.00 128.52 0.00 128.52 0.00 129.36
0.00 129.36 0.00 130.20 0.00 130.20 0.00 131.04 0.00 131.04 0.00 131.88
0.00 131.88 0.00 132.72 0.00 132.72 0.00 133.56 0.00 133.56 0.00 134.40
0.00 134.91 6.25 135.32 6.25 136.02 -6.21 136.25 -6.33 136.52 -5.00
137.00 -6.10 137.06 -4.71 138.03 -6.40 138.08 -4.78 138.71 -6.25 139.42
0.55 139.44 0.00 140.26 5.89 140.30 6.49 141.10 4.85 141.71 4.88 141.72
6.25 142.11 6.25 142.80 -5.59 143.10 -6.48 143.11 -5.00 143.68 -5.65
144.36 0.44 144.48 0.00 144.60 0.34 145.32 0.00 145.32 0.00 146.16
0.00 146.16 0.00 147.00 0.00 147.00 0.00 147.84 0.00 147.84 0.00 148.68
0.00 148.68 0.00 149.52 0.00 149.52 0.00 150.36 0.00 150.36 0.00 151.20
0.00 151.20 0.00 152.04 0.00 152.04 0.00 152.88 0.00 152.88 0.00 153.72
0.00 153.72 0.00 154.56 0.00 154.56 0.00 155.40 0.00 155.40 0.00 156.24
0.00 156.24 0.00 157.08 0.00 157.08 0.00 157.92 0.00 157.92 0.00 158.76
0.00 158.76 0.00 159.60 0.00 159.60 0.00 160.44 0.00 160.44 0.00 161.28
0.00 161.28 0.00 162.12 0.00 162.12 0.00 162.96 0.00 162.96 0.00 163.80
0.00 163.80 0.00 164.64 0.00 164.64 0.00 165.48 0.00 165.48 0.00 166.32
0.00 166.32 0.00 167.16 0.00 167.16 0.00 168.00 0.00 168.00 0.00 168.84
0.00 168.84 0.00 169.68 0.00 169.68 0.00 170.52 0.00 170.52 0.00 171.36
0.00 171.36 0.00 172.20 0.00 172.20 0.00 173.04 0.00 173.04 0.00 173.88
0.00 173.88 0.00 174.72 0.00 174.72 0.00 175.56 0.00 175.56 0.00 176.40
0.00 176.40 0.00 177.24 0.00 177.24 0.00 178.08 0.00 178.08 0.00 178.92
0.00 178.92 0.00 179.76 0.00 179.76 0.00 180.60 0.00 180.60 0.00 181.44
0.00 181.44 0.00 182.28 0.00 182.28 0.00 183.12 0.00 183.12 0.00 183.96
0.00 183.96 0.00 184.80 0.00 184.80 0.00 185.64 0.00 185.64 0.00 186.48
0.00 186.48 0.00 187.32 0.00 187.32 0.00 188.16 0.00 188.16 0.00 189.00
0.00 189.00 0.00 189.84 0.00 189.84 0.00 190.68 0.00 190.68 0.00 191.52
0.00 191.52 0.00 192.36 0.00 192.36 0.00 193.20 0.00 193.20 0.00 194.04
0.00 194.04 0.00 194.88 0.00 194.88 0.00 195.72 0.00 195.72 0.00 196.56
0.00 196.56 0.00 197.40 0.00 197.40 0.00 198.24 0.00 198.24 0.00 199.08
0.00 199.08 0.00 199.92 0.00 199.92 0.00 200.76 0.00 200.76 0.00 201.60
0.00 201.60 0.00 202.44 0.00 202.44 0.00 203.28 0.00 203.28 0.00 204.12
0.00 204.12 0.00 204.96 0.00 204.96 0.00 205.80 0.00 205.80 0.00 206.64
0.00 206.64 0.00 207.48 0.00 207.48 0.00 208.32 0.00 208.32 0.00 209.16
0.00 209.16 0.00 210.00 0.00 210.00 0.00 210.84 0.00 210.84 0.00 211.68
0.00 211.68 0.00 212.52 0.00 212.52 0.00 213.36 0.00 213.36 0.00 214.20
0.00 214.20 0.00 215.04 0.00 215.04 0.00 215.88 0.00 215.88 0.00 216.72
0.00 216.72 0.00 217.56 0.00 217.56 0.00 218.40 0.00 218.40 0.00 219.24
0.00 219.24 0.00 220.08 0.00 220.08 0.00 220.92 0.00 220.92 0.00 221.76
0.00 221.76 0.00 222.60 0.00 222.60 0.00 223.44 0.00 223.44 0.00 224.28
0.00 224.28 0.00 225.12 0.00 225.12 0.00 225.96 0.00 225.96 0.00 226.80
0.00 226.80 0.00 227.64 0.00 227.64 0.00 228.48 0.00 228.48 0.00 229.32
0.00 229.32 0.00 230.16 0.00 230.16 0.00 231.00 0.00 231.00 0.00 231.84
0.00 231.84 0.00 232.68 0.00 232.68 0.00 233.52 0.00 233.52 0.00 234.36
0.00 234.36 0.00 235.20 0.00 235.20 0.00 236.04 0.00 236.04 0.00 236.88
0.00 236.88 0.00 237.72 0.00 237.72 0.00 238.56 0.00 238.56 0.00 239.40
0.00 239.40 0.00 240.24 0.00 240.24 0.00 241.08 0.00 241.08 0.00 241.92
0.00 241.92 0.00 242.76 0.00 242.76 0.00 243.60 0.00 243.60 0.00 244.44
0.00 244.44 0.00 245.28 0.00 245.28 0.00 246.12 0.00 246.12 0.00 246.96
0.00 246.96 0.00 247.80 0.00 247.80 0.00 248.64 0.00 248.64 0.00 249.48
0.00 249.48 0.00 250.32 0.00 250.32 0.00 251.16 0.00 251.16 0.00 252.00
0.00 252.00 0.00 252.84 0.00 252.84 0.00 253.68 0.00 253.68 0.00 254.52
0.00 254.52 0.00 255.36 0.00 255.36 0.00 256.20 0.00 256.20 0.00 257.04
0.00 257.04 0.00 257.88 0.00 257.88 0.00 258.72 0.00 258.72 0.00 259.56
0.00 259.56 0.00 260.40 0.00 260.40 0.00 261.24 0.00 261.24 0.00 262.08
0.00 262.08 0.00 262.92 0.00 262.92 0.00 263.76 0.00 263.76 0.00 264.60
0.00 264.60 0.00 265.44 0.00 265.44 0.00 266.28 0.00 266.28 0.00 267.12
0.00 267.12 0.00 267.96 0.00 267.96 0.00 268.80 0.00 268.80 0.00 269.64
0.00 269.64 0.00 270.48 0.00 270.48 0.00 271.32 0.00 271.32 0.00 272.16
0.00 272.16 0.00 273.00 0.00 273.00 0.00 273.84 0.00 273.84 0.00 274.68
0.00 274.68 0.00 275.52 0.00 275.52 0.00 276.36 0.00 276.36 0.00 277.20
0.00 277.20 0.00 278.04 0.00 278.04 0.00 278.88 0.00 278.88 0.00 279.72
0.00 279.72 0.00 280.56 0.00 280.56 0.00 281.40 0.00 281.40 0.00 282.24
0.00 282.24 0.00 283.08 0.00 283.08 0.00 283.92 0.00 283.92 0.00 284.76
0.00 284.76 0.00 285.60 0.00 285.60 0.00 286.44 0.00 286.44 0.00 287.28
0.00 287.28 0.00 288.12 0.00 288.12 0.00 288.96 0.00 288.96 0.00 289.80
0.00 289.80 0.00 290.64 0.00 290.64 0.00 291.48 0.00 291.48 0.00 292.32
0.00 292.32 0.00 293.16 0.00 293.16 0.00 294.00 0.00 294.00 0.00 294.84
0.00 294.84 0.00 295.68 0.00 295.68 0.00 296.52 0.00 296.52 0.00 297.36
0.00 297.36 0.00 298.20 0.00 298.20 0.00 299.04 0.00 299.04 0.00 299.88
0.00 299.88 0.00 300.72 0.00 300.72 0.00 301.56 0.00 301.56 0.00 302.40
0.00 302.40 0.00 303.24 0.00 303.24 0.00 304.08 0.00 304.08 0.00 304.92
0.00 304.92 0.00 305.76 0.00 305.76 0.00 306.60 0.00 306.60 0.00 307.44
0.00 307.44 0.00 308.28 0.00 308.28 0.00 309.12 0.00 309.12 0.00 309.96
0.00 309.96 0.00 310.80 0.00 310.80 0.00 311.64 0.00 311.64 0.00 312.48
0.00 312.48 0.00 313.32 0.00 313.32 0.00 314.16 0.00 314.16 0.00 315.00
0.00 315.00 0.00 315.84 0.00 315.84 0.00 316.68 0.00 316.68 0.00 317.52
0.00 317.52 0.00 318.36 0.00 318.36 0.00 319.20 0.00 319.20 0.00 320.04
0.00 320.04 0.00 320.88 0.00 320.88 0.00 321.72 0.00 321.72 0.00 322.56
0.00 322.56 0.00 323.40 0.00 323.40 0.00 324.24 0.00 324.24 0.00 325.08
0.00 325.08 0.00 325.92 0.00 325.92 0.00 326.76 0.00 326.76 0.00 327.60
0.00 327.60 0.00 328.44 0.00 328.44 0.00 329.28 0.00 329.28 0.00 330.12
0.00 330.12 0.00 330.96 0.00 330.96 0.00 331.80 0.00 331.80 0.00 332.64
0.00 332.64 0.00 333.48 0.00 333.48 0.00 334.32 0.00 334.32 0.00 335.16
0.00 335.16 0.00 336.00 0.00 336.00 0.00 336.84 0.00 336.84 0.00 337.68
0.00 337.68 0.00 338.52 0.00 338.52 0.00 339.36 0.00 339.36 0.00 340.20
0.00 340.20 0.00 341.04 0.00 341.04 0.00 341.88 0.00 341.88 0.00 342.72
0.00 342.72 0.00 343.56 0.00 343.56 0.00 344.40 0.00 344.40 0.00 345.24
0.00 345.24 0.00 346.08 0.00 346.08 0.00 346.92 0.00 346.92 0.00 347.76
0.00 347.76 0.00 348.60 0.00 348.60 0.00 349.44 0.00 349.44 0.00 350.28
0.00 350.28 0.00 351.12 0.00 351.12 0.00 351.96 0.00 351.96 0.00 352.80
0.00 352.80 0.00 353.64 0.00 353.64 0.00 354.48 0.00 354.48 0.00 355.32
0.00 355.32 0.00 356.16 0.00 356.16 0.00 357.00 0.00 357.00 0.00 357.84
0.00 357.84 0.00 358.68 0.00 358.68 0.00 359.52 0.00 359.52 0.00 360.36
0.00 360.36 0.00 361.20 0.00 361.20 0.00 362.04 0.00 362.04 0.00 362.88
0.00 362.88 0.00 363.72 0.00 363.72 0.00 364.56 0.00 364.56 0.00 365.40
0.00 365.40 0.00 366.24 0.00 366.24 0.00 367.08 0.00 367.08 0.00 367.92
0.00 367.92 0.00 368.76 0.00 368.76 0.00 369.60 0.00 369.60 0.00 370.44
0.00 370.44 0.00 371.28 0.00 371.28 0.00 372.12 0.00 372.12 0.00 372.96
0.00 372.96 0.00 373.80 0.00 373.80 0.00 374.64 0.00 374.64 0.00 375.48
0.00 375.48 0.00 376.32 0.00 376.32 0.00 377.16 0.00 377.16 0.00 378.00
0.00 378.00 0.00 378.84 0.00 378.84 0.00 379.68 0.00 379.68 0.00 380.52
0.00 380.52 0.00 381.36 0.00 381.36 0.00 382.20 0.00 382.20 0.00 383.04
0.00 383.04 0.00 383.88 0.00 383.88 0.00 384.72 0.00 384.72 0.00 385.56
0.00 385.56 0.00 386.40 0.00 386.40 0.00 387.24 0.00 387.24 0.00 388.08
0.00 388.08 0.00 388.92 0.00 388.92 0.00 389.76 0.00 389.76 0.00 390.60
0.00 390.60 0.00 391.44 0.00 391.44 0.00 392.28 0.00 392.28 0.00 393.12
0.00 393.12 0.00 393.96 0.00 393.96 0.00 394.80 0.00 394.80 0.00 395.64
0.00 396.36 6.46 396.50 6.25 397.10 5.00 397.42 6.25 397.46 5.28 398.65
6.25 398.90 4.68 399.25 6.25 399.39 4.71 399.90 6.25 400.46 4.70 401.10
4.77 401.31 6.25 401.70 6.25 402.34 4.87 402.39 4.70 402.91 6.25 403.36
4.76 403.38 6.25 404.37 4.65 404.48 6.25 405.42 4.89 405.47 6.25 406.38
6.25 406.47 4.67 407.20 5.62 407.37 4.56 407.47 4.55 408.11 6.25 408.38
4.86 408.48 6.25 409.36 4.91 409.44 6.25 410.37 4.70 410.70 6.25 411.39
6.19 411.44 4.72 411.70 4.81 411.71 6.25 412.50 4.68 412.70 6.25 413.40
4.85 413.91 6.25 414.41 4.89 414.48 6.25 415.05 6.25 415.70 4.86 416.38
6.12 416.47 4.67 417.37 4.84 417.43 6.40 417.49 6.25 418.10 4.77 418.70
4.77 418.72 6.25 419.31 6.25 419.38 4.77 420.10 6.25 420.55 4.74 421.38
6.72 421.46 4.68 422.45 6.17 422.50 4.78 422.91 6.25 423.18 5.39 423.50
4.59 424.10 6.10 424.41 5.98 424.46 4.70 425.41 6.42 425.51 5.33 425.90
5.00 426.44 6.35 427.40 4.86 427.44 6.36 428.28 5.62 428.40 4.89 428.70
4.78 429.04 5.62 429.40 4.74 429.42 6.25 430.30 5.00 430.47 6.25 431.15
4.76 431.75 6.25 432.31 6.25 432.51 4.77 432.90 5.00 433.04 5.62 433.50
6.13 433.51 4.70 434.44 4.81 434.51 6.25 435.42 6.54 435.50 4.87 436.10
6.25 436.44 4.67 437.30 6.25 437.45 4.68 438.42 5.19 438.46 6.63 438.48
4.84 438.52 6.25 439.52 6.12 439.70 4.79 440.49 6.15 440.51 4.69 441.40
4.89 441.48 6.25 442.11 5.00 442.43 6.52 442.75 4.70 443.10 6.25 443.82
5.62 444.30 4.70 444.50 4.69 444.71 6.25 445.44 5.00 445.52 6.57 446.15
6.25 446.52 4.70 447.43 4.67 447.48 6.52 448.43 4.68 448.51 6.42 448.91
6.25 449.11 4.66 449.49 5.20 449.55 6.25 450.56 5.00 450.71 6.25 451.65
5.00 451.71 6.25 452.45 4.68 452.53 5.81 453.44 4.72 453.52 6.51 454.10
5.00 454.35 6.25 454.46 6.25 454.53 4.89 455.30 6.25 455.43 4.79 456.43
4.71 456.55 6.11 457.44 4.91 457.54 6.70 457.85 6.25 458.49 4.67 458.71
6.25 459.44 4.87 459.48 6.15 459.50 4.68 460.46 6.10 460.51 4.84 461.49
4.70 461.52 6.25 462.45 6.41 462.49 4.88 462.91 6.25 463.43 4.71 463.92
6.25 464.48 4.78 464.52 4.90 465.11 6.25 465.44 6.18 465.57 5.00 466.53
4.69 466.90 6.12 467.15 6.25 467.57 4.75 468.11 5.00 468.47 6.25 469.31
6.25 469.55 4.76 469.57 4.66 469.70 5.61 470.47 4.68 470.55 5.88 471.40
6.25 471.46 4.67 472.47 4.67 472.55 6.25 473.10 4.88 473.20 6.16 474.31
6.25 474.53 4.84 475.10 6.12 475.11 5.00 475.48 4.68 475.70 6.17 476.31
5.00 476.60 6.25 477.20 6.25 477.57 4.77 478.11 6.25 478.75 4.77 479.58
4.88 479.60 6.25 479.71 6.25 480.10 4.87 480.63 4.74 481.10 6.09 481.49
6.25 481.58 4.87 482.48 4.89 482.57 6.07 483.33 5.37 483.50 6.53 483.95
4.87 484.54 6.82 484.90 5.00 485.49 6.13 485.58 4.70 486.30 6.25 486.58
4.89 486.95 6.25 487.55 6.25 487.58 5.00 488.53 6.74 488.59 4.71 489.15
6.25 489.52 4.89 490.00 5.00 490.56 6.25 490.56 6.25 490.58 5.34 491.54
4.65 491.74 5.60 492.50 6.12 492.52 4.67 493.53 4.67 493.71 6.25 494.31
6.25 494.51 4.67 495.51 6.15 495.55 4.68 495.70 4.90 496.11 6.25 496.71
6.25 496.75 4.70 497.61 6.25 498.10 4.71 498.48 4.69 498.61 6.25 499.10
6.25 499.45 4.68 500.52 6.38 500.61 4.75 500.70 4.78 500.71 6.25 501.51
6.42 501.58 4.76 502.55 6.05 502.80 4.65 503.54 4.84 503.55 6.25 504.10
6.25 504.62 5.35 505.54 5.92 505.57 4.68 505.71 5.00 506.52 6.60 506.52
6.60 507.31 4.77 507.55 6.25 507.70 4.78 508.60 4.70 508.63 6.25 509.56
4.69 509.62 6.25 510.52 6.43 510.63 4.69 511.31 6.25 511.53 5.25 511.56
6.08 511.61 4.69 512.52 6.62 512.56 4.77 513.35 6.25 513.53 5.27 514.51
5.32 514.55 6.25 515.52 4.67 515.59 5.84 516.11 6.25 516.58 5.28 516.71
6.25 517.30 4.90 517.55 4.71 517.64 6.25 518.30 5.00 518.58 6.25 519.56
6.25 519.59 4.71 520.57 4.68 520.60 6.25 521.30 4.87 521.64 6.49 521.64
6.49 521.90 4.79 522.56 6.25 522.61 4.69 523.55 6.25 523.59 4.72 524.51
6.25 524.64 5.00 525.25 6.25 525.57 4.72 525.91 6.25 526.10 4.67 526.75
5.00 527.10 6.25 527.57 4.72 527.71 6.25 528.55 6.25 528.63 4.70 529.54
6.16 529.88 5.40 530.12 5.00 530.55 6.50 531.05 6.25 531.30 4.88 531.91
6.25 532.50 4.76 532.63 6.14 533.30 4.67 533.60 4.70 533.70 6.25 534.31
5.00 534.70 6.25 535.51 6.25 535.64 4.73 536.57 4.66 536.66 6.41 537.30
4.88 537.58 6.41 537.65 4.74 537.71 6.25 538.50 4.91 538.66 6.13 539.51
6.25 539.61 4.71 540.50 4.88 540.68 6.25 541.55 4.71 541.61 6.52 542.10
6.25 542.57 5.00 542.80 4.78 543.05 6.25 543.57 4.65 544.00 6.25 544.55
6.25 544.67 4.69 545.61 4.86 545.67 6.25 546.65 4.66 546.76 5.60 547.25
4.66 547.58 6.07 548.25 4.68 548.30 5.60 548.66 4.68 548.68 6.25 549.65
6.25 549.70 4.79 550.34 5.62 550.58 4.76 551.67 4.66 551.68 6.25 552.11
6.25 552.43 5.38 553.11 6.25 553.53 0.00 553.56 0.44 553.59 -1.15 554.40
0.00 554.42 0.03 555.24 0.00 555.24 0.00 556.08 0.00 556.92 5.05 557.60
6.12 557.65 4.79 557.90 6.25 558.10 4.89 558.69 6.18 558.71 5.00 559.63
6.25 559.66 5.00 560.30 6.25 560.59 4.74 561.51 6.25 561.70 4.73 562.60
4.75 562.63 6.06 563.00 5.36 563.60 5.85 563.75 5.00 564.35 6.19 564.50
6.25 564.76 4.71 565.51 6.25 565.63 5.00 566.61 6.78 566.66 5.00 567.10
4.88 567.66 6.25 567.95 6.25 568.30 4.88 569.10 4.77 569.51 6.25 569.60
6.13 570.35 4.85 570.63 6.25 570.71 5.00 571.30 4.64 571.31 6.25 572.30
4.66 572.62 6.06 572.90 5.00 573.60 6.13 573.78 5.36 574.11 6.25 574.66
4.76 574.72 6.25 575.51 6.25 575.66 4.71 576.30 4.77 576.80 6.25 577.31
5.00 577.72 6.25 578.50 4.91 578.72 6.55 578.90 6.25 579.50 5.00 579.72
5.16 579.73 6.25 580.62 6.72 581.10 4.71 581.67 4.77 581.68 6.25 582.61
6.17 582.71 4.84 583.63 6.15 583.66 4.75 583.81 5.61 583.90 4.85 584.67
4.67 584.90 6.25 585.50 6.25 585.95 4.68 586.63 4.69 587.15 6.25 587.30
4.67 587.68 6.39 588.60 6.25 588.73 4.78 588.90 6.15 589.50 4.76 589.74
6.25 590.30 5.00 590.73 4.55 591.25 6.25 591.50 6.25 591.69 4.68 592.31
6.25 592.64 5.18 593.20 6.25 593.64 4.79 594.05 6.25 594.64 4.74 595.25
4.67 595.31 6.12 595.72 4.76 596.30 11.90 597.10 10.69 597.20 12.00
597.69 12.00 597.73 10.69 598.15 10.00 598.50 11.97 599.31 10.00 599.69
11.91 600.10 10.84 600.13 12.22 600.83 10.31 600.86 11.72 601.74 10.56
601.80 11.25 602.78 11.98 602.94 10.00 603.72 12.08 603.94 10.00 604.54
10.00 604.70 11.96 605.14 11.25 605.24 10.83 605.69 11.92 605.80 10.00
606.70 11.72 607.03 10.00 607.54 10.00 608.14 11.25 608.23 12.15 608.72
10.00 609.53 12.09 609.78 10.86 610.13 10.63 610.33 11.96 610.76 12.05
610.80 10.00 611.79 12.22 611.84 10.00 612.71 10.53 612.80 11.93 613.71
12.10 613.80 10.68 614.13 12.27 614.75 10.43 615.14 11.25 615.33 10.76
616.33 12.19 616.43 10.00 616.80 11.95 617.43 10.56 617.45 10.54 618.24
24.13 618.28 23.96 619.01 27.62 619.51 27.31 619.76 27.81 620.56 27.81
620.78 26.25 620.80 26.25 620.85 27.80 621.74 27.78 622.00 27.32 622.74
26.36 623.08 28.75 623.32 27.79 623.71 26.31 624.18 27.34 624.98 27.82
625.18 27.83 625.45 27.35 625.95 27.74 626.28 27.30 626.75 26.34 627.34
27.82 627.54 28.75 627.72 26.38 628.88 26.25 629.05 27.78 629.78 28.84
629.93 27.32 630.55 27.75 630.68 27.27 631.13 26.27 631.51 27.80 631.94
28.75 632.54 26.25 632.89 27.29 633.33 28.88 633.76 26.45 633.94 27.85
634.76 26.33 634.85 27.74 635.68 27.82 635.84 26.35 636.08 27.84 636.46
27.34 637.04 27.74 637.19 27.32 637.70 27.34 638.31 27.84 638.50 27.78
638.65 27.33 639.45 27.79 639.83 26.34 640.22 27.39 640.68 27.83 641.45
27.31 641.66 27.80 642.08 27.80 642.18 27.32 642.76 27.93 642.86 26.25
643.75 27.32 644.24 27.77 644.38 27.30 644.74 27.83 645.80 28.80 645.84
26.47 646.13 26.47 646.76 27.79 647.26 27.83 647.28 27.37 647.98 26.25
648.34 28.75 648.93 28.91 649.28 27.35 649.55 27.83 649.56 27.32 650.31
27.31 650.81 28.91 651.19 27.36 651.86 44.65 651.88 44.80 652.48 61.92
652.81 59.86 653.44 61.53 653.93 59.26 654.33 62.50 654.46 61.81 654.48
59.63 655.36 61.30 655.91 59.75 656.48 61.37 656.85 59.79 657.16 59.74
657.18 61.45 658.29 59.43 658.30 61.82 658.78 59.69 659.23 61.36 659.78
61.67 659.86 59.89 660.54 61.62 660.86 59.75 661.48 61.36 661.83 59.61
662.53 61.57 662.76 59.69 662.86 61.27 662.88 60.00 663.78 61.25 663.84
60.00 664.75 59.88 665.21 61.25 665.54 59.97 665.56 61.61 666.83 59.81
666.87 61.69 667.13 60.00 667.77 61.29 668.09 59.87 668.10 61.34 668.68
61.33 669.08 59.67 669.58 61.33 669.73 59.99 670.73 61.18 670.78 59.91
671.58 59.43 671.59 61.83 672.46 59.94 672.85 71.25 672.88 70.88 673.71
84.94 673.72 84.94 674.18 95.00 674.79 94.60 674.82 93.24 675.91 93.98
675.94 92.57 676.53 94.05 676.80 92.50 677.53 93.30 677.80 94.08 677.94
92.50 678.41 94.15 678.80 93.38 679.08 94.05 679.73 94.08 679.85 93.29
680.74 92.50 681.03 94.03 681.43 92.50 681.93 94.54 682.30 94.01 682.53
93.24 682.96 94.06 683.24 93.38 683.86 92.50 684.26 94.02 684.70 94.01
685.15 93.35 685.81 93.07 685.85 94.39 686.68 93.99 687.05 93.35 687.85
94.65 687.91 92.49 688.33 93.08 688.58 94.08 688.90 92.40 689.21 94.09
689.88 94.12 690.29 93.30 690.79 95.00 690.90 93.23 691.74 93.95 692.19
79.83 692.20 79.83 693.03 42.57 693.04 42.57 693.87 5.81 693.88 5.81
694.19 -0.79 694.72 0.00 695.55 -5.67 695.73 -6.41 695.88 -4.74 696.83
-6.32 697.13 -4.63 697.83 -6.61 697.86 -4.90 698.74 -6.25 698.91 -4.63
698.92 -4.63 699.74 -6.25 700.34 -6.25 700.58 -4.63 700.92 -6.70 700.96
-5.30 701.48 -5.00 701.88 -6.25 702.43 -6.25 702.92 -4.87 703.55 -5.33
703.81 -6.13 704.03 -6.25 704.54 -5.00 704.84 -6.11 704.84 -4.83 705.86
-4.82 706.14 -6.25 706.73 -4.88 706.83 -6.10 707.34 -6.25 707.94 -5.00
708.88 -4.85 708.93 -6.16 709.14 -6.25 709.73 -4.62 709.95 -4.82 710.33
-6.10 710.68 -6.25 710.94 -4.43 711.85 -4.76 711.92 -6.03 712.88 -4.64
712.93 -6.18 713.48 -5.64 713.83 -4.62 714.53 -6.25 714.85 -4.76 714.90
-6.25 715.53 -4.89 715.88 -4.85 715.92 -6.08 716.83 -4.58 716.95 -6.25
717.86 -6.11 717.91 -4.63 718.54 -6.25 718.90 -4.60 719.54 -6.25 719.86
-5.00 719.92 -6.25 720.38 -4.60 720.96 -4.89 721.34 -6.25 721.86 -6.27
721.95 -5.25 722.73 -6.25 722.91 -4.87 723.74 -6.25 723.91 -4.87 724.86
-4.66 724.90 -6.12 725.54 -4.62 725.54 -6.25 725.88 -4.90 726.13 -6.25
726.86 -6.61 726.90 -4.62 727.86 -6.15 727.87 -4.66 728.68 -6.25 728.87
-4.84 729.53 -4.60 729.88 -5.98 730.13 -5.00 730.48 -6.25 730.88 -6.15
730.92 -4.63 731.74 -6.25 731.94 -4.61 732.53 -6.25 733.03 -5.00 733.53
-4.86 733.94 -6.62 734.88 -6.25 734.93 -4.66 735.20 -5.32 735.63 -11.37
736.28 -11.89 736.53 -10.70 736.88 -12.21 736.99 -10.00 737.94 -10.74
737.94 -11.79 738.90 -10.00 739.00 -11.25 739.94 -12.13 739.99 -10.00
740.34 -11.25 740.88 -10.53 740.92 -10.70 741.53 -12.29 741.89 -10.00
742.14 -11.25 742.74 -10.00 742.98 -11.25 743.91 -10.00 743.97 -11.85
744.54 -11.25 744.96 -10.57 745.48 -10.00 745.73 -11.92 745.98 -11.93
746.74 -10.81 746.94 -10.39 746.98 -12.15 747.88 -10.68 747.94 -11.53
748.94 -12.24 749.14 -10.00 749.74 -10.00 750.00 -11.61 750.34 -10.00
750.95 -11.25 751.00 -10.73 751.54 -11.25 751.88 -11.85 752.01 -10.00
752.74 -11.25 752.91 -10.00 753.91 -12.04 754.01 -10.00 755.01 -12.17
755.13 -10.58 755.20 -11.06 756.02 -33.57 756.04 -32.56 756.50 -44.73
756.96 -44.85 757.33 -43.10 757.72 -44.11 758.28 -32.30 759.03 -33.55
759.14 -32.36 759.90 -33.60 759.98 -32.08 760.94 -33.76 761.01 -32.30
761.34 -33.75 761.69 -32.84 762.54 -32.43 762.73 -33.83 762.96 -32.32
763.01 -33.82 763.73 -32.39 764.34 -33.75 764.93 -32.18 764.97 -33.75
765.53 -32.16 765.54 -33.75 766.13 -33.75 766.73 -32.20 767.13 -33.75
767.73 -32.07 768.03 -33.89 768.14 -32.79 768.96 -32.75 769.03 -33.75
769.54 -32.50 769.92 -33.83 770.94 -32.20 771.02 -33.56 771.33 -32.36
771.99 -41.61 772.00 -41.61 772.78 -55.71 772.94 -54.49 772.96 -55.61
774.00 -56.25 774.13 -54.31 775.08 -54.86 775.14 -55.49 775.38 -55.17
775.94 -53.97 776.31 -55.30 776.81 -54.97 777.19 -54.94 777.74 -56.25
778.34 -56.25 778.49 -54.98 779.44 -54.90 779.51 -55.26 779.73 -55.40
779.95 -54.19 780.62 -54.85 780.73 -56.25 781.50 -54.83 781.95 -55.48
782.15 -54.93 782.73 -55.38 782.95 -54.35 783.01 -56.25 783.94 -55.52
783.97 -54.05 784.95 -54.08 785.00 -55.62 785.98 -56.25 786.00 -54.84
786.35 -54.95 786.63 -55.24 787.16 -55.35 787.89 -53.85 788.00 -53.75
788.79 -74.77 788.80 -74.77 788.93 -77.91 789.96 -78.18 790.13 -76.25
790.57 -78.01 791.00 -76.25 791.73 -76.25 791.95 -77.74 792.53 -77.83
792.88 -76.25 793.06 -78.25 793.33 -76.25 794.43 -76.59 794.53 -78.78
795.06 -76.54 795.13 -77.88 795.68 -77.50 796.07 -76.25 796.96 -78.28
797.13 -76.25 797.48 -76.77 797.73 -78.14 798.13 -77.78 798.83 -76.80
798.94 -76.62 799.33 -78.48 799.81 -76.82 800.07 -78.46 800.94 -76.25
801.07 -77.89 801.73 -78.11 802.18 -76.65 802.98 -76.25 803.04 -78.19
803.28 -75.93 803.81 -88.89 804.07 -89.13 804.25 -87.78 805.02 -88.99
805.43 -87.42 805.81 -87.22 806.01 -89.14 806.93 -88.75 806.97 -87.15
807.33 -89.11 807.58 -87.50 808.13 -88.75 808.74 -87.50 809.06 -87.17
809.23 -88.81 810.08 -89.10 810.53 -87.36 810.93 -87.32 811.10 -88.75
811.54 -87.50 811.93 -89.08 812.53 -88.71 813.00 -87.37 813.16 -87.81
813.99 -89.04 814.09 -88.75 814.53 -87.14 815.00 -87.88 815.09 -88.93
816.04 -87.18 816.08 -88.96 816.53 -87.38 816.94 -88.75 818.00 -89.48
818.04 -87.41 818.73 -87.50 819.00 -88.92 819.04 -86.99 819.14 -88.75
820.01 -87.21 820.06 -88.87 820.88 -88.75 821.55 -69.69 821.56 -69.69
822.39 -32.56 822.40 -32.56 823.22 0.25 823.24 0.00 824.05 5.54 824.25
6.04 824.73 4.71 825.01 6.48 825.13 4.85 826.01 4.83 826.41 5.63 826.93
6.25 827.07 4.61 827.54 5.00 827.73 6.25 828.54 6.25 829.06 4.65 829.13
4.82 829.73 6.11 830.33 4.69 830.54 6.25 830.93 6.25 831.02 4.85 832.10
6.75 832.13 5.00 832.73 4.67 833.01 6.44 834.08 6.25 834.11 4.83 834.53
4.84 834.88 6.13 835.11 4.83 835.14 6.25 836.03 5.14 836.33 6.25 836.94
6.25 837.10 4.63 837.54 6.25 838.02 4.81 838.78 4.66 839.11 6.17 839.73
4.80 840.03 6.23 840.10 4.87 840.14 6.25 841.13 4.71 841.53 6.25 841.78
6.25 842.33 4.85 843.02 6.12 843.09 4.70 843.73 6.25 844.14 4.79 844.34
6.25 845.03 4.81 845.08 6.25 845.09 4.67 846.38 6.25 846.73 4.63 847.08
4.80 847.10 6.25 847.94 6.25 848.04 4.65 848.53 6.09 848.54 5.00 849.53
4.76 850.09 6.04 850.15 6.25 850.73 4.82 851.14 6.56 851.15 5.00 851.93
5.00 852.05 6.34 853.10 5.00 853.34 6.25 854.04 6.14 854.05 4.71 854.94
5.00 855.05 6.41 855.16 6.25 855.35 5.25 856.54 6.25 856.78 4.84 857.03
4.83 857.66 9.35 857.68 9.35 858.05 12.29 858.94 11.27 859.26 10.72
859.73 10.00 860.07 11.87 860.28 11.19 860.50 10.80 861.09 12.17 861.10
10.72 861.98 11.25 862.16 10.46 863.10 10.62 863.16 12.09 864.08 10.58
864.15 12.18 864.73 11.82 865.06 10.72 865.34 11.25 865.93 10.66 866.15
12.09 866.54 10.00 867.15 11.64 867.53 10.69 867.93 12.18 868.13 10.53
869.14 10.66 869.19 11.89 869.53 10.00 870.13 12.09 870.54 11.25 871.08
10.67 871.13 10.44 871.45 11.18 872.08 10.69 872.33 12.29 872.93 11.25
873.53 10.66 873.88 10.15 874.47 23.81 874.48 23.81 874.78 33.75 875.38
32.38 875.73 33.75 876.24 32.78 876.33 33.75 877.09 33.80 877.19 32.50
878.08 33.51 878.09 32.10 878.75 32.88 879.20 33.71 879.73 33.59 880.10
32.11 880.94 33.75 881.14 32.51 881.20 33.75 881.53 32.21 882.73 33.83
882.74 32.50 883.09 32.49 883.11 33.75 883.93 32.15 884.13 33.66 885.10
33.75 885.14 32.44 885.93 32.39 886.14 33.78 886.59 33.32 886.73 32.49
887.09 33.66 887.10 32.17 888.10 32.26 888.21 33.75 889.15 32.34 889.19
33.61 889.73 32.23 890.15 33.60 891.19 32.31 891.21 33.75 891.36 32.85
892.10 33.79 892.12 33.75 892.18 32.21 893.11 32.11 893.38 33.75 894.19
34.16 894.58 31.25 894.64 31.88 895.47 45.74 895.48 45.74 895.88 56.25
896.42 55.34 897.13 53.67 897.44 55.27 897.73 54.19 898.03 54.85 898.76
55.32 898.96 54.89 899.21 56.25 899.85 55.31 900.05 54.89 900.98 55.33
901.13 54.91 902.12 54.08 902.16 55.46 902.22 53.89 903.01 55.26 903.22
55.51 903.23 54.92 904.03 55.39 904.15 54.35 904.78 54.87 905.20 56.25
906.16 53.92 906.22 55.46 907.02 54.93 907.21 55.34 907.49 55.32 907.66
54.99 908.23 54.28 908.45 55.35 909.18 54.90 909.66 55.34 909.83 54.94
910.53 55.36 910.62 55.36 911.27 54.83 911.63 55.38 911.98 54.93 912.53
53.93 912.78 55.28 913.19 56.25 913.41 54.90 914.31 52.81 914.78 66.25
914.80 65.95 915.46 77.65 915.93 77.90 916.23 76.47 916.54 76.25 917.20
78.09 917.43 77.50 917.54 76.71 918.33 77.86 918.59 76.82 919.18 76.60
919.25 77.50 920.18 76.14 920.24 77.50 921.14 77.95 921.33 76.79 922.16
78.07 922.19 76.61 922.38 77.50 922.53 76.25 923.20 76.59 923.24 77.84
924.20 78.05 924.74 76.25 925.19 77.96 925.34 76.73 926.15 76.08 926.53
78.16 927.20 76.33 927.26 77.81 927.87 76.87 928.21 78.23 928.53 76.65
929.02 78.23 929.20 78.09 929.34 76.25 930.21 76.60 930.23 78.10 931.21
76.50 931.21 77.50 932.20 76.80 932.27 77.74 933.21 77.84 933.25 76.56
933.33 77.76 934.11 76.80 934.26 76.25 934.93 77.81 935.23 78.24 935.78
76.25 935.93 77.46 936.40 69.36 936.64 76.40 937.20 88.90 937.74 87.50
938.22 89.16 938.34 88.75 938.48 87.82 939.16 87.13 939.26 88.75 940.16
89.12 940.17 87.70 940.93 89.18 941.22 87.20 942.15 87.50 942.26 89.25
943.02 88.92 943.28 87.50 943.53 87.50 943.88 88.80 944.26 89.27 944.53
87.50 945.14 88.75 945.31 87.88 946.18 87.49 946.53 88.75 947.20 88.78
947.54 87.50 948.14 88.91 948.20 87.50 948.74 87.50 948.93 89.10 949.28
87.34 949.73 89.27 950.28 89.08 950.34 87.50 951.19 89.02 951.20 87.50
952.24 88.65 952.28 87.37 953.17 88.93 953.28 87.50 953.44 87.86 953.53
88.81 954.43 88.54 954.88 87.40 955.20 87.41 955.24 89.02 956.20 88.85
956.28 87.19 956.94 88.75 957.63 71.36 957.64 71.39 958.47 34.55 958.48
34.23 959.31 -0.30 959.32 -0.30 959.64 -5.97 960.54 -6.25 960.93 -4.87
961.13 -5.00 961.40 -6.32 962.13 -6.25 962.19 -4.87 963.23 -4.64 963.34
-6.25 963.58 -6.25 963.93 -4.84 964.95 -5.32 965.18 -6.25 965.20 -6.25
965.24 -4.65 966.13 -5.63 966.21 -4.88 967.26 -6.16 967.53 -4.67 968.25
-6.70 968.53 -4.85 969.14 -5.00 969.34 -6.25 969.73 -4.88 970.22 -6.12
970.32 -4.81 970.34 -6.25 971.27 -4.66 971.53 -6.25 972.13 -6.25 972.31
-4.84 973.21 -4.81 973.28 -6.25 973.93 -4.84 974.24 -6.15 975.13 -4.65
975.24 -6.11 975.33 -4.61 975.54 -6.25 976.13 -6.25 976.30 -4.75 977.16
-5.29 977.22 -6.25 978.31 -6.17 978.34 -5.00 978.93 -6.25 979.28 -4.82
979.54 -5.00 980.14 -6.25 980.34 -5.00 980.73 -6.12 981.24 -5.23 981.27
-6.68 982.28 -5.00 982.32 -5.98 983.24 -6.12 983.27 -4.62 984.13 -4.81
984.35 -6.37 985.26 -4.63 985.34 -6.25 985.53 -6.25 985.93 -4.64 986.22
-4.67 986.30 -6.25 987.25 -6.25 987.32 -4.85 987.93 -4.83 988.30 -6.02
989.28 -4.64 989.32 -6.08 990.32 -4.88 990.36 -6.25 990.93 -4.82 991.20
-5.63 991.35 -6.12 991.53 -4.79 992.30 -5.78 992.53 -4.78 992.93 -6.25
993.25 -4.79 994.28 -4.60 994.35 -6.65 995.25 -4.81 995.30 -6.07 995.54
-6.25 995.73 -4.87 996.30 -4.85 996.33 -6.25 997.30 -4.90 997.94 -8.17
997.96 -8.12 998.37 -12.38 999.38 -10.00 999.58 -11.86 999.83 -10.00
1000.36 -12.17 1000.53 -11.25 1000.74 -10.00 1001.37 -10.00 1001.63
-12.13 1002.26 -11.72 1002.94 -10.00 1003.33 -10.56 1003.58 -12.22
1003.93 -12.28 1004.30 -10.00 1004.74 -12.17 1005.27 -10.47 1006.31
-10.48 1006.34 -11.92 1006.36 -11.92 1006.37 -10.00 1007.34 -11.88
1007.38 -10.00 1008.27 -10.67 1008.36 -11.98 1009.13 -11.25 1009.37
-10.57 1009.73 -11.25 1009.94 -10.00 1011.14 -10.00 1011.26 -11.89
1011.41 -10.78 1011.73 -12.26 1012.32 -12.17 1012.93 -10.63 1013.13
-11.86 1013.36 -10.27 1014.28 -11.79 1014.38 -10.00 1015.34 -12.16
1015.53 -10.80 1015.73 -11.90 1016.33 -10.54 1017.11 -10.43 1017.23
-12.50 1017.28 -12.39 1017.99 -33.65 1018.28 -34.29 1018.93 -32.37
1019.31 -32.04 1019.35 -33.75 1020.34 -33.85 1020.40 -32.50 1020.73
-33.75 1021.43 -32.08 1021.93 -32.26 1022.13 -33.86 1022.34 -32.81
1022.74 -33.75 1023.35 -32.38 1023.40 -33.75 1024.29 -32.16 1024.37
-33.91 1025.14 -33.75 1025.39 -32.01 1026.13 -33.75 1026.39 -32.21
1026.93 -32.25 1027.29 -33.84 1027.40 -33.75 1027.40 -32.50 1028.23
-33.75 1028.78 -32.35 1029.34 -34.24 1029.74 -32.23 1030.03 -33.75
1030.43 -32.50 1031.31 -33.79 1031.41 -32.43 1031.93 -33.55 1032.36
-32.09 1032.40 -32.14 1032.43 -33.75 1033.33 -33.77 1033.53 -32.33
1034.28 -33.75 1034.33 -32.25 1035.51 -31.72 1035.75 -36.09 1035.76
-36.09 1036.58 -55.56 1036.94 -56.25 1037.36 -54.44 1037.48 -55.20
1037.58 -54.90 1038.33 -55.70 1038.66 -54.94 1039.53 -55.33 1039.69
-54.98 1040.41 -53.81 1040.74 -56.25 1040.81 -55.29 1041.35 -53.96
1041.65 -54.99 1041.75 -55.24 1042.59 -54.89 1042.73 -56.25 1043.93
-55.31 1044.06 -54.98 1044.70 -54.88 1044.93 -56.25 1045.03 -55.45
1045.38 -53.90 1045.93 -55.40 1046.23 -54.95 1046.93 -54.94 1047.18
-56.25 1047.79 -54.97 1048.32 -55.51 1048.37 -54.44 1049.16 -55.31
1049.37 -53.85 1049.94 -56.13 1050.33 -55.55 1050.37 -54.20 1051.34
-54.33 1051.38 -56.00 1052.11 -54.91 1052.37 -55.36 1052.56 -55.30
1053.34 -53.77 1053.48 -55.47 1053.98 -54.89 1054.32 -53.99 1054.73
-55.49 1055.39 -55.38 1055.43 -53.71 1056.06 -52.98 1056.73 -75.58
1056.76 -75.37 1057.13 -78.41 1057.73 -78.38 1058.35 -76.27 1058.46
-76.25 1058.93 -77.74 1059.41 -77.92 1059.60 -76.80 1060.36 -76.25
1060.45 -78.29 1061.40 -78.16 1061.45 -76.25 1062.17 -76.79 1062.34
-78.14 1062.74 -77.50 1063.41 -76.25 1063.86 -77.52 1063.93 -76.25
1064.53 -78.18 1065.13 -76.25 1065.40 -77.50 1065.48 -76.25 1066.10
-76.57 1066.38 -77.91 1067.36 -76.19 1067.44 -77.83 1068.13 -77.83
1068.45 -76.65 1068.74 -77.50 1069.03 -76.78 1069.74 -76.25 1069.97
-77.93 1070.36 -78.12 1070.63 -76.25 1071.13 -76.25 1071.44 -77.93
1072.34 -76.25 1072.71 -78.89 1072.72 -78.89 1073.13 -88.87 1074.22
-87.34 1074.36 -88.95 1074.53 -89.25 1075.13 -87.50 1075.38 -87.49
1075.42 -88.80 1076.33 -87.48 1076.68 -88.93 1076.93 -87.11 1077.28
-89.14 1077.93 -89.17 1078.36 -87.47 1079.34 -87.50 1079.40 -88.98
1079.44 -88.97 1079.48 -87.50 1080.42 -88.78 1080.46 -87.64 1081.46
-88.96 1081.55 -87.33 1082.45 -87.50 1082.54 -89.04 1083.34 -87.50
1083.46 -89.17 1084.28 -88.95 1084.44 -87.28 1084.49 -88.75 1084.88
-87.50 1085.38 -89.32 1085.43 -87.55 1086.74 -87.50 1086.98 -88.75
1087.34 -87.50 1087.48 -89.33 1088.13 -89.36 1088.48 -87.24 1088.78
-88.82 1089.33 -87.50 1089.73 -88.71 1090.35 -76.55 1090.36 -76.55
1091.19 -39.54 1091.20 -39.54 1092.02 -5.66 1092.39 -4.57 1092.74 -6.25
1093.33 -4.57 1093.53 -6.25 1093.80 -5.82 1094.53 2.00 1094.56 1.16
1095.13 6.25 1095.44 4.69 1095.50 6.25 1096.34 6.25 1096.98 4.70 1097.41
4.67 1097.45 6.87 1098.42 6.25 1098.60 5.27 1099.13 6.25 1099.41 4.74
1099.73 4.89 1100.42 6.07 1100.50 6.25 1101.22 4.61 1101.45 6.10 1101.58
4.88 1102.18 4.56 1102.22 5.69 1103.14 6.25 1103.43 4.63 1104.44 6.16
1104.50 4.65 1104.68 5.00 1104.93 6.25 1105.53 6.11 1105.93 4.88 1106.46
6.30 1107.13 4.77 1107.53 6.40 1107.93 4.70 1108.42 4.65 1108.50 5.85
1108.94 6.25 1109.50 4.82 1110.42 6.44 1110.48 4.93 1110.53 4.67 1110.74
6.25 1111.51 6.28 1112.13 4.68 1112.45 5.00 1112.73 6.18 1113.14 6.25
1113.53 4.84 1114.43 4.66 1114.48 6.24 1114.74 6.25 1115.22 4.87 1115.82
4.91 1115.93 6.17 1116.98 5.63 1117.13 4.65 1117.42 4.67 1117.54 6.25
1118.28 6.25 1118.50 4.64 1119.44 6.15 1119.46 4.81 1119.93 6.25 1120.44
4.53 1120.73 4.70 1121.34 6.25 1121.47 4.83 1121.63 6.25 1122.54 6.25
1122.58 4.83 1123.44 4.69 1123.48 6.25 1124.13 4.99 1124.78 6.25 1125.38
6.25 1125.52 4.69 1126.23 6.25 1126.28 5.32 1126.51 4.86 1126.56 6.25
1127.50 4.80 1127.73 6.25 1128.34 6.25 1128.50 4.81 1129.49 5.26 1129.55
6.39 1130.13 5.00 1130.54 6.38 1131.08 4.89 1131.49 6.62 1131.73 6.12
1132.33 4.85 1132.43 4.82 1132.49 6.39 1133.49 4.63 1133.93 6.25 1134.46
4.60 1134.87 6.65 1134.88 6.68 1135.54 12.07 1135.73 12.20 1135.88
10.00 1136.56 11.25 1137.23 10.00 1137.58 10.00 1138.18 12.18 1138.43
10.00 1138.56 11.52 1139.46 12.21 1139.55 10.69 1140.47 10.00 1140.55
11.49 1140.93 12.16 1141.56 10.40 1141.67 12.16 1142.33 10.00 1142.48
10.00 1142.73 12.19 1143.50 12.10 1143.52 10.62 1144.45 10.68 1144.52
11.54 1145.13 10.00 1145.53 11.68 1146.33 12.16 1146.48 10.57 1147.25
10.80 1147.46 11.78 1147.48 11.78 1147.54 10.66 1148.48 10.53 1148.93
12.20 1149.53 11.79 1149.54 10.71 1150.13 11.88 1150.47 10.61 1151.49
11.75 1151.60 10.00 1151.94 11.25 1152.48 10.79 1152.53 10.32 1152.55
11.82 1153.48 10.61 1153.56 12.16 1154.49 12.14 1154.60 10.00 1155.57
10.59 1155.83 11.25 1156.14 10.44 1156.71 23.47 1156.72 23.47 1157.34
34.05 1157.57 32.50 1158.13 33.78 1158.56 33.88 1159.03 32.85 1159.59
33.82 1159.60 32.50 1160.13 32.36 1160.60 33.75 1161.13 33.75 1161.38
32.22 1161.98 33.39 1162.59 32.06 1162.93 33.75 1162.97 32.79 1163.66
33.40 1163.73 32.17 1164.33 33.75 1164.71 32.19 1165.56 33.75 1165.80
32.85 1166.56 33.57 1166.58 32.36 1167.13 33.75 1167.50 32.02 1167.73
33.45 1168.33 32.25 1168.59 32.84 1168.94 33.75 1169.56 32.50 1169.59
33.75 1170.57 33.89 1170.75 32.82 1171.53 33.92 1171.62 32.06 1172.13
32.32 1172.38 33.75 1172.73 32.28 1173.16 33.35 1173.62 32.11 1173.64
33.75 1174.36 33.65 1175.19 48.42 1175.20 48.84 1175.58 56.25 1176.54
54.92 1176.76 55.33 1176.93 55.31 1177.64 54.88 1177.93 56.25 1178.18
54.20 1178.74 54.92 1179.34 56.25 1179.94 54.11 1180.22 55.34 1180.24
55.24 1180.56 53.92 1181.33 56.25 1181.65 54.98 1182.33 55.44 1182.53
54.40 1183.33 55.36 1183.55 54.38 1183.62 54.46 1184.36 55.31 1184.52
54.00 1184.58 55.64 1185.56 55.40 1185.93 54.04 1186.54 55.47 1186.56
54.21 1187.48 54.08 1187.57 55.46 1188.14 56.25 1188.59 54.95 1188.93
56.25 1189.24 54.88 1189.58 54.98 1189.93 55.42 1190.74 54.92 1190.94
55.37 1191.17 55.28 1191.64 53.95 1192.56 56.25 1192.82 54.51 1192.86
54.51 1193.67 71.31 1193.68 71.44 1194.12 77.76 1194.55 76.15 1195.33
77.50 1195.60 76.25 1195.64 77.75 1196.61 78.15 1196.74 76.25 1197.54
76.47 1197.61 78.15 1197.94 76.25 1198.69 77.57 1199.08 77.93 1199.33
76.25 1199.60 76.25 1200.31 77.53 1200.67 77.54 1200.68 76.25 1201.68
76.25 1201.72 78.29 1202.35 76.71 1202.57 78.18 1203.58 78.06 1203.69
76.25 1203.96 76.25 1204.61 77.59 1204.71 76.25 1204.95 78.23 1205.85
78.14 1206.11 76.25 1206.75 77.98 1206.82 76.74 1207.58 77.87 1207.62
76.25 1208.59 77.96 1208.64 76.25 1209.17 76.78 1209.60 77.99 1209.69
77.50 1210.41 76.25 1210.95 77.92 1211.27 74.02 1211.34 74.53 1211.91
89.07 1212.76 88.89 1212.77 87.50 1213.45 88.79 1213.58 87.20 1214.56
87.50 1214.68 89.20 1214.70 89.09 1214.95 87.16 1215.65 88.97 1215.69
87.08 1216.61 87.50 1216.67 89.12 1217.65 87.40 1217.71 88.75 1218.61
89.10 1218.71 87.50 1219.15 87.42 1219.65 88.90 1220.01 88.47 1220.45
87.86 1220.61 87.48 1220.71 89.13 1221.59 88.86 1221.71 87.22 1222.67
87.65 1222.71 89.17 1223.35 88.95 1223.71 86.82 1223.95 88.95 1224.55
87.45 1225.45 87.75 1225.59 89.03 1225.62 88.75 1226.45 58.85 1226.46
58.43 1227.29 21.74 1227.30 21.20 1228.13 -2.30 1228.14 -2.30 1228.67
-6.47 1229.55 -4.88 1229.67 -6.76 1229.95 -6.25 1230.55 -4.90 1230.69
-6.25 1231.50 -4.62 1231.61 -4.59 1231.67 -6.69 1232.61 -4.83 1232.69
-6.25 1233.67 -6.31 1233.72 -4.72 1234.61 -6.11 1234.66 -4.62 1235.10
-6.25 1235.35 -4.84 1235.72 -6.40 1235.90 -5.31 1236.73 -4.77 1236.76
-6.25 1237.73 -4.66 1237.95 -6.14 1238.68 -4.64 1238.85 -6.15 1239.10
-6.25 1239.35 -4.64 1240.35 -4.80 1240.73 -6.20 1240.90 -6.25 1240.96
-4.91 1241.65 -6.25 1241.69 -4.63 1242.69 -6.04 1242.72 -4.87 1243.55
-4.62 1243.65 -6.34 1244.70 -6.25 1244.73 -4.61 1245.69 -6.63 1245.73
-4.60 1245.95 -6.25 1246.36 -4.86 1246.66 -4.86 1246.73 -6.25 1247.55
-4.83 1247.77 -6.25 1248.40 -6.25 1248.68 -4.64 1249.35 -4.66 1249.37
-6.25 1250.15 -4.83 1250.56 -6.25 1251.36 -6.25 1251.63 -4.94 1251.69
-4.65 1251.96 -6.25 1252.65 -4.64 1252.69 -6.16 1253.71 -6.27 1253.75
-4.84 1254.65 -6.09 1254.74 -4.84 1255.15 -4.89 1255.71 -6.25 1256.08
-5.31 1256.35 -6.25 1256.71 -6.25 1256.85 -5.00 1257.70 -6.15 1257.75
-4.65 1258.71 -4.64 1258.75 -6.19 1259.66 -4.64 1259.77 -6.25 1260.74
-4.82 1260.77 -6.25 1260.97 -5.00 1261.16 -6.25 1261.83 -6.25 1261.86
-4.62 1262.69 -6.25 1263.15 -4.86 1263.64 -4.81 1263.77 -6.25 1264.30
-6.25 1264.36 -4.88 1265.55 -6.23 1265.72 -4.85 1266.35 -4.88 1266.71
-6.07 1267.25 -5.30 1267.58 -5.70 1267.63 -5.30 1267.73 -6.19 1268.69
-4.85 1269.15 -6.25 1269.75 -4.83 1269.77 -6.25 1270.69 -4.95 1270.97
-9.46 1270.98 -9.52 1271.78 -11.87 1272.09 -10.77 1272.55 -12.21 1272.76
-10.64 1273.16 -11.25 1273.68 -11.61 1273.75 -10.61 1274.36 -11.25
1274.73 -10.49 1275.56 -11.25 1275.79 -10.00 1276.76 -10.49 1276.78
-12.12 1277.18 -10.76 1277.68 -11.86 1277.73 -10.62 1278.05 -12.12
1278.68 -10.41 1278.95 -12.16 1279.55 -10.56 1279.95 -11.76 1280.55
-12.21 1280.79 -10.40 1281.71 -11.58 1281.76 -10.75 1282.55 -10.00
1282.68 -11.72 1282.75 -11.59 1283.16 -10.00 1283.78 -11.40 1284.17
-10.00 1284.73 -12.13 1284.76 -10.60 1285.69 -12.23 1285.75 -10.62
1286.68 -12.06 1286.78 -10.50 1287.15 -10.66 1287.75 -11.88 1287.81
-12.16 1288.37 -10.00 1288.71 -12.28 1289.25 -10.00 1290.15 -10.24
1290.27 -11.71 1290.32 -11.41 1291.05 -33.68 1291.45 -33.83 1291.71
-32.80 1292.55 -32.33 1292.81 -33.74 1292.95 -33.72 1292.96 -32.50
1293.70 -33.55 1293.80 -32.00 1294.55 -33.79 1294.72 -32.50 1295.80
-33.95 1296.05 -32.09 1296.71 -32.47 1296.79 -33.80 1297.76 -34.08
1297.82 -32.15 1297.90 -32.50 1298.15 -33.75 1298.83 -33.75 1299.10
-32.41 1299.73 -32.16 1299.78 -33.75 1300.72 -33.84 1300.77 -32.39
1301.70 -32.26 1301.78 -33.76 1302.15 -33.78 1302.56 -32.50 1302.95
-32.43 1303.15 -33.72 1303.81 -33.89 1304.55 -32.41 1304.95 -32.04
1305.17 -33.75 1305.73 -34.49 1306.16 -32.50 1306.73 -26.91 1307.09
-40.84 1307.10 -41.01 1307.51 -56.25 1308.20 -54.91 1308.35 -56.25
1309.39 -54.92 1309.51 -55.33 1309.73 -54.22 1309.79 -55.39 1310.78
-54.18 1310.96 -56.25 1311.36 -56.25 1311.73 -54.17 1312.79 -55.55
1312.83 -54.09 1313.55 -53.75 1313.78 -55.73 1314.16 -56.25 1314.35
-54.96 1314.85 -56.25 1315.46 -54.89 1315.81 -56.25 1316.25 -54.95
1316.35 -54.09 1317.16 -56.25 1317.33 -55.31 1317.79 -54.92 1318.55
-54.93 1318.82 -55.46 1318.90 -54.97 1319.37 -55.37 1319.80 -55.33
1319.86 -54.94 1320.55 -53.84 1320.77 -55.34 1321.91 -55.43 1321.95
-54.87 1322.81 -55.39 1322.92 -54.90 1323.79 -55.39 1323.89 -54.90
1324.27 -54.83 1324.65 -55.26 1325.06 -54.18 1325.57 -66.39 1325.60
-66.31 1326.11 -77.51 1326.79 -76.14 1327.15 -77.79 1327.87 -76.25
1328.05 -77.50 1328.37 -76.25 1328.40 -78.15 1329.35 -77.77 1329.57
-76.25 1329.82 -76.25 1330.45 -77.50 1330.95 -77.77 1331.36 -76.25
1331.57 -76.25 1332.15 -78.16 1332.57 -76.25 1332.77 -78.12 1333.16
-76.25 1333.87 -78.39 1334.15 -76.25 1334.38 -77.54 1335.15 -76.25
1335.36 -77.50 1335.67 -76.84 1335.81 -78.17 1336.51 -76.25 1336.81
-78.14 1337.82 -76.23 1337.85 -77.88 1338.35 -78.19 1338.56 -76.25
1339.05 -78.27 1339.55 -76.67 1340.18 -76.82 1340.35 -77.82 1340.81
-77.99 1340.89 -76.24 1341.80 -76.25 1341.89 -78.05 1342.70 -76.75
1342.87 -78.22 1343.56 -73.75 1344.05 -88.31 1344.78 -89.08 1344.81
-87.38 1345.35 -87.47 1345.55 -88.75 1345.83 -89.08 1345.87 -87.48
1346.86 -87.03 1346.97 -88.75 1347.83 -88.91 1348.16 -87.50 1348.82
-87.18 1348.86 -88.77 1349.37 -88.75 1349.86 -87.50 1350.16 -87.87
1350.50 -89.12 1350.78 -88.75 1351.35 -87.38 1351.83 -89.26 1352.16
-87.50 1352.88 -87.40 1353.25 -89.31 1353.88 -90.36 1353.96 -87.43
1354.82 -87.29 1354.86 -88.86 1355.16 -88.75 1355.80 -87.10 1355.89
-89.30 1356.35 -87.22 1356.79 -88.93 1356.85 -87.23 1357.78 -87.88
1357.90 -89.08 1358.35 -88.82 1358.76 -87.50 1359.84 -87.27 1359.88
-88.77 1360.62 -87.69 1360.83 -88.90 1360.91 -88.75 1361.12 -87.86
1361.75 -88.73 1362.53 -67.37 1362.54 -67.37 1363.37 -30.26 1363.38
-29.84 1364.15 -4.93 1364.77 -5.00 1364.89 -6.18 1365.17 -6.25 1365.87
-4.60 1365.93 -5.00 1366.36 -6.25 1366.85 -4.67 1367.45 -5.65 1367.81
-4.64 1368.16 -6.25 1368.76 -5.00 1368.89 -6.76 1369.36 -4.89 1369.75
-6.25 1370.75 -4.88 1370.88 -6.16 1371.16 -5.00 1371.76 -6.25 1371.82
-6.34 1371.95 -4.83 1372.87 -6.38 1373.15 -4.67 1373.81 -6.37 1373.85
-4.84 1374.45 -6.25 1374.81 -4.83 1375.40 -6.25 1375.95 -4.53 1376.15
-6.25 1376.55 -4.83 1376.92 -4.72 1377.16 -6.25 1377.75 -6.46 1377.90
-4.67 1378.93 -6.58 1379.15 -4.55 1379.83 -6.53 1379.88 -4.47 1380.35
-4.88 1380.83 -6.28 1381.15 -5.00 1381.75 -6.25 1382.01 -6.25 1382.30
-4.47 1382.86 -4.43 1382.87 -6.18 1383.84 -6.48 1383.95 -4.58 1384.55
-6.25 1384.62 -5.30 1385.84 -4.61 1385.89 -6.08 1386.55 -6.25 1386.85
-4.52 1386.91 -6.25 1387.55 -4.76 1387.89 -4.71 1387.92 -6.25 1388.83
-4.81 1388.92 -6.25 1389.93 -4.80 1389.95 -6.25 1390.75 -4.65 1390.91
-6.25 1391.56 -6.25 1391.62 -5.31 1391.96 -6.25 1392.76 -5.00 1392.92
-4.82 1393.05 -6.25 1393.86 -6.12 1393.91 -4.77 1394.84 -6.09 1395.16
-4.83 1395.45 -6.25 1395.92 -4.82 1396.35 -6.11 1396.36 -5.00 1397.36
-5.00 1397.75 -6.12 1397.86 -6.60 1397.93 -4.83 1398.76 -6.25 1398.91
-4.56 1399.76 -6.25 1399.89 -4.82 1400.87 -6.67 1400.95 -4.82 1401.75
-6.25 1401.97 -4.69 1402.15 -4.91 1402.86 -6.70 1402.86 -6.70 1403.35
-4.83 1403.87 -6.38 1404.35 -4.60 1404.75 -4.64 1404.87 -6.66 1405.86
-4.81 1405.93 -6.34 1406.92 -4.61 1406.93 -6.25 1407.36 -4.83 1407.55
-6.25 1407.97 -4.92 1408.15 -6.25 1408.75 -6.25 1408.97 -4.90 1410.16
-6.25 1410.30 -4.65 1410.55 -6.25 1410.96 -4.82 1411.36 -6.25 1411.86
-4.66 1412.25 -5.32 1412.56 -6.25 1412.94 -6.12 1413.45 -4.89 1413.87
-4.83 1413.95 -6.25 1414.88 -4.86 1414.98 -6.79 1415.75 -6.25 1416.15
-4.92 1416.36 -6.25 1416.98 -4.60 1417.75 -4.63 1417.93 -6.06 1417.98
-4.84 1418.55 -6.25 1418.97 -6.72 1419.15 -4.85 1419.75 -6.25 1419.94
-4.86 1420.75 -6.25 1420.96 -4.81 1421.55 -4.86 1421.93 -6.67 1422.35
-6.25 1422.96 -4.87 1423.15 -5.00 1423.50 -6.25 1423.98 -4.66 1424.40
-5.66 1424.75 -4.61 1424.76 -6.25 1425.89 -4.66 1426.00 -6.67 1426.55
-6.25 1426.89 -4.86 1427.35 -6.14 1427.99 -4.85 1428.15 -6.16 1428.16
-5.00 1428.90 -6.33 1428.93 -4.84 1430.01 -4.87 1430.01 -6.25 1430.85
-4.62 1431.10 -6.25 1431.70 -4.86 1431.97 -6.25 1432.30 -4.86 1432.91
-6.32 1433.55 -4.90 1433.90 -6.03 1433.96 -4.83 1433.99 -5.80 1434.96
-4.68 1435.36 -6.25 1436.01 -4.67 1436.03 -6.25 1436.91 -6.15 1436.92
-4.84 1437.76 -6.25 1438.01 -4.64 1438.45 -6.25 1438.97 -4.65 1439.02
-5.00 1439.25 -6.25 1439.94 -4.63 1440.56 -6.25 1440.93 -4.62 1441.02
-6.15 1442.01 -6.09 1442.02 -4.59 1442.36 -6.25 1442.97 -4.86 1443.55
-6.14 1443.56 -5.00 1444.03 -5.00 1444.76 -6.25 1444.97 -6.32 1445.01
-4.85 1445.95 -5.00 1446.01 -6.70 1446.71 -5.34 1446.93 -6.67 1447.55
-6.25 1448.00 -4.85 1448.76 -6.25 1448.98 -4.84 1449.10 -4.91 1449.16
-6.14 1449.95 -4.63 1450.36 -6.25 1450.95 -6.59 1451.15 -4.83 1452.03
-4.61 1452.05 -6.25 1452.45 -6.25 1453.01 -4.59 1453.93 -4.83 1454.03
-6.62 1454.36 -6.25 1454.92 -4.84 1454.99 -4.64 1455.03 -6.12 1455.97
-4.61 1456.01 -6.25 1456.98 -6.15 1457.05 -4.88 1457.98 -6.32 1458.03
-4.86 1458.94 -4.84 1459.00 -6.25 1459.15 -6.25 1459.25 -4.64 1460.01
-6.25 1460.05 -4.63 1461.30 -5.31 1461.35 -6.25 1462.01 -6.31 1462.04
-4.80 1462.75 -4.89 1462.99 -6.29 1463.50 -4.60 1463.75 -6.25 1464.35
-6.25 1465.00 -4.60 1465.35 -4.84 1465.56 -6.15 1465.95 -4.86 1466.02
-6.25 1466.76 -6.25 1466.95 -4.62 1467.97 -6.68 1468.01 -4.64 1468.75
-4.88 1469.01 -6.13 1469.55 -4.63 1470.02 -6.13 1470.35 -4.84 1470.66
-5.65 1471.06 -6.71 1471.35 -4.90 1471.97 -6.58 1472.25 -5.00 1472.97
-6.58 1473.03 -5.00 1473.98 -4.61 1474.03 -6.25 1474.36 -6.25 1474.51
-4.88 1475.50 -5.63 1475.93 -3.46 1475.98 -4.16 1476.40 0.52 1476.78
0.00 1476.78 0.00 1477.62 0.00 1477.62 0.00 1478.46 0.00 1478.46 0.00
1479.30 0.00 1479.30 0.00 1480.14 0.00 1480.14 0.00 1480.98 0.00 1480.98
0.00 1481.82 0.00 1481.82 0.00 1482.66 0.00 1482.66 0.00 1483.50 0.00
1483.50 0.00 1484.34 0.00 1484.34 0.00 1485.18 0.00 1485.18 0.00 1486.02
0.00 1486.02 0.00 1486.86 0.00 1486.86 0.00 1487.70 0.00 1487.70 0.00
1488.54 0.00 1488.54 0.00 1489.38 0.00 1489.38 0.00 1490.22 0.00 1490.22
0.00 1491.06 0.00 1491.06 0.00 1491.90 0.00 1491.90 0.00 1492.74 0.00
1492.74 0.00 1493.58 0.00 1493.58 0.00 1494.42 0.00 1494.42 0.00 1495.26
0.00 1495.26 0.00 1496.10 0.00 1496.10 0.00 1496.94 0.00 1496.94 0.00
1497.78 0.00 1497.78 0.00 1498.62 0.00 1498.62 0.00 1499.46 0.00 1499.46
0.00 1500.30 0.00 1500.30 0.00 1501.14 0.00 1501.14 0.00 1501.98 0.00
1501.98 0.00 1502.82 0.00 1502.82 0.00 1503.66 0.00 1503.66 0.00 1504.50
0.00 1504.50 0.00 1505.34 0.00 1506.02 6.25 1506.35 6.25 1506.95 4.62
1507.05 4.61 1507.09 6.13 1507.95 4.65 1508.11 6.25 1509.07 4.45 1509.10
6.11 1510.02 4.68 1510.11 6.35 1510.55 6.25 1511.05 4.93 1511.75 4.79
1512.00 6.12 1512.07 4.65 1512.13 6.25 1512.90 6.25 1513.05 4.64 1513.75
4.83 1514.03 6.25 1515.10 6.68 1515.15 4.84 1516.09 6.25 1516.12 4.84
1516.55 6.25 1516.97 0.00 1517.25 -1.25 1517.62 0.12 1517.94 0.00 1517.94
0.00 1518.78 0.00 1518.78 0.00 1519.62 0.00 1519.62 0.00 1520.46 0.00
1520.46 0.00 1521.30 0.00 1521.30 0.00 1522.14 0.00 1522.14 0.00 1522.98
0.00 1522.98 0.00 1523.82 0.00 1523.82 0.00 1524.66 0.00 1524.66 0.00
1525.50 0.00 1525.50 0.00 1526.34 0.00 1526.34 0.00 1527.18 0.00 1527.95
5.85 1528.11 6.25 1528.15 4.77 1529.09 4.80 1529.35 6.25 1529.70 5.00
1529.96 6.25 1531.06 6.74 1531.13 4.61 1531.75 4.95 1532.15 6.16 1532.75
5.00 1533.06 6.36 1533.35 4.64 1533.70 6.20 1534.11 4.85 1534.16 6.72
1535.10 4.66 1535.16 6.25 1536.06 6.13 1536.09 4.67 1536.55 5.00 1536.75
6.25 1537.30 6.25 1538.07 4.90 1538.30 5.32 1538.55 6.25 1539.07 6.25
1539.17 4.79 1540.11 4.60 1540.36 6.25 1541.07 4.79 1541.16 6.25 1541.55
4.89 1541.56 6.25 1542.76 6.25 1543.13 4.95 1543.15 4.80 1543.35 6.12
1544.35 6.25 1544.75 4.82 1544.91 5.33 1545.07 6.16 1545.85 6.25 1546.16
4.81 1547.12 6.58 1547.17 5.10 1547.96 5.00 1548.13 6.25 1548.57 5.00
1548.80 6.25 1549.10 4.64 1549.80 6.25 1549.95 6.25 1550.09 5.10 1551.08
4.63 1551.12 6.11 1552.05 4.80 1552.18 6.28 1552.55 4.80 1553.11 6.16
1553.35 5.00 1553.95 6.25 1554.35 4.66 1554.36 6.25 1554.95 4.85 1555.60
6.25 1556.09 4.67 1556.19 6.38 1557.15 6.36 1557.35 4.68 1557.95 6.25
1558.15 4.65 1558.35 4.85 1558.37 6.25 1559.30 4.65 1559.90 6.25 1560.15
4.83 1560.55 6.13 1560.95 5.00 1561.16 6.42 1561.75 6.25 1562.45 5.32
1563.11 6.25 1563.13 4.79 1563.50 4.90 1563.59 5.64 1564.15 4.81 1564.29
5.65 1565.05 6.25 1565.20 4.83 1566.09 5.81 1566.20 4.71 1567.16 6.25
1567.19 4.88 1567.76 6.25 1568.13 4.66 1569.10 4.67 1569.15 6.18 1569.20
4.65 1569.55 6.25 1570.56 6.25 1570.76 5.00 1571.10 6.18 1571.13 4.85
1571.96 6.25 1572.16 4.61 1572.60 6.25 1573.15 4.63 1573.55 6.25 1574.16
4.46 1574.40 6.25 1575.00 4.82 1575.13 6.25 1575.21 4.78 1576.13 6.25
1576.35 4.98 1577.12 6.73 1577.22 5.00 1578.17 4.54 1578.40 6.25 1578.76
6.25 1579.21 4.67 1579.55 6.18 1579.55 5.00 1580.11 6.16 1580.13 5.00
1581.12 6.15 1581.55 4.69 1582.11 4.82 1582.13 6.25 1583.10 4.79 1583.19
6.01 1584.18 6.61 1584.23 4.61 1584.56 5.00 1585.13 6.63 1585.14 6.63
1585.80 5.33 1586.13 4.82 1586.23 6.25 1587.55 6.16 1587.56 5.00 1588.13
4.80 1588.20 6.25 1589.22 4.66 1589.25 6.25 1589.40 6.25 1590.16 5.31
1590.22 5.00 1590.56 6.25 1591.13 4.82 1591.23 6.25 1592.15 4.79 1592.19
6.58 1593.20 6.38 1593.25 4.89 1594.00 4.63 1594.26 6.25 1594.55 5.00
1594.96 6.25 1595.24 4.88 1595.25 6.25 1596.19 4.65 1596.22 6.25 1596.95
4.79 1597.36 6.25 1598.20 5.00 1598.24 6.35 1598.95 4.85 1599.16 6.25
1599.83 5.64 1600.19 4.64 1600.35 4.80 1600.75 6.25 1601.19 4.86 1601.26
6.25 1601.95 4.85 1602.17 6.25 1603.10 4.61 1603.26 6.25 1604.18 6.25
1604.35 4.81 1605.14 4.80 1605.26 6.33 1605.56 6.25 1606.06 5.31 1606.22
6.25 1606.26 4.63 1607.18 6.25 1607.75 4.64 1608.26 4.62 1608.56 6.25
1609.12 5.34 1609.23 6.41 1609.80 4.69 1610.22 6.25 1610.75 6.12 1610.96
4.70 1611.26 4.69 1611.60 6.25 1612.24 6.25 1612.80 4.65 1612.95 6.25
1613.35 4.80 1614.18 4.65 1614.22 6.16 1615.17 6.63 1615.27 4.48 1615.85
4.67 1616.20 6.25 1616.23 6.37 1616.28 4.85 1617.23 5.00 1617.27 6.16
1618.26 4.81 1618.55 6.25 1619.15 4.82 1619.55 6.25 1619.80 6.25 1620.17
4.81 1620.75 6.14 1621.26 4.65 1621.26 4.65 1621.96 6.17 1622.15 4.83
1622.36 6.25 1623.17 4.82 1623.56 6.25 1624.27 6.03 1624.45 4.67 1624.95
5.00 1625.23 6.33 1625.95 4.83 1626.17 6.25 1626.56 6.25 1626.61 5.32
1627.20 6.60 1627.76 5.00 1628.17 6.01 1628.75 4.89 1629.25 6.14 1629.40
4.63 1630.20 5.21 1630.29 6.40 1630.95 6.13 1631.23 4.79 1631.50 4.90
1631.75 6.25 1632.29 6.25 1632.90 4.68 1633.23 6.73 1633.30 4.65 1633.90
6.25 1634.25 4.67 1635.21 4.81 1635.24 6.64 1635.55 6.25 1636.30 4.64
1637.15 6.25 1637.20 4.64 1637.22 4.81 1637.35 6.25 1638.30 6.56 1638.75
4.82 1639.27 4.62 1639.31 6.25 1640.30 4.77 1640.50 6.25 1640.75 6.25
1641.35 4.65 1641.76 6.25 1642.22 4.66 1642.31 6.38 1642.95 5.00 1643.26
4.78 1643.75 6.18 1644.15 4.67 1644.56 6.25 1645.27 6.25 1645.31 4.65
1646.24 6.25 1646.29 4.67 1646.55 4.82 1647.16 6.25 1647.31 5.00 1647.75
6.25 1648.27 4.63 1648.32 6.25 1649.25 4.63 1649.28 6.11 1649.95 5.00
1650.55 6.11 1650.90 6.25 1651.25 4.64 1651.75 4.81 1652.31 6.38 1652.70
6.25 1652.95 5.00 1653.26 4.81 1653.35 6.25 1654.31 6.69 1654.75 4.85
1655.25 6.12 1655.31 4.67 1656.24 4.84 1656.34 6.25 1656.55 6.25 1657.15
4.65 1657.55 5.33 1657.75 6.25 1658.24 4.64 1658.76 6.25 1659.29 6.58
1659.33 5.16 1660.15 6.25 1660.55 4.93 1660.80 6.25 1661.24 4.81 1662.27
4.81 1662.34 6.25 1662.95 6.25 1663.25 5.29 1663.30 4.82 1663.36 6.25
1664.20 4.94 1664.24 6.40 1665.31 6.24 1665.40 4.68 1666.28 4.71 1666.34
6.59 1667.15 6.25 1667.24 5.11 1667.95 6.14 1668.29 4.81 1668.30 5.84
1668.75 4.88 1669.26 6.25 1669.95 4.79 1670.65 4.78 1670.71 5.65 1671.26
6.25 1671.37 4.59 1671.75 5.00 1672.32 6.11 1673.26 4.67 1673.29 6.14
1673.35 6.33 1674.15 5.00 1674.35 4.64 1674.56 6.25 1675.15 6.25 1675.31
4.67 1676.31 6.16 1676.36 4.69 1676.96 6.25 1677.41 5.34 1677.95 4.92
1678.36 6.61 1678.55 6.25 1679.15 4.81 1679.27 6.35 1679.96 4.64 1680.37
6.25 1680.75 4.63 1680.95 4.64 1681.20 6.25 1681.95 6.25 1682.37 4.80
1683.26 6.15 1683.33 4.64 1683.55 4.82 1683.96 6.25 1684.29 4.82 1684.38
6.25 1685.28 4.80 1685.55 6.25 1686.16 6.25 1686.45 4.67 1686.95 6.25
1687.33 4.67 1687.95 6.25 1688.37 4.64 1688.56 6.25 1689.15 5.33 1689.33
4.81 1689.95 6.15 1690.31 6.25 1690.34 4.64 1691.01 5.35 1691.75 28.75
1691.91 28.09 1692.29 26.65 1693.15 28.84 1693.45 27.35 1693.75 27.32
1694.27 28.87 1694.40 27.33 1694.97 27.81 1695.37 26.65 1696.01 27.76
1696.03 27.75 1696.75 26.25 1697.07 27.85 1697.56 26.25 1698.29 26.16
1698.30 28.75 1699.34 28.00 1699.36 26.50 1699.41 27.81 1700.17 27.33
1700.48 27.34 1701.04 27.76 1701.37 26.36 1701.60 27.83 1701.97 27.77
1702.71 27.33 1703.55 26.25 1703.58 27.79 1703.64 27.82 1704.23 27.29
1704.53 27.30 1704.75 28.75 1705.42 28.75 1705.51 27.37 1706.41 28.75
1706.46 27.30 1707.38 26.25 1707.73 27.75 1708.15 27.82 1708.49 27.33
1708.91 27.26 1709.41 27.83 1709.46 27.35 1710.19 27.82 1710.40 28.97
1711.06 27.27 1711.24 27.31 1711.70 27.80 1712.15 27.37 1712.36 27.99
1713.00 28.86 1713.57 27.26 1714.37 26.29 1714.42 27.80 1714.65 27.83
1715.31 26.28 1715.47 27.28 1716.15 27.75 1716.32 27.90 1716.41 26.34
1717.21 27.83 1717.66 27.30 1718.43 26.23 1718.51 27.80 1718.90 27.82
1718.95 26.25 1719.54 27.29 1719.56 27.73 1720.75 26.19 1721.21 27.81
1721.35 28.96 1721.70 27.28 1722.06 27.30 1722.70 27.79 1723.33 26.55
1723.73 27.82 1723.74 27.82 1724.23 27.27 1724.69 27.33 1724.93 27.81
1725.45 26.25 1725.96 27.84 1726.80 27.31 1727.09 27.77 1727.27 27.35
1727.37 27.83 1728.32 26.24 1728.37 28.67 1728.86 27.32 1729.34 27.82
1729.99 27.34 1730.21 27.81 1731.25 26.25 1731.28 27.78 1731.45 28.75
1731.62 27.34 1732.40 27.81 1732.75 27.32 1733.01 27.32 1733.63 27.78
1734.44 26.59 1734.66 27.81 1735.39 28.76 1735.45 26.24 1735.56 27.35
1736.29 27.81 1736.45 26.32 1736.81 27.87 1737.95 26.55 1737.98 27.80
1738.35 27.84 1738.45 26.43 1739.04 27.83 1739.55 27.24 1740.09 26.24
1740.44 27.98 1741.20 27.84 1741.36 26.39 1741.72 27.25 1742.21 27.77
1742.50 28.00 1742.55 26.28 1743.38 28.75 1743.90 27.28 1744.34 28.73
1744.55 26.54 1745.37 27.82 1745.52 27.37 1745.59 27.77 1746.29 27.28
1747.15 26.46 1747.16 28.75 1747.43 28.75 1747.83 27.33 1748.26 27.29
1748.81 27.73 1749.56 28.75 1749.77 27.31 1750.23 27.77 1750.24 27.35
1750.68 27.32 1751.42 27.99 1751.46 26.53 1751.62 27.81 1752.37 26.42
1752.41 28.87 1753.47 28.75 1753.75 26.60 1754.42 27.80 1754.49 27.31
1755.43 26.61 1755.53 27.74 1755.75 26.54 1755.91 27.82 1756.55 28.75
1756.96 27.28 1757.55 26.23 1758.03 27.80 1758.45 28.75 1758.64 27.33
1759.05 26.25 1759.86 27.75 1760.43 27.82 1760.56 26.25 1761.07 27.28
1761.10 28.75 1761.82 27.34 1762.30 27.78 1763.11 27.33 1763.16 28.75
1763.65 28.75 1763.66 27.31 1764.15 26.23 1764.51 27.97 1765.24 27.32
1765.39 27.79 1766.44 26.42 1766.47 28.75 1766.75 26.32 1766.80 27.82
1767.56 27.75 1767.63 27.29 1768.44 27.81 1768.52 27.36 1769.41 28.88
1769.80 27.33 1770.15 28.78 1770.22 27.29 1771.35 27.80 1771.50 26.25
1772.02 27.32 1772.10 28.81 1772.53 27.32 1773.28 27.80 1773.47 28.00
1773.48 26.30 1774.51 26.26 1774.85 27.75 1775.35 26.54 1775.53 27.80
1776.15 27.34 1776.45 27.80 1777.28 27.79 1777.46 26.27 1777.72 27.81
1778.10 27.34 1778.41 26.31 1778.64 27.74 1779.54 26.49 1780.01 27.79
1780.39 26.36 1780.75 28.80 1781.24 27.28 1781.66 27.77 1781.99 27.80
1782.46 26.38 1782.70 27.31 1782.71 27.76 1783.40 27.31 1784.22 27.81
1784.75 28.99 1785.05 27.31 1785.43 26.25 1785.55 28.84 1785.92 27.37
1786.43 28.09 1786.74 27.76 1787.42 26.35 1787.95 26.25 1788.37 27.80
1788.47 28.75 1788.50 26.59 1789.43 28.82 1790.10 27.32 1790.11 27.33
1790.52 27.83 1790.95 28.96 1791.35 26.43 1792.15 28.90 1792.49 26.36
1792.93 27.83 1793.19 27.33 1793.56 27.30 1793.77 27.74 1794.76 27.35
1795.10 27.80 1795.43 28.92 1795.61 27.31 1796.53 27.80 1796.70 27.26
1797.40 26.52 1797.47 27.96 1797.70 27.82 1798.04 27.30 1798.95 26.28
1798.96 28.75 1799.50 28.96 1798.16 26.25 1798.53 27.30 1799.02 27.78
1799.46 26.30 1799.50 27.86 1800.11 27.83 1800.63 26.17 1801.30 27.27
1801.51 28.75 1801.55 27.85 1802.39 27.32 1802.75 27.32 1803.11 27.75
1803.49 26.24 1803.54 28.79 1804.22 27.85 1804.70 27.28 1804.94 27.28
1805.53 27.80 1806.45 26.54 1806.57 27.81 1807.13 27.30 1807.36 28.80
1807.73 27.82 1808.27 27.32 1808.84 27.80 1809.08 27.27 1809.34 27.28
1809.94 27.79 1810.11 26.25 1810.78 28.06 1810.80 27.90 1811.63 54.35
1811.63 54.35 1812.44 67.65 1812.48 68.56 1813.31 81.98 1813.36 81.21
1813.48 83.82 1814.47 82.94 1814.70 82.26 1815.16 83.08 1815.48 81.41
1816.28 82.36 1816.58 83.75 1817.16 81.76 1817.33 82.99 1817.53 81.52
1818.04 83.01 1818.49 81.25 1818.73 83.04 1819.58 83.75 1819.92 82.37
1820.53 83.87 1820.59 82.37 1821.49 81.49 1821.54 83.10 1822.03 82.36
1822.52 83.15 1822.78 82.34 1822.98 83.06 1823.59 82.35 1823.76 83.27
1824.56 81.91 1824.97 83.75 1825.21 83.07 1825.59 81.69 1825.96 83.25
1826.59 82.09 1827.57 83.35 1827.58 81.33 1828.11 83.75 1828.43 82.36
1828.54 83.75 1829.19 82.34 1829.60 82.20 1829.61 83.09 1830.36 83.26
1830.49 81.66 1831.33 82.30 1831.59 83.75 1832.52 81.92 1832.54 83.17
1832.74 82.30 1833.28 83.07 1834.01 83.09 1834.27 82.34 1834.77 83.05
1835.04 82.29 1835.16 83.75 1835.57 81.72 1836.36 83.75 1836.60 81.27
1837.52 81.60 1837.55 83.57 1837.91 81.25 1838.32 83.04 1838.51 81.32
1839.05 83.04 1839.71 83.75 1840.17 82.34 1840.51 83.33 1840.62 81.65
1841.22 82.99 1841.64 82.34 1842.34 82.34 1842.58 83.75 1843.07 82.32
1843.53 83.75 1843.62 83.96 1843.81 82.36 1844.59 82.36 1844.83 83.00
1845.51 81.82 1845.62 83.75 1846.33 83.04 1846.70 82.32 1847.01 82.99
1847.57 81.79 1848.03 82.31 1848.58 83.24 1848.90 82.34 1849.19 83.01
1850.03 83.02 1850.21 81.25 1850.57 81.56 1850.62 83.05 1851.52 83.04
1851.58 81.85 1852.53 81.20 1852.76 83.03 1853.52 81.87 1853.57 83.28
1853.96 83.81 1853.99 82.34 1854.68 82.31 1854.96 83.09 1855.58 83.11
1855.62 81.86 1856.59 81.73 1856.66 83.75 1857.13 83.01 1857.59 82.33
1858.56 83.45 1858.64 81.88 1858.96 83.75 1859.09 82.39 1859.59 83.05
1859.62 81.47 1860.77 83.75 1860.96 81.72 1861.56 81.71 1861.58 83.20
1862.27 83.02 1862.66 81.33 1862.91 83.75 1863.46 82.36 1864.20 82.34
1864.53 83.14 1864.79 82.36 1865.36 83.96 1865.65 81.33 1865.96 83.17
1866.58 83.28 1866.65 81.85 1867.65 83.97 1867.70 82.30 1868.60 81.39
1868.67 83.02 1869.55 83.05 1869.59 82.03 1870.16 81.98 1870.17 82.98
1870.65 82.27 1870.88 83.04 1871.97 83.75 1872.09 82.23 1872.54 83.09
1872.63 81.53 1873.08 83.06 1873.61 81.18 1874.17 83.75 1874.51 81.68
1874.76 83.75 1875.04 82.28 1875.54 81.52 1875.62 83.04 1876.50 82.25
1876.65 83.35 1877.62 81.38 1877.68 83.24 1878.22 83.04 1878.68 82.28
1878.96 81.99 1879.67 83.34 1879.67 83.34 1880.16 82.28 1880.62 81.79
1881.16 83.32 1881.62 82.35 1881.86 83.05 1882.68 81.75 1882.77 83.75
1883.29 83.04 1883.69 81.48 1883.96 83.12 1884.58 81.48 1885.17 83.75
1885.21 82.36 1885.76 81.56 1886.24 83.03 1886.91 83.03 1886.96 81.69
1887.57 83.12 1887.60 81.90 1888.57 83.07 1888.63 81.31 1889.52 82.34
1889.67 83.08 1889.90 83.01 1890.33 82.32 1890.69 83.75 1891.01 82.33
1891.59 83.09 1891.76 82.30 1892.60 83.25 1892.69 81.78 1893.59 81.52
1893.69 83.05 1894.44 82.35 1894.62 83.93 1895.59 83.09 1895.63 81.77
1895.63 81.77 1895.66 83.75 1896.83 82.35 1897.12 83.01 1897.71 81.73
1897.78 83.00 1898.61 83.30 1898.71 81.44 1899.26 82.97 1899.63 82.37
1900.61 81.76 1900.66 83.75 1900.67 83.75 1901.09 82.37 1901.56 81.79
1901.64 83.11 1902.96 83.02 1903.17 81.27 1903.63 81.86 1903.66 83.11
1904.39 83.02 1904.62 82.34 1905.12 83.03 1905.51 82.35 1906.25 82.35
1906.53 83.06 1906.76 81.43 1906.77 83.75 1907.62 82.36 1907.96 83.08
1908.62 81.79 1908.65 83.20 1909.36 81.82 1909.69 83.98 1910.65 83.80
1910.68 81.29 1911.31 82.38 1911.57 83.08 1911.63 83.75 1912.08 82.30
1912.81 82.32 1913.06 83.12 1913.71 81.61 1913.83 82.99 1914.64 83.75
1914.70 81.63 1915.16 81.84 1915.24 83.03 1915.99 83.02 1916.62 82.05
1916.67 82.33 1916.73 83.27 1917.47 83.04 1917.73 81.34 1918.59 82.38
1918.68 83.98 1919.16 83.75 1919.96 82.34 1920.38 83.02 1920.67 82.35
1921.46 82.38 1921.57 83.75 1921.73 83.02 1921.76 81.59 1922.62 83.03
1922.67 81.60 1923.73 81.55 1923.97 83.01 1924.68 81.51 1924.72 83.50
1925.51 83.75 1925.76 82.29 1926.11 83.75 1926.66 81.57 1926.77 83.75
1927.19 82.34 1927.66 83.24 1927.76 81.99 1928.73 82.36 1928.97 83.75
1929.57 83.75 1929.74 81.47 1930.74 83.00 1930.85 82.30 1931.56 82.28
1931.74 83.11 1932.01 81.62 1932.59 83.01 1932.67 83.75 1932.99 82.34
1933.69 84.05 1933.80 82.31 1934.70 81.60 1934.97 83.75 1935.57 83.75
1935.69 81.46 1936.69 83.92 1936.78 81.84 1936.79 82.07 1937.63 46.93
1937.63 46.93 1938.47 10.53 1938.47 10.53 1939.16 4.67 1939.65 6.17
1939.70 4.93 1940.37 6.25 1940.73 4.85 1941.57 6.25 1941.83 2.55 1941.84
2.63 1942.56 -6.25 1942.77 -5.00 1942.86 -6.25 1943.70 -5.00 1943.78
-6.25 1944.66 -4.67 1944.78 -5.70 1945.66 -6.10 1945.70 -4.67 1946.68
-4.82 1946.72 -6.25 1947.57 -6.25 1947.67 -4.89 1947.96 -6.25 1948.18
-5.30 1948.77 -4.65 1949.08 -5.63 1949.71 -4.81 1949.79 -6.25 1950.51
-4.63 1950.77 -6.25 1951.72 -6.00 1951.78 -5.00 1952.36 -4.73 1952.66
-6.19 1952.76 -6.03 1953.36 -4.65 1953.68 -4.59 1953.79 -5.64 1954.69
-6.25 1954.72 -4.68 1955.69 -4.68 1955.77 -6.25 1956.57 -6.25 1956.71
-4.81 1957.17 -6.25 1957.72 -4.64 1957.96 -6.25 1958.36 -4.86 1958.67
-6.32 1958.76 -4.86 1959.96 -4.59 1960.17 -6.12 1960.56 -4.61 1960.73
-6.65 1961.69 -6.11 1961.75 -4.62 1962.37 -6.25 1962.76 -4.58 1963.36
-4.58 1963.57 -6.25 1963.69 -4.86 1963.73 -6.25 1964.76 -4.91 1964.79
-6.21 1965.36 -6.25 1965.68 -4.86 1966.68 -4.60 1966.81 -6.05 1967.66
-6.25 1967.79 -5.30 1968.56 -4.55 1968.71 -6.03 1968.77 -4.67 1969.17
-6.25 1969.71 -6.15 1969.74 -4.63 1970.71 -4.63 1970.76 -6.79 1971.36
-6.25 1971.70 -4.61 1972.73 -4.82 1972.77 -6.59 1973.37 -6.25 1973.71
-4.60 1973.76 -4.66 1973.80 -5.75 1974.74 -4.80 1975.34 -5.64 1975.71
-4.60 1975.73 -6.25 1976.72 -6.69 1976.78 -4.65 1977.11 -6.25 1977.36
-5.00 1978.77 -6.21 1978.78 -5.00 1978.80 -4.87 1979.43 -5.62 1979.79
-4.63 1979.82 -6.25 1980.86 -6.14 1980.88 -4.64 1981.77 -6.29 1981.80
-4.83 1982.51 -4.83 1982.82 -6.25 1983.17 -5.00 1983.74 -6.25 1984.10
-5.64 1984.56 -4.58 1984.80 -6.09 1984.96 -4.60 1985.56 -4.60 1985.66
-6.25 1986.41 -5.62 1986.73 -4.83 1987.76 -6.15 1987.77 -4.87 1988.57
-6.25 1988.81 -4.67 1989.16 -6.25 1989.36 -4.83 1989.79 -6.25 1989.87
-5.33 1990.79 -4.47 1991.37 -6.25 1991.80 -5.98 1991.82 -4.79 1992.72
-4.83 1992.82 -6.09 1993.17 -5.00 1993.73 -6.33 1994.37 -6.25 1994.74
-4.59 1994.75 -4.59 1995.37 -6.25 1995.79 -6.15 1996.13 -5.28 1996.74
-4.63 1996.83 -6.10 1997.28 -5.65 1997.73 -4.65 1998.78 -4.69 1998.85
-5.63 1998.97 -6.25 1999.56 -4.86 1999.82 -4.85 1999.84 -6.25 2000.76
-5.19 2000.84 -6.33 2001.75 -6.04 2001.79 -4.84 2002.61 -4.62 2002.79
-6.29 2003.31 -6.25 2003.56 -4.80 2004.77 -4.83 2004.81 -6.62 2004.83
-6.25 2005.58 -5.29 2005.79 -4.62 2005.87 -6.13 2006.79 -4.62 2006.97
-6.25 2007.76 -4.63 2007.85 -6.29 2008.81 -6.13 2008.86 -4.53 2009.31
-5.30 2009.37 -6.25 2010.23 -5.64 2010.36 -5.00 2010.78 -4.65 2010.97
-6.25 2011.56 -6.25 2011.79 -5.00 2012.84 -4.90 2013.11 -6.25 2013.81
-4.83 2013.96 -6.25 2014.56 -6.25 2014.79 -4.83 2014.97 -6.25 2015.16
-4.62 2015.79 -4.84 2016.16 -6.25 2016.78 -6.25 2017.36 -5.00 2017.82
-4.61 2017.87 -6.25 2018.78 -5.89 2018.91 -4.66 2019.17 -6.25 2019.75
-4.84 2020.31 -4.88 2020.56 -6.17 2020.83 -6.25 2021.56 -4.90 2021.88
-6.25 2021.98 -5.33 2022.77 -6.71 2022.87 -4.88 2023.41 -6.18 2023.88
-4.85 2024.77 -4.83 2024.88 -6.25 2025.51 -6.25 2025.79 -4.87 2025.88
-6.08 2026.46 -4.60 2026.79 -6.25 2026.96 -4.60 2027.84 -4.60 2028.16
-6.25 2028.56 -4.83 2028.83 -6.31 2029.41 -6.25 2029.87 -5.00 2030.37
-6.25 2030.81 -4.89 2030.97 -5.00 2031.56 -6.25 2031.87 -4.84 2031.97
-6.25 2032.84 -4.76 2033.17 -6.25 2033.46 -6.25 2034.11 -4.86 2034.36
-4.83 2034.83 -6.25 2035.57 -6.25 2035.78 -4.82 2036.06 -4.84 2036.32
-5.63 2036.79 -4.59 2037.16 -6.25 2037.76 -4.60 2037.85 -6.13 2038.90
-6.74 2039.21 -4.83 2039.84 -6.65 2039.89 -4.86 2040.76 -6.09 2040.90
-4.61 2040.97 -4.87 2041.01 -6.25 2041.89 -4.63 2041.91 -6.25 2042.82
-4.85 2042.91 -6.25 2043.56 -6.25 2043.91 -4.64 2044.56 -4.67 2044.91
-6.25 2045.36 -4.83 2045.80 -6.19 2046.57 -6.25 2046.80 -4.60 2046.87
-4.80 2046.91 -6.25 2047.76 -4.80 2047.92 -6.25 2048.57 -6.25 2048.86
-5.18 2049.56 -4.63 2049.57 -6.25 2050.80 -6.03 2050.83 -4.63 2051.17
-6.25 2051.81 -4.64 2051.92 -6.25 2052.56 -4.86 2052.85 -4.82 2052.92
-6.25 2053.71 -6.25 2054.06 -4.84 2054.86 -6.25 2054.90 -4.67 2055.57
-6.25 2055.96 -4.65 2056.82 -4.87 2056.83 -5.79 2056.96 -4.80 2057.56
-6.25 2057.91 -4.60 2058.36 -6.25 2058.83 -6.14 2058.93 -5.00 2059.76
-6.25 2059.90 -4.85 2060.87 -6.08 2060.91 -4.88 2061.36 -5.00 2061.88
-6.68 2061.96 -4.57 2062.56 -6.21 2062.84 -6.40 2062.93 -5.00 2063.77
-6.25 2063.92 -4.86 2064.84 -6.25 2065.01 -4.86 2065.83 -4.84 2065.93
-6.17 2066.87 -6.35 2066.93 -5.00 2067.37 -6.25 2067.71 -4.87 2067.84
-4.83 2068.31 -6.25 2068.83 -4.64 2068.89 -6.71 2069.84 -6.14 2069.85
-4.85 2070.89 -4.60 2070.97 -6.25 2071.36 -6.25 2071.88 -4.61 2072.31
-6.25 2072.84 -4.84 2072.89 -4.81 2073.17 -6.25 2073.95 -6.18 2074.16
-4.86 2074.84 -6.17 2074.90 -4.63 2075.85 -6.19 2075.95 -4.64 2076.56
-6.18 2076.85 -4.91 2077.73 -5.68 2077.90 -4.65 2077.92 -5.99 2077.93
-4.80 2078.89 -6.25 2079.26 -4.61 2079.85 -5.78 2079.95 -4.60 2080.56
-4.80 2080.77 -6.25 2081.36 -6.25 2081.94 -4.82 2082.17 -5.63 2082.85
-4.83 2082.96 -4.86 2083.55 -5.63 2083.88 -4.83 2084.51 -6.12 2084.76
-5.00 2084.88 -6.25 2085.87 -6.10 2085.97 -4.83 2086.57 -6.25 2086.91
-4.65 2087.17 -6.25 2087.88 -4.66 2088.65 -6.11 2088.66 -5.00 2088.85
-4.65 2089.26 -6.25 2089.88 -6.17 2090.16 -4.84 2090.89 -6.25 2090.94
-4.87 2091.77 -6.25 2091.91 -4.57 2092.37 -6.25 2092.87 -4.83 2093.53
-5.62 2093.81 -4.88 2093.97 -4.86 2093.99 -6.25 2094.87 -4.80 2094.93
-6.25 2095.85 -6.10 2095.93 -4.90 2096.93 -4.60 2096.97 -6.25 2097.86
-6.25 2097.90 -4.66 2098.17 -6.24 2098.77 -4.63 2098.93 -6.05 2099.56
-4.59 2099.96 -4.58 2100.01 -6.12 2100.99 -6.70 2101.02 -5.00 2101.56
-4.83 2101.99 -6.08 2102.37 -6.25 2102.95 -4.87 2103.86 -6.18 2103.91
-4.55 2103.98 -4.77 2104.77 -6.25 2104.90 -6.08 2104.99 -5.26 2105.89
-4.82 2106.00 -5.79 2106.56 -5.00 2106.99 -6.28 2107.56 -6.25 2107.99
-4.84 2108.89 -4.87 2108.98 -6.11 2109.01 -6.25 2109.16 -4.93 2109.97
-4.84 2110.37 -6.25 2110.86 -6.25 2111.26 -5.30 2111.57 -6.25 2111.94
-4.84 2113.01 -4.82 2113.16 -6.25 2113.94 -4.60 2114.00 -6.63 2114.56
-4.86 2114.87 -5.62 2114.91 -4.82 2114.98 -6.13 2115.95 -4.62 2116.01
-6.09 2116.91 -6.34 2117.36 -4.89 2117.61 -4.65 2117.64 -5.61 2118.98
-6.25 2119.03 -4.89 2119.16 -4.62 2119.76 -6.25 2119.94 -4.63 2120.02
-6.21 2121.03 -5.11 2121.37 -6.25 2121.92 -6.13 2122.00 -4.64 2122.76
-4.63 2123.01 -6.13 2123.93 -6.52 2124.00 -4.89 2124.25 -4.59 2124.30
-5.61 2124.95 -5.00 2125.76 -6.25 2126.17 -6.25 2126.56 -4.61 2126.76
-5.00 2126.97 -6.25 2127.65 -4.83 2128.07 -5.64 2128.38 -6.25 2129.03
-4.86 2129.61 -5.00 2129.97 -6.31 2130.03 -5.00 2130.83 -10.05 2130.83
-10.05 2131.36 -28.75 2131.75 -27.84 2131.86 -27.27 2132.66 -27.78
2132.94 -26.35 2133.51 -28.82 2133.86 -27.29 2134.20 -27.32 2134.98
-27.94 2135.62 -27.77 2135.87 -27.33 2135.99 -28.75 2136.05 -26.25
2136.96 -26.35 2137.16 -28.75 2137.63 -27.78 2138.03 -26.25 2139.03
-27.83 2139.05 -26.45 2139.66 -26.25 2140.04 -27.85 2140.31 -27.76
2140.36 -27.29 2140.99 -28.80 2141.01 -26.20 2141.84 -27.80 2141.99
-26.48 2142.67 -27.33 2143.43 -27.79 2143.43 -27.79 2144.00 -26.57
2144.61 -27.27 2144.63 -27.76 2145.27 -27.33 2145.87 -27.81 2146.01
-26.28 2146.14 -27.83 2147.56 -26.25 2147.59 -27.75 2148.01 -26.25
2148.25 -27.82 2148.49 -27.79 2149.29 -27.34 2149.57 -27.27 2150.13
-27.75 2150.55 -27.89 2150.56 -27.32 2151.06 -27.86 2151.54 -27.28
2152.05 -26.30 2152.51 -27.81 2152.97 -27.86 2153.12 -27.34 2153.64
-27.76 2153.87 -27.32 2154.46 -27.35 2155.08 -28.75 2155.56 -26.25
2155.77 -28.75 2156.03 -27.32 2156.85 -27.85 2156.87 -27.80 2157.05
-26.61 2157.85 -28.86 2158.37 -27.30 2158.73 -27.82 2158.76 -26.54
2159.50 -27.76 2159.98 -26.44 2160.41 -27.29 2160.98 -27.76 2161.13
-26.58 2161.34 -27.82 2162.63 -27.22 2162.73 -27.77 2162.90 -27.31
2163.37 -28.75 2163.97 -27.85 2164.10 -27.33 2164.70 -27.76 2164.73
-27.30 2165.79 -27.90 2165.80 -27.33 2166.17 -26.25 2166.18 -27.76
2167.12 -27.33 2167.50 -27.83 2168.00 -27.95 2168.36 -26.25 2169.03
-26.21 2169.08 -28.75 2169.48 -27.35 2169.80 -27.81 2170.98 -28.77
2171.05 -26.25 2171.65 -28.81 2171.99 -26.53 2172.11 -27.80 2172.64
-27.35 2173.33 -27.30 2173.64 -27.78 2174.05 -27.82 2174.09 -26.84
2175.03 -26.34 2175.05 -27.78 2175.57 -28.75 2176.09 -26.47 2176.35
-27.33 2176.99 -27.84 2177.41 -27.78 2177.70 -27.30 2178.09 -27.90
2178.65 -26.53 2179.01 -26.47 2179.36 -27.80 2180.05 -27.26 2180.30
-27.74 2180.43 -27.30 2181.00 -27.96 2181.36 -26.46 2181.92 -27.75
2182.15 -27.32 2182.83 -27.78 2183.21 -27.90 2183.73 -27.31 2183.84
-27.74 2183.93 -27.30 2184.60 -27.33 2185.16 -28.75 2185.70 -27.78
2186.14 -27.32 2186.54 -27.28 2187.00 -28.87 2187.25 -27.35 2187.74
-27.81 2187.95 -27.76 2188.22 -27.27 2189.21 -27.32 2189.57 -27.78
2190.11 -28.75 2190.32 -27.34 2191.20 -27.77 2191.31 -27.27 2191.62
-27.34 2192.07 -27.95 2192.19 -27.79 2192.89 -27.30 2193.07 -27.27
2193.71 -28.91 2194.56 -28.82 2194.57 -27.28 2194.93 -27.30 2195.30
-28.81 2195.53 -27.82 2196.05 -26.54 2196.62 -27.81 2196.77 -27.29
2197.46 -27.26 2197.61 -28.75 2198.21 -27.34 2198.81 -28.75 2199.08
-26.25 2199.09 -27.75 2199.87 -27.36 2200.04 -27.90 2201.01 -28.75
2201.29 -27.34 2201.67 -27.27 2201.68 -27.77 2202.41 -27.82 2202.82
-27.32 2203.49 -27.31 2203.50 -27.78 2203.97 -28.79 2204.06 -27.32
2205.03 -28.91 2205.41 -27.30 2206.15 -26.16 2206.17 -28.75 2206.82
-27.78 2206.96 -26.25 2207.96 -27.27 2207.99 -27.77 2208.88 -27.95
2208.91 -27.30 2209.13 -27.90 2209.16 -27.30 2210.01 -27.74 2210.49
-27.32 2210.67 -27.25 2211.44 -27.82 2211.48 -27.81 2212.25 -27.31
2212.35 -27.33 2212.89 -27.73 2213.48 -27.81 2213.76 -26.50 2214.13
-27.76 2214.36 -26.25 2214.88 -27.28 2215.40 -27.78 2215.77 -27.83
2216.05 -26.45 2216.51 -27.73 2216.90 -27.32 2217.41 -26.25 2218.17
-28.75 2218.36 -26.46 2218.86 -28.75 2219.56 -26.25 2219.77 -27.91
2220.07 -26.67 2220.10 -28.02 2221.50 -27.26 2221.51 -27.75 2221.97
-27.35 2222.17 -28.75 2222.41 -27.80 2223.21 -27.32 2223.91 -27.30
2223.92 -27.77 2224.12 -27.88 2224.28 -27.34 2225.16 -27.85 2225.31
-27.30 2225.96 -27.34 2226.13 -27.81 2227.12 -28.82 2227.42 -27.37
2227.70 -27.26 2227.71 -27.77 2228.27 -27.34 2228.75 -27.80 2229.18
-26.25 2229.39 -27.77 2230.11 -26.43 2230.79 -27.88 2230.79 -27.88
2231.12 -26.24 2232.37 -28.77 2232.38 -27.29 2232.60 -27.33 2233.17
-27.98 2233.44 -27.78 2233.88 -27.33 2234.19 -26.25 2234.64 -27.74
2235.13 -27.82 2235.37 -26.54 2236.04 -27.74 2236.07 -26.35 2236.84
-27.30 2237.30 -27.81 2238.17 -27.88 2238.30 -27.36 2239.13 -26.32
2239.14 -27.76 2239.23 -27.33 2239.73 -27.82 2240.13 -27.86 2240.49
-27.29 2241.44 -27.25 2241.47 -27.87 2241.83 -27.91 2241.94 -27.30
2242.76 -27.29 2243.19 -28.74 2243.97 -27.83 2244.14 -26.87 2244.94
-27.76 2245.01 -27.31 2245.33 -27.28 2245.89 -27.81 2246.21 -28.75
2246.71 -27.33 2247.23 -27.79 2247.50 -27.30 2248.21 -28.09 2248.41
-26.25 2248.87 -27.34 2249.19 -28.89 2249.42 -27.76 2249.69 -27.30
2250.17 -27.91 2250.82 -27.36 2251.04 -27.76 2251.79 -12.58 2251.79
-12.58 2252.13 -4.28 2252.76 -4.79 2253.13 -6.25 2254.11 -6.27 2254.15
-4.83 2254.76 -6.25 2255.12 -4.83 2255.21 -4.48 2255.76 -6.25 2256.45
-4.60 2256.71 -6.25 2257.17 -6.25 2257.20 -4.84 2257.97 -5.00 2258.23
-6.25 2259.13 -4.83 2259.33 -6.57 2259.35 -6.41 2260.18 -41.37 2260.19
-41.31 2261.03 -78.28 2261.03 -78.88 2261.45 -83.17 2262.15 -83.15
2262.20 -81.94 2263.11 -83.16 2263.18 -81.63 2263.71 -83.75 2264.05
-81.47 2264.91 -81.33 2265.23 -83.75 2265.23 -83.75 2265.60 -82.31
2266.17 -81.54 2266.65 -83.05 2267.13 -81.69 2267.23 -83.75 2267.96
-81.58 2268.19 -83.75 2269.20 -81.19 2269.41 -83.04 2269.56 -83.75
2270.22 -81.98 2270.36 -83.75 2270.68 -82.34 2271.13 -81.58 2271.56
-83.10 2272.27 -83.02 2272.73 -82.31 2273.14 -83.23 2273.17 -81.87
2273.76 -83.15 2274.30 -82.32 2275.18 -83.55 2275.24 -82.03 2275.67
-82.21 2275.93 -83.01 2276.19 -82.09 2276.68 -83.09 2277.15 -82.22
2277.19 -83.81 2278.18 -83.23 2278.23 -81.86 2279.24 -81.23 2279.51
-83.12 2280.17 -83.75 2280.25 -81.79 2280.40 -83.02 2281.10 -81.92
2281.26 -83.75 2281.35 -81.55 2282.23 -83.91 2282.28 -82.37 2283.13
-82.03 2283.21 -83.22 2284.00 -83.13 2284.14 -81.77 2284.69 -83.00
2285.15 -81.23 2286.17 -82.04 2286.19 -83.12 2286.50 -82.39 2286.77
-83.07 2287.26 -81.35 2287.61 -83.00 2288.20 -81.38 2288.30 -82.99
2288.97 -83.75 2289.21 -82.01 2290.17 -81.73 2290.40 -83.14 2291.03
-82.36 2291.21 -83.75 2291.71 -82.34 2291.90 -83.07 2292.17 -81.40
2292.74 -83.05 2293.22 -83.86 2293.76 -82.37 2293.99 -83.01 2294.23
-82.01 2294.65 -82.30 2294.76 -83.75 2295.87 -82.33 2296.25 -83.10
2296.56 -83.75 2296.67 -82.32 2297.23 -81.57 2297.70 -83.38 2298.13
-82.25 2298.28 -83.75 2299.27 -83.20 2299.61 -82.25 2300.21 -81.45
2300.28 -83.75 2301.05 -82.20 2301.27 -83.46 2301.35 -83.29 2301.40
-82.25 2302.23 -83.75 2302.28 -81.84 2303.25 -82.25 2303.53 -83.05
2304.23 -82.03 2304.27 -83.38 2304.96 -83.36 2305.23 -81.84 2305.71
-83.11 2306.00 -81.51 2306.93 -82.23 2307.17 -83.42 2307.23 -83.15
2307.65 -82.19 2308.23 -82.02 2308.29 -83.75 2309.25 -81.41 2309.32
-83.10 2309.76 -83.75 2309.85 -82.18 2310.81 -83.06 2311.29 -81.25
2312.23 -81.33 2312.25 -83.75 2312.28 -83.75 2312.77 -82.25 2313.36
-81.75 2313.71 -83.12 2314.35 -81.45 2314.46 -83.13 2314.96 -81.25
2315.17 -83.25 2315.73 -82.28 2315.89 -83.37 2316.51 -83.75 2317.11
-82.32 2317.34 -83.12 2317.85 -82.33 2318.20 -83.06 2318.25 -81.93
2319.05 -82.34 2319.52 -83.21 2320.21 -83.15 2320.25 -82.04 2320.96
-83.75 2321.36 -81.25 2322.01 -82.38 2322.32 -83.75 2322.56 -81.59
2323.16 -83.21 2323.22 -83.75 2323.67 -82.35 2324.20 -81.52 2324.56
-83.75 2325.20 -81.25 2325.27 -83.75 2325.86 -82.32 2326.09 -83.00
2326.84 -83.10 2327.15 -82.31 2328.00 -82.23 2328.22 -83.28 2328.32
-83.75 2328.73 -82.34 2329.32 -81.74 2329.75 -83.10 2330.32 -81.60
2330.47 -83.04 2331.16 -83.75 2331.21 -81.98 2331.62 -82.22 2331.86
-83.75 2332.77 -83.75 2333.23 -81.62 2333.27 -83.60 2333.33 -81.51
2334.32 -81.34 2334.86 -83.02 2335.31 -83.89 2335.33 -81.25 2336.28
-83.21 2336.55 -81.53 2337.27 -84.00 2337.37 -81.25 2337.66 -83.75
2338.17 -82.31 2338.33 -81.52 2339.08 -83.15 2339.16 -83.46 2339.33
-81.94 2340.36 -81.32 2340.37 -83.75 2340.96 -83.75 2341.33 -81.68
2342.23 -81.59 2342.33 -83.75 2343.25 -81.24 2343.27 -83.75 2343.98
-82.29 2344.17 -83.10 2344.31 -81.56 2344.36 -83.75 2345.23 -83.75
2345.76 -81.84 2346.30 -83.10 2346.33 -81.83 2346.93 -82.30 2347.16
-83.75 2347.66 -81.25 2347.91 -83.75 2348.59 -83.04 2349.07 -82.30
2349.25 -83.62 2349.76 -81.15 2350.09 -83.23 2350.51 -82.35 2351.11
-82.34 2351.35 -84.01 2352.33 -81.82 2352.36 -83.42 2353.00 -83.05
2353.43 -82.38 2353.53 -83.33 2353.54 -82.16 2354.31 -81.85 2354.35
-83.24 2355.26 -81.91 2355.91 -83.02 2356.20 -82.28 2356.51 -83.75
2357.27 -81.25 2357.32 -83.65 2357.65 -82.26 2358.11 -82.99 2358.86
-82.98 2359.11 -82.25 2359.36 -83.13 2359.85 -82.26 2360.29 -81.58
2360.87 -83.30 2361.31 -82.27 2361.60 -83.08 2362.37 -83.75 2362.56
-81.43 2363.26 -81.81 2363.31 -83.16 2363.76 -83.75 2364.30 -81.19
2364.46 -83.21 2364.99 -82.23 2365.21 -83.16 2365.25 -81.81 2366.43
-82.25 2366.63 -83.08 2367.17 -82.16 2367.26 -83.93 2367.96 -81.13
2368.21 -83.28 2368.64 -82.25 2368.87 -83.10 2369.56 -83.75 2369.80
-81.46 2370.76 -83.92 2370.81 -82.31 2371.36 -83.75 2371.57 -82.20
2371.96 -83.93 2372.37 -81.74 2373.25 -83.30 2373.33 -81.68 2373.77
-82.31 2373.95 -83.22 2374.51 -82.31 2374.97 -83.75 2375.96 -81.27
2375.97 -83.75 2376.79 -82.27 2376.86 -83.22 2377.43 -82.34 2377.63
-83.07 2378.33 -81.97 2378.39 -83.75 2379.13 -83.03 2379.29 -81.82
2379.57 -82.35 2379.96 -83.75 2380.41 -82.20 2380.43 -83.32 2381.28
-83.25 2381.32 -81.76 2382.65 -81.94 2382.73 -83.01 2383.36 -81.66
2383.39 -83.17 2384.14 -83.23 2384.31 -81.43 2384.81 -83.00 2385.23
-82.35 2385.63 -83.03 2385.95 -82.32 2386.26 -83.75 2386.97 -81.79
2387.16 -83.75 2387.30 -81.62 2388.31 -83.75 2388.40 -81.87 2388.77
-83.75 2388.83 -82.29 2389.59 -82.31 2389.89 -83.05 2390.41 -83.75
2390.56 -81.85 2391.32 -83.69 2391.40 -82.05 2392.39 -81.70 2392.76
-83.16 2393.26 -82.23 2393.38 -83.75 2394.30 -83.18 2394.37 -82.22
2395.32 -81.60 2395.37 -83.26 2395.71 -83.10 2396.19 -82.26 2396.40
-81.87 2396.41 -83.37 2397.32 -81.86 2397.37 -83.11 2398.36 -83.75
2398.43 -81.13 2399.40 -83.35 2399.45 -82.04 2400.09 -83.06 2400.34
-81.69 2400.63 -82.24 2400.83 -83.09 2401.49 -81.79 2401.54 -83.25
2402.36 -83.75 2402.46 -81.32 2403.45 -81.52 2403.79 -83.18 2404.36
-81.61 2404.45 -83.11 2404.96 -82.29 2405.23 -83.19 2405.59 -83.95
2405.75 -82.10 2406.41 -81.42 2406.64 -83.10 2407.39 -83.64 2407.45
-82.28 2408.67 -82.36 2408.80 -83.04 2409.36 -81.34 2409.47 -83.75
2409.83 -81.27 2410.39 -83.69 2410.79 -83.75 2410.81 -82.31 2411.83
-82.99 2412.09 -82.24 2412.39 -81.77 2412.43 -83.16 2413.35 -83.06
2413.57 -82.31 2413.99 -83.01 2414.46 -81.38 2415.34 -83.75 2415.40
-82.19 2416.01 -83.00 2416.38 -81.68 2416.48 -82.23 2416.76 -83.10
2417.41 -81.57 2417.49 -83.75 2418.46 -81.43 2418.48 -83.18 2418.99
-83.75 2419.40 -82.10 2420.33 -83.75 2420.41 -81.79 2420.66 -82.62
2421.49 -49.86 2421.50 -49.78 2422.33 -13.43 2422.34 -13.43 2422.67
-4.84 2423.46 -6.25 2423.49 -4.62 2424.19 -5.00 2424.38 -6.34 2425.43
-4.57 2425.53 -6.25 2426.38 -4.78 2426.45 -6.25 2426.68 -6.15 2426.69
-5.00 2427.40 -6.34 2428.19 -4.83 2428.45 -4.79 2428.80 -6.25 2429.40
-4.74 2429.50 -6.25 2430.33 -5.27 2430.46 -6.25 2431.44 -5.97 2431.47
-4.58 2432.19 -6.07 2432.38 -4.82 2432.50 -6.25 2432.99 -4.79 2433.45
-5.98 2433.79 -4.89 2434.29 -6.25 2434.49 -4.75 2435.43 -4.84 2435.50
-6.25 2435.79 -5.00 2436.49 -6.11 2437.40 -6.56 2437.44 -4.65 2437.47
-6.25 2437.51 -4.79 2438.39 -4.90 2438.44 -6.25 2439.50 -6.56 2439.78
-4.61 2440.45 -4.80 2440.51 -6.25 2441.49 -4.81 2441.51 -6.25 2441.74
-5.28 2442.19 -6.25 2442.51 -5.00 2442.79 -6.25 2443.47 -4.87 2443.50
-6.67 2444.43 -4.61 2444.51 -6.25 2445.23 -6.24 2445.46 -4.88 2446.42
-6.25 2446.45 -4.85 2446.98 -4.84 2447.49 -6.14 2447.79 -6.12 2447.79
-5.00 2448.41 -4.66 2448.53 -6.63 2449.50 -4.83 2449.52 -6.25 2450.43
-4.84 2450.79 -6.12 2451.13 -4.65 2451.43 -6.25 2452.39 -6.25 2452.43
-4.61 2452.59 -6.25 2453.31 -5.29 2453.43 -4.60 2453.45 -6.12 2454.47
-6.11 2454.48 -4.83 2455.48 -6.15 2455.51 -4.63 2455.99 -6.25 2456.41
-4.85 2456.78 -4.61 2457.53 -6.68 2457.79 -6.25 2458.18 -4.90 2458.49
-6.25 2459.19 -5.00 2459.48 -4.65 2459.63 -6.16 2460.44 -6.25 2460.49
-4.84 2460.99 -6.25 2461.03 -5.32 2461.99 -6.25 2462.65 5.49 2463.19
6.22 2463.43 4.88 2463.53 6.25 2463.98 4.65 2464.59 6.25 2464.79 4.84
2465.53 6.40 2465.63 4.66 2466.43 4.85 2466.53 6.25 2467.47 4.66 2467.51
6.25 2468.33 6.25 2468.45 4.60 2468.54 4.65 2468.59 6.25 2469.45 4.50
2469.59 6.25 2470.53 4.64 2470.73 6.25 2471.39 4.81 2471.68 6.25 2471.93
6.25 2472.49 4.81 2472.88 4.79 2473.52 6.62 2473.79 5.00 2474.39 6.25
2474.58 4.65 2475.19 6.25 2475.45 4.77 2475.51 6.25 2476.47 6.18 2476.54
4.69 2477.47 6.19 2477.58 4.63 2478.46 4.70 2478.55 6.38 2478.79 6.25
2479.38 4.89 2479.46 4.82 2479.59 6.25 2480.46 6.74 2480.58 4.86 2481.23
6.25 2481.48 4.89 2482.52 4.63 2482.56 6.71 2483.43 6.08 2483.51 4.63
2484.19 5.00 2484.48 6.12 2484.53 6.15 2484.58 4.63 2485.39 6.25 2485.99
5.00 2486.48 4.53 2486.59 6.25 2487.19 6.25 2487.38 4.84 2488.46 4.64
2488.69 5.67 2488.99 6.25 2489.33 4.61 2489.69 6.25 2490.18 4.80 2490.51
4.64 2491.19 6.25 2491.49 5.29 2491.59 6.12 2492.53 6.25 2492.79 4.65
2492.99 6.25 2493.19 5.32 2493.99 4.65 2494.51 6.25 2494.59 4.67 2494.59
6.25 2495.59 6.58 2495.79 4.81 2496.47 4.84 2496.55 6.25 2497.53 4.69
2497.58 6.63 2498.19 4.65 2498.38 6.25 2498.99 6.25 2499.56 4.84 2499.78
4.93 2499.99 6.25 2500.49 4.81 2500.52 6.25 2501.50 4.63 2501.56 6.25
2502.14 6.25 2502.50 4.63 2503.38 5.00 2503.55 6.62 2504.50 6.00 2504.55
4.82 2504.66 5.32 2505.19 6.25 2505.51 6.25 2505.56 4.64 2506.51 4.94
2506.54 6.40 2507.55 4.64 2507.60 6.58 2508.18 4.84 2508.51 6.25 2509.39
6.25 2509.60 4.75 2509.79 6.25 2510.39 5.00 2510.56 6.82 2510.78 4.81
2511.53 4.87 2511.57 6.14 2512.39 5.00 2512.51 6.13 2513.19 6.25 2513.60
5.27 2514.39 5.00 2514.60 6.68 2514.80 5.62 2515.56 4.63 2515.79 4.81
2515.99 5.64 2516.51 6.60 2516.64 5.34 2517.53 6.25 2517.73 4.67 2518.61
4.64 2518.63 6.25 2518.99 6.25 2519.61 4.54 2519.79 6.25 2520.55 4.64
2521.13 6.25 2521.39 4.82 2521.66 6.64 2521.99 4.62 2522.63 6.17 2522.99
5.00 2523.52 6.13 2523.53 4.80 2524.19 6.25 2524.63 4.81 2525.52 4.82
2525.64 6.31 2525.93 6.25 2526.03 5.32 2526.61 4.79 2526.64 6.25 2527.53
6.40 2527.56 4.84 2528.19 5.00 2528.57 6.70 2529.39 6.25 2529.68 4.63
2530.28 6.25 2530.63 4.83 2530.79 6.25 2531.41 5.34 2531.56 6.25 2531.99
5.00 2532.55 6.25 2532.60 4.82 2533.54 4.80 2533.68 6.25 2534.19 4.91
2534.55 6.13 2535.13 4.65 2535.40 6.25 2535.79 6.25 2536.52 4.66 2536.63
4.63 2536.65 6.25 2537.64 4.65 2537.79 6.25 2538.63 4.80 2538.99 6.25
2539.38 4.62 2539.59 6.13 2539.99 5.00 2540.33 6.25 2541.38 4.90 2541.60
5.89 2541.79 6.25 2542.13 4.83 2542.61 6.25 2542.99 4.68 2543.55 6.34
2543.61 5.00 2544.56 4.84 2544.60 6.71 2545.13 6.25 2545.61 4.62 2546.19
4.79 2546.39 6.25 2546.99 6.25 2547.39 5.00 2547.61 4.63 2547.68 6.25
2548.61 4.80 2548.68 6.25 2549.19 6.25 2549.65 4.79 2550.19 6.25 2550.57
5.00 2551.19 6.25 2551.53 4.65 2551.99 6.25 2552.38 4.83 2552.56 4.89
2552.66 6.67 2553.57 4.66 2553.99 6.25 2554.66 4.84 2555.03 6.25 2555.18
4.84 2555.68 6.17 2555.93 6.25 2555.99 4.63 2556.83 5.63 2557.56 3.05
2557.58 3.05 2558.19 -6.25 2558.58 -4.56 2558.99 -6.25 2559.39 -5.63
2559.67 -4.91 2560.20 -6.25 2560.58 -4.92 2561.66 -4.68 2561.69 -6.25
2562.46 -5.63 2562.59 -4.80 2562.79 -6.25 2563.28 -4.92 2563.65 -6.14
2564.19 -4.67 2564.39 -6.25 2564.98 -4.63 2565.33 -6.25 2565.67 -4.61
2565.99 -4.80 2566.59 -6.74 2567.59 -5.94 2567.65 -4.83 2567.66 -5.00
2567.79 -6.25 2568.60 -6.09 2568.63 -4.59 2569.66 -6.25 2569.71 -4.84
2570.63 -4.66 2570.79 -6.25 2571.39 -6.25 2571.65 -4.91 2571.98 -6.14
2572.33 -4.84 2572.98 -4.89 2573.19 -6.25 2573.70 -6.38 2573.71 -5.00
2574.70 -6.00 2575.19 5.00 2575.23 4.20 2575.65 6.30 2576.63 6.25 2576.70
4.91 2577.69 4.84 2577.71 5.79 2577.78 4.84 2578.39 6.25 2578.59 4.66
2578.79 6.25 2579.70 6.14 2579.99 4.82 2580.33 6.19 2580.63 4.83 2581.34
5.32 2581.81 6.25 2582.59 6.11 2582.61 4.79 2583.33 4.64 2583.38 5.63
2583.63 4.64 2583.73 6.25 2584.70 4.81 2584.72 6.25 2585.59 6.25 2586.08
4.66 2586.70 4.85 2586.79 6.25 2587.61 6.65 2587.71 4.85 2587.99 6.25
2588.63 5.27 2588.79 6.25 2589.13 4.89 2589.71 6.15 2589.98 4.84 2590.61
4.89 2590.73 6.25 2591.63 6.17 2591.73 4.63 2592.59 6.15 2592.85 3.36
2592.86 3.83 2593.20 -6.02 2593.71 -6.35 2594.38 -4.77 2594.75 -6.25
2595.18 -4.84 2595.79 -6.25 2596.18 -4.92 2596.38 -4.80 2596.75 -6.25
2597.38 -4.62 2597.61 -6.15 2597.99 -6.25 2598.08 -4.81 2598.99 -4.88
2599.28 -6.25 2599.63 -6.27 2599.66 -5.00 2600.48 -5.00 2600.68 -6.15
2601.39 -6.25 2601.74 -4.64 2602.59 -6.25 2602.64 -4.61 2603.19 -6.25
2603.65 -4.59 2603.78 -4.80 2604.38 -6.00 2604.69 -4.84 2605.28 -6.25
2605.64 -4.83 2605.73 -6.60 2606.70 -4.84 2606.79 -6.25 2607.38 -6.08
2607.65 -4.84 2607.99 -6.25 2608.73 -5.00 2608.88 -6.25 2609.63 -4.63
2609.66 -6.25 2610.49 -3.20 2610.50 -2.57 2610.98 7.13 2611.43 5.66
2611.58 4.59 2612.48 6.25 2612.65 4.83 2613.39 6.25 2613.75 4.62 2614.59
6.12 2614.63 4.64 2614.70 4.89 2614.78 6.06 2615.63 6.25 2615.74 4.60
2616.66 4.61 2616.79 6.25 2617.66 6.25 2617.88 5.00 2618.73 4.79 2618.76
6.57 2618.99 6.25 2619.71 4.64 2619.79 6.25 2619.83 4.81 2620.71 4.66
2620.79 6.25 2621.99 4.62 2622.19 6.25 2622.75 6.05 2622.98 4.64 2623.66
4.65 2623.69 6.25 2624.19 6.11 2624.19 5.00 2624.99 6.25 2625.58 4.82
2625.75 6.06 2625.98 4.84 2626.58 4.81 2626.67 6.08 2627.66 6.02 2627.71
4.61 2628.39 6.12 2628.78 4.72 2628.98 6.25 2629.79 -6.25 2630.18 -5.04
2630.19 -6.25 2630.77 -6.08 2631.19 -4.83 2631.69 -6.10 2631.89 -5.30
2632.75 -4.90 2632.99 -6.25 2633.72 -6.10 2633.79 -4.61 2634.50 -5.62
2634.77 -4.63 2634.98 -4.84 2635.19 -5.63 2635.70 -4.85 2635.79 -6.25
2636.77 -6.25 2636.98 -4.66 2637.58 -4.82 2637.79 -6.25 2638.74 -4.62
2638.98 -6.03 2639.78 -6.14 2639.79 -4.80 2640.15 -5.62 2640.43 -4.81
2640.80 -6.25 2641.38 -4.82 2641.58 -4.86 2641.85 -6.15 2642.75 -5.00
2642.99 -6.25 2643.38 -4.60 2644.01 -5.62 2644.73 -6.65 2644.76 -4.65
2645.33 -6.12 2645.75 -4.65 2646.53 -6.25 2646.59 -4.85 2646.79 -4.85
2646.81 -6.25 2647.48 -6.25 2647.71 -4.87 2648.58 -6.15 2649.13 3.16
2649.15 3.21 2649.39 6.25 2650.59 4.67 2650.73 6.14 2650.88 4.65 2651.30
5.64 2651.73 5.00 2652.39 6.25 2652.72 6.29 2652.81 4.67 2653.59 6.25
2653.80 4.66 2654.39 6.25 2654.79 4.59 2655.58 4.61 2655.83 6.13 2656.38
4.64 2656.39 6.25 2656.73 6.17 2656.75 4.85 2657.72 4.88 2657.76 6.35
2658.73 4.81 2659.19 6.14 2659.81 6.49 2659.98 4.86 2660.33 6.25 2660.79
4.80 2660.93 4.84 2660.99 6.25 2661.84 6.25 2662.18 4.81 2662.77 4.85
2662.83 6.42 2663.81 4.67 2663.99 6.25 2664.28 6.25 2664.75 4.84 2665.19
4.81 2665.82 6.15 2665.99 6.25 2666.75 4.81 2667.39 6.01 2667.39 5.00
2667.77 6.13 2668.28 4.81 2668.78 4.47 2669.19 6.25 2669.75 4.67 2669.99
6.25 2670.73 4.69 2670.83 6.25 2671.28 4.81 2671.79 6.31 2671.85 6.25
2672.27 5.31 2672.74 4.85 2672.82 6.59 2673.83 4.67 2673.85 6.25 2674.73
6.71 2674.98 4.70 2675.59 6.25 2675.84 4.82 2676.74 6.09 2676.76 4.62
2677.18 4.80 2677.43 6.19 2677.75 4.67 2677.85 6.33 2678.69 6.25 2678.85
4.65 2679.39 6.25 2679.75 4.67 2680.22 5.33 2680.85 6.25 2681.76 4.81
2681.86 6.25 2681.98 4.67 2682.59 6.25 2682.81 5.00 2683.18 6.27 2683.79
6.63 2684.19 4.90 2684.59 6.25 2685.08 4.65 2685.81 6.15 2685.85 4.67
2686.76 4.81 2686.81 5.90 2687.19 5.91 2687.77 -6.77 2687.78 -6.77
2687.82 -5.00 2688.79 -6.28 2688.83 -4.83 2689.77 -4.89 2689.81 -6.31
2690.39 -6.25 2690.87 -4.66 2691.76 -6.15 2691.85 -4.64 2692.33 -4.62
2692.59 -6.25 2692.83 -4.66 2692.89 -6.25 2694.19 -6.25 2694.38 -4.65
2694.58 -4.59 2694.83 -6.25 2695.38 -4.83 2695.99 -6.25 2696.33 -6.25
2696.81 -4.81 2697.59 -5.00 2697.79 -6.69 2697.87 -4.88 2698.18 -6.09
2698.88 -4.79 2698.89 -6.25 2699.59 -6.25 2699.99 -5.00 2700.80 -4.63
2700.89 -6.38 2701.39 -6.25 2701.89 -4.87 2702.59 -6.25 2702.86 -4.86
2703.59 -6.25 2703.73 -4.35 2703.74 -4.00 2704.38 6.63 2704.89 6.25
2705.38 4.91 2705.88 6.14 2705.98 4.81 2706.59 5.00 2706.99 6.25 2707.79
6.72 2707.89 4.82 2708.18 4.89 2708.27 5.63 2708.83 4.63 2709.08 6.25
2709.82 4.62 2710.45 5.63 2710.83 4.68 2710.89 6.56 2711.81 4.67 2711.85
6.12 2712.69 5.31 2712.79 6.40 2713.33 6.25 2713.79 4.68 2713.89 6.25
2713.98 4.66 2714.81 5.00 2715.39 6.25 2715.80 6.70 2715.89 4.81 2716.86
6.25 2716.98 4.63 2717.85 4.71 2717.90 6.78 2718.18 5.68 2718.85 -6.71
2718.86 -6.71 2719.58 -4.95 2719.84 -4.67 2720.38 -6.13 2720.81 -6.34
2720.90 -4.62 2721.59 -6.25 2721.88 -4.68 2722.43 -6.25 2722.98 -4.78
2723.80 -5.64 2723.84 -4.62 2723.98 -4.86 2724.59 -6.25 2724.79 -4.83
2724.82 -6.25 2725.81 -4.61 2725.93 -6.25 2726.80 -4.75 2726.90 -6.25
2727.39 -6.25 2727.85 -4.76 2728.59 -6.25 2728.83 -4.60 2729.38 -6.11
2729.39 -5.00 2729.78 -4.61 2730.13 -6.25 2730.84 -4.61 2731.26 -5.64
2731.91 -6.24 2732.18 -4.81 2732.84 -4.88 2732.93 -6.25 2733.43 -6.25
2733.82 -4.85 2733.98 -4.63 2734.59 -6.25 2734.83 -5.93 2735.63 5.76
2735.91 6.22 2735.93 4.74 2736.83 4.81 2736.89 6.25 2737.39 6.25 2737.98
4.64 2738.88 6.72 2738.93 5.00 2739.19 6.25 2739.78 4.89 2739.93 4.62
2740.39 6.12 2740.78 6.18 2740.79 5.00 2741.58 4.66 2741.84 6.56 2742.58
6.13 2742.85 4.84 2743.39 6.25 2743.68 4.66 2744.38 4.67 2744.59 6.25
2744.94 6.61 2744.99 5.00 2745.94 4.79 2745.99 6.25 2746.59 6.25 2746.89
4.83 2747.78 4.88 2747.99 6.25 2748.28 6.25 2748.59 4.82 2749.85 6.58
2749.90 4.67 2750.08 4.66 2750.33 6.25 2750.91 6.25 2751.18 4.92 2751.78
4.82 2751.86 6.11 2752.90 6.25 2753.30 1.08 2753.30 1.08 2753.90 -6.45
2754.39 -5.00 2754.59 -6.25 2755.28 -4.78 2755.79 -6.25 2755.88 -4.80
2755.96 -6.25 2756.88 -4.66 2757.33 -6.25 2757.86 -4.72 2758.28 -6.25
2758.79 -6.25 2758.95 -4.60 2759.19 -6.25 2759.93 -4.63 2760.59 -6.25
2760.85 -4.81 2760.90 -4.78 2760.95 -6.69 2761.88 -6.25 2761.99 -4.82
2762.79 -6.25 2762.83 -4.59 2763.39 -6.25 2763.96 -4.55 2764.90 -6.69
2764.96 -4.60 2765.18 -4.77 2765.79 -6.25 2765.90 -6.25 2765.99 -5.00
2766.92 -4.62 2766.97 -6.12 2767.58 -4.84 2767.91 -6.25 2768.58 -4.64
2768.59 -6.25 2769.78 -4.82 2769.79 -6.25 2770.58 -5.00 2770.59 -5.64
2771.39 -5.60 2771.76 -1.90 2771.79 -1.25 2772.48 6.25 2772.87 4.87
2772.93 6.45 2773.78 4.77 2773.91 6.25 2774.38 4.79 2774.89 6.40 2775.79
6.25 2775.96 4.81 2776.18 4.65 2776.43 6.25 2776.97 4.63 2777.59 6.25
2777.94 6.34 2777.96 4.85 2778.58 4.88 2778.59 6.25 2779.43 4.63 2779.58
5.61 2780.39 5.00 2780.94 6.33 2781.39 5.62 2781.58 4.79 2781.99 6.08
2782.38 4.81 2782.94 4.81 2783.18 6.25 2783.94 4.79 2783.95 5.76 2784.58
4.83 2784.94 6.34 2785.23 5.69 2786.05 27.93 2786.16 28.01 2786.65
27.30 2787.08 26.23 2787.72 27.77 2787.79 27.37 2788.00 27.96 2788.83
27.28 2788.88 27.75 2789.96 26.38 2790.24 27.79 2790.41 27.80 2790.96
26.16 2791.71 27.76 2791.91 26.47 2791.99 27.92 2792.33 27.37 2792.79
27.76 2793.55 27.33 2793.89 27.35 2794.36 27.82 2794.85 27.36 2794.92
27.92 2795.30 27.30 2795.97 27.78 2796.66 27.82 2796.78 26.35 2797.08
27.78 2797.48 26.25 2797.93 28.78 2797.97 26.25 2798.78 26.54 2798.97
27.79 2799.74 27.75 2800.34 24.77 2800.54 19.60 2801.04 28.32 2801.51
27.32 2801.92 28.82 2802.53 26.20 2802.80 27.77 2803.19 28.75 2803.31
27.35 2803.84 27.83 2804.40 27.27 2804.68 27.27 2805.12 27.81 2805.93
27.85 2806.21 27.37 2806.88 26.25 2807.04 27.76 2807.39 27.36 2807.73
28.75 2808.00 29.02 2808.52 27.28 2808.95 27.90 2809.33 26.51 2809.99
27.94 2810.28 27.33 2811.02 28.87 2811.09 27.28 2811.48 27.33 2812.00
28.95 2812.13 27.80 2812.89 27.27 2813.19 26.25 2813.45 27.77 2814.05
26.70 2814.23 27.80 2815.04 27.75 2815.22 27.29 2815.98 27.83 2816.05
26.50 2817.05 28.75 2817.08 27.33 2817.50 27.73 2817.79 27.30 2818.01
27.58 2818.81 -1.02 2818.82 -1.54 2819.64 -28.11 2819.95 -28.09 2820.03
-26.63 2820.58 -27.35 2821.03 -28.75 2821.41 -27.82 2822.11 -27.32
2822.88 -27.16 2822.91 -27.82 2823.22 -27.93 2823.38 -26.20 2823.96
-27.83 2824.07 -26.33 2824.70 -27.28 2825.53 -27.79 2825.83 -27.78
2826.01 -26.46 2826.96 -26.30 2827.08 -27.74 2827.80 -27.86 2828.00
-26.31 2828.18 -27.76 2828.87 -27.29 2829.02 -28.80 2829.06 -27.26
2830.02 -26.30 2830.13 -27.81 2831.01 -26.26 2831.38 -27.74 2832.00
-26.67 2832.13 -27.81 2832.40 -27.79 2832.88 -27.31 2833.78 -27.26
2833.80 -27.87 2834.00 -26.42 2834.11 -27.91 2835.25 -27.29 2835.26
-27.78 2836.08 -27.84 2836.19 -26.25 2836.51 -27.87 2837.29 -25.45
2837.30 -25.34 2838.14 11.99 2838.14 11.99 2838.74 28.38 2839.04 28.45
2839.58 26.39 2840.10 27.76 2840.33 27.26 2840.72 27.33 2841.47 27.85
2841.73 27.90 2842.20 27.32 2842.39 27.31 2842.84 27.81 2843.62 27.85
2843.99 26.31 2844.43 27.29 2844.75 27.76 2844.89 27.78 2845.03 26.43
2845.74 27.31 2845.99 27.92 2847.15 27.29 2847.34 27.79 2848.00 27.85
2848.04 26.31 2848.33 27.81 2848.83 27.26 2849.33 27.27 2849.83 27.77
2850.05 28.94 2850.60 27.35 2850.86 27.76 2850.91 27.29 2852.00 27.88
2852.10 26.25 2852.49 27.77 2852.89 27.31 2853.86 27.27 2853.93 27.75
2854.19 26.27 2854.55 27.81 2855.35 27.76 2855.72 27.30 2855.86 27.32
2856.59 27.78 2856.63 27.74 2857.46 -3.50 2857.46 -3.50 2858.11 -28.16
2858.33 -28.09 2859.11 -26.25 2859.65 -27.76 2859.68 -26.49 2860.01
-27.85 2860.05 -26.37 2861.35 -27.75 2861.38 -26.42 2862.04 -26.52
2862.06 -28.77 2862.59 -28.75 2863.33 -27.32 2863.78 -28.81 2864.11
-26.34 2864.56 -27.82 2864.83 -27.36 2865.18 -28.87 2865.64 -27.32
2865.92 -27.33 2866.50 -27.81 2867.39 -28.84 2867.44 -27.35 2867.79
-28.75 2868.27 -27.31 2868.41 -27.35 2869.02 -27.83 2869.58 -28.87
2869.85 -27.33 2870.44 -27.30 2870.86 -27.82 2871.01 -28.75 2871.72
-27.31 2871.93 -27.76 2872.13 -26.25 2873.04 -26.67 2873.15 -27.91
2873.53 -27.81 2873.95 -27.31 2874.70 -27.27 2875.08 -27.88 2875.41
-27.83 2875.92 -25.12 2875.95 -25.26 2876.76 10.96 2876.78 10.87 2877.34
28.16 2877.62 27.93 2878.30 27.35 2878.66 27.33 2879.18 28.87 2879.69
27.33 2879.91 27.87 2880.20 27.82 2880.59 26.25 2881.09 28.86 2881.33
26.25 2882.23 28.75 2882.38 27.32 2883.11 27.31 2883.14 27.85 2883.74
27.35 2884.04 28.12 2884.58 28.90 2885.11 26.25 2885.24 27.32 2885.61
27.79 2886.14 27.88 2886.68 27.35 2887.18 27.30 2887.66 27.75 2887.88
27.35 2888.48 27.79 2888.81 27.81 2889.26 27.26 2890.04 26.39 2890.16
27.75 2890.73 26.53 2891.05 27.81 2891.09 26.39 2891.39 27.74 2892.19
26.25 2892.74 27.79 2892.80 27.80 2893.26 27.31 2893.82 27.75 2893.99
27.28 2894.79 27.79 2895.25 23.48 2895.26 23.49 2896.09 -10.55 2896.10
-10.55 2896.74 -28.30 2897.05 -27.99 2897.68 -27.27 2898.09 -28.75
2898.33 -27.34 2898.86 -27.84 2899.10 -26.55 2900.03 -27.76 2900.07
-26.44 2901.06 -26.68 2901.11 -27.95 2901.18 -26.51 2901.29 -27.78
2902.22 -27.28 2902.80 -27.81 2903.19 -28.75 2903.64 -27.31 2904.08
-27.78 2904.16 -26.68 2905.13 -26.42 2905.33 -27.87 2905.52 -27.83
2906.18 -26.18 2906.44 -27.80 2906.76 -27.30 2907.07 -28.87 2907.56
-27.36 2907.98 -27.77 2908.53 -27.32 2908.79 -26.25 2909.31 -27.82
2909.56 -27.85 2910.12 -26.58 2910.78 -28.75 2910.99 -27.30 2911.29
-27.28 2911.38 -27.88 2912.09 -27.82 2912.13 -26.62 2913.13 -28.79
2913.74 -11.02 2913.74 -11.02 2914.58 25.00 2914.58 25.12 2914.78 28.38
2916.09 29.07 2916.17 26.61 2916.33 27.89 2917.05 27.37 2917.13 26.24
2917.83 27.86 2918.08 26.42 2918.15 27.97 2918.83 27.84 2918.90 27.35
2920.17 27.81 2920.39 26.25 2921.15 27.84 2921.22 27.32 2921.60 27.25
2922.11 27.75 2922.15 26.39 2922.38 28.87 2923.10 28.91 2923.65 27.24
2923.85 27.26 2924.33 28.75 2925.11 28.90 2925.16 27.32 2925.53 28.75
2925.94 27.26 2926.82 27.79 2927.15 26.37 2927.19 27.85 2927.73 27.32
2928.33 27.32 2928.79 27.75 2929.13 26.27 2929.43 28.75 2929.78 26.26
2929.79 28.75 2930.66 27.32 2931.16 28.75 2931.49 27.79 2932.12 27.31
2932.78 26.30 2932.79 28.75 2933.42 27.34 2933.70 27.82 2934.01 27.75
2934.59 27.33 2934.99 26.25 2935.39 27.77 2936.12 27.86 2936.25 27.32
2937.06 27.33 2937.13 27.85 2937.41 27.36 2937.78 27.82 2938.17 26.29
2938.23 27.92 2939.36 27.33 2939.76 27.77 2940.13 28.01 2940.56 27.33
2941.19 28.78 2941.23 26.15 2941.59 27.33 2942.22 28.02 2942.33 28.03
2942.71 27.35 2943.38 26.25 2943.96 27.74 2944.18 26.29 2944.39 28.75
2945.14 28.88 2945.25 27.34 2946.20 26.85 2946.44 27.81 2946.78 28.75
2947.34 27.34 2947.60 27.32 2947.61 27.77 2948.20 26.25 2948.39 28.75
2949.15 28.75 2949.19 26.41 2950.06 27.33 2950.59 28.75 2951.24 26.26
2951.39 28.75 2951.83 27.31 2952.13 27.80 2952.44 27.32 2953.20 27.83
2953.32 27.80 2953.94 27.29 2954.38 28.75 2954.73 27.33 2955.61 27.79
2955.74 26.13 2955.74 26.13 2956.56 -8.12 2956.58 -8.75 2957.26 -28.75
2957.42 -28.01 2958.04 -27.38 2958.32 -27.77 2958.33 -27.28 2959.10
-27.38 2959.16 -28.75 2960.18 -27.89 2960.22 -26.25 2960.81 -27.30
2961.59 -27.82 2961.80 -27.81 2961.98 -26.30 2962.64 -27.77 2963.10
-27.29 2963.48 -27.29 2963.74 -27.86 2964.18 -27.89 2964.26 -26.50
2965.20 -26.26 2965.22 -28.78 2966.06 -27.85 2966.19 -26.30 2967.13
-27.80 2967.16 -26.47 2967.96 -27.84 2968.22 -26.58 2968.43 -27.32
2968.75 -27.79 2969.22 -28.86 2969.76 -27.32 2970.21 -26.53 2970.82
-27.82 2971.25 -28.84 2971.28 -26.42 2972.11 -27.28 2972.16 -28.87
2972.99 -27.82 2973.18 -26.30 2974.04 -27.30 2974.11 -27.76 2974.22
-27.32 2974.23 -28.75 2975.08 -27.80 2975.90 -24.73 2975.90 -24.73
2976.74 11.73 2976.74 11.73 2977.38 28.75 2977.63 27.86 2978.23 26.33
2978.56 27.77 2978.83 27.32 2979.89 27.34 2980.07 27.81 2980.19 26.71
2980.28 28.01 2981.29 27.76 2981.47 27.32 2981.84 27.33 2982.20 27.88
2982.68 27.77 2983.38 26.40 2983.70 27.32 2984.25 28.92 2984.53 26.33
2984.59 27.82 2985.27 27.76 2985.30 26.25 2985.98 27.32 2986.23 27.81
2987.22 28.75 2987.48 27.30 2988.21 28.88 2988.21 27.31 2988.54 27.36
2989.19 27.88 2989.34 27.76 2989.96 27.32 2990.21 28.75 2990.44 27.30
2991.20 27.91 2991.29 26.57 2991.98 27.31 2992.24 27.84 2993.28 26.48
2993.39 27.82 2994.16 27.27 2994.26 28.85 2994.49 27.74 2995.21 5.85
2995.24 6.25 2996.06 -18.52 2996.06 -18.52 2996.53 -28.75 2997.15 -27.36
2997.18 -28.97 2997.76 -27.80 2998.42 -27.34 2999.11 -27.27 2999.14
-27.78 2999.81 -26.25 3000.24 -28.90 3000.43 -27.78 3000.96 -27.29
3001.16 -27.33 3001.95 -27.84 3002.39 -28.82 3002.61 -27.34 3003.01
-26.25 3003.02 -27.79 3003.85 -26.62 3004.33 -28.83 3004.73 -27.34
3005.09 -27.83 3005.61 -26.25 3005.98 -27.83 3006.21 -28.96 3006.33
-26.40 3007.14 -27.77 3007.58 -27.29 3007.98 -27.27 3008.33 -27.84
3009.18 -27.34 3009.25 -27.83 3009.69 -27.26 3010.26 -27.83 3010.42
-27.35 3010.63 -27.84 3011.73 -27.77 3011.76 -27.28 3012.36 -27.83
3012.89 -11.99 3012.89 -11.99 3013.73 24.52 3013.73 24.52 3014.28 28.75
3014.98 27.36 3015.34 28.93 3015.71 26.33 3015.76 27.82 3016.37 26.25
3016.72 27.78 3017.26 26.50 3017.69 27.84 3017.98 27.79 3018.61 26.25
3019.33 27.76 3019.48 27.32 3020.28 28.84 3020.39 27.37 3020.53 27.33
3020.81 28.75 3021.31 28.79 3021.36 26.23 3022.32 27.97 3022.92 27.35
3023.10 27.31 3023.74 27.76 3024.02 27.35 3024.25 28.96 3024.72 27.78
3025.38 26.25 3025.52 27.35 3026.15 27.81 3026.41 27.79 3026.51 26.52
3027.22 27.76 3027.45 27.32 3028.04 27.29 3028.38 27.98 3029.37 27.87
3029.64 27.31 3030.32 27.98 3030.53 25.37 3030.53 25.37 3031.36 -11.16
3031.37 -10.12 3032.01 -28.75 3032.29 -28.15 3032.61 -26.25 3033.33
-26.55 3033.73 -27.83 3033.90 -27.81 3034.69 -27.28 3035.30 -26.33
3035.43 -27.79 3036.29 -27.90 3036.37 -26.66 3036.53 -27.77 3037.17
-27.28 3037.36 -26.20 3037.99 -27.81 3038.35 -27.86 3038.91 -27.35
3039.11 -27.30 3039.73 -27.88 3040.15 -27.84 3040.31 -26.60 3040.61
-28.75 3041.29 -26.32 3041.45 -27.32 3042.21 -27.85 3042.31 -28.75
3042.92 -27.27 3043.63 -27.27 3043.84 -27.79 3044.22 -28.75 3044.39
-26.58 3044.92 -27.84 3045.26 -27.30 3046.32 -26.33 3046.45 -27.85
3046.61 -26.24 3047.01 -27.84 3047.42 -28.75 3048.17 -22.71 3048.17
-22.71 3049.01 14.81 3049.02 14.99 3049.37 28.75 3049.86 27.35 3050.53
27.81 3050.70 27.79 3051.28 27.34 3052.03 27.31 3052.37 27.85 3052.82
27.81 3053.07 27.37 3053.42 27.77 3053.67 27.30 3054.31 28.83 3054.43
27.34 3055.15 27.81 3055.55 27.31 3056.06 26.25 3056.47 27.74 3056.64
27.30 3057.40 28.86 3057.41 28.86 3057.97 27.33 3058.42 26.29 3058.98
27.76 3059.33 27.79 3059.83 27.36 3060.09 27.76 3060.13 27.29 3061.36
27.87 3061.41 26.45 3061.81 28.75 3062.43 26.13 3062.45 26.13 3062.46
28.89 3063.73 27.80 3064.07 27.38 3064.70 27.73 3064.73 27.29 3065.22
26.25 3065.41 27.88 3066.05 27.79 3066.65 22.77 3066.65 22.77 3067.42
4.77 3068.01 5.00 3068.22 6.25 3068.39 4.68 3069.00 5.66 3069.44 4.80
3069.45 6.25 3070.21 6.25 3070.39 5.00 3071.01 6.17 3071.43 4.87 3072.01
4.84 3072.53 21.17 3072.53 21.17 3073.36 57.33 3073.37 57.33 3074.09
83.21 3074.41 83.22 3074.45 81.78 3075.70 82.34 3075.81 84.05 3076.01
83.12 3076.37 81.48 3076.81 83.75 3077.39 81.63 3078.15 82.98 3078.40
81.49 3078.56 82.33 3078.85 83.04 3079.57 83.00 3079.81 81.22 3080.37
83.23 3080.43 81.48 3080.96 83.75 3081.32 82.36 3081.91 83.75 3082.45
81.60 3082.91 83.75 3083.42 81.25 3083.45 81.49 3083.82 83.75 3084.44
83.89 3084.97 82.33 3085.35 81.87 3085.42 83.22 3086.22 83.75 3086.81
81.67 3086.84 82.98 3087.63 53.62 3087.83 46.90 3088.49 73.72 3088.49
73.72 3088.89 83.46 3089.43 83.31 3089.61 81.57 3090.21 83.75 3090.46
82.02 3091.47 81.51 3091.62 83.07 3092.30 83.02 3092.38 81.98 3093.13
82.99 3093.25 81.54 3093.77 83.06 3093.97 82.36 3094.48 81.97 3094.81
83.88 3095.23 83.18 3095.47 81.37 3096.47 81.28 3096.73 83.05 3097.43
83.31 3097.60 82.36 3098.17 83.12 3098.49 81.25 3098.71 83.75 3099.09
82.17 3099.43 81.48 3099.90 83.85 3100.38 83.20 3100.65 82.35 3101.47
81.44 3101.81 83.22 3102.41 83.09 3102.43 81.83 3103.01 81.41 3103.02
83.75 3103.93 82.99 3104.41 81.33 3104.51 83.75 3105.10 82.31 3105.47
81.84 3105.61 83.75 3106.29 83.09 3106.45 81.41 3107.02 83.75 3107.49
81.90 3108.25 83.03 3108.44 81.69 3109.09 82.99 3109.46 81.19 3109.83
83.17 3110.13 82.32 3110.36 83.75 3110.41 82.02 3111.21 83.75 3111.49
81.39 3112.41 81.67 3112.51 83.02 3113.45 83.54 3113.50 81.75 3113.70
82.70 3114.53 50.65 3114.61 47.14 3115.37 76.65 3115.37 76.65 3115.71
83.40 3116.37 82.25 3116.61 83.75 3117.48 81.33 3117.54 83.36 3118.21
83.05 3118.46 81.34 3119.51 81.49 3119.57 83.00 3119.61 83.75 3119.70
81.83 3120.43 81.68 3121.01 83.08 3121.45 83.90 3121.61 81.41 3122.50
83.14 3122.60 81.63 3123.25 83.05 3123.43 81.56 3124.43 81.41 3124.53
83.75 3124.76 82.17 3124.81 83.80 3125.47 83.50 3125.94 82.35 3126.41
81.44 3126.52 83.91 3127.52 81.84 3127.55 82.96 3128.42 83.17 3128.71
82.34 3129.41 82.34 3129.54 83.75 3129.76 83.75 3130.43 82.09 3130.51
83.18 3131.33 60.33 3131.33 60.33 3132.17 22.92 3132.17 22.92 3132.93
5.00 3133.36 6.25 3133.61 5.00 3134.43 4.83 3134.51 6.25 3135.21 4.85
3135.22 6.25 3135.54 6.25 3135.81 4.66 3136.47 6.40 3136.76 5.00 3137.53
4.82 3137.71 6.25 3138.47 4.89 3138.49 6.25 3139.21 4.59 3139.51 6.29
3139.82 6.25 3140.41 4.60 3141.19 5.32 3141.34 5.63 3141.43 4.79 3141.54
6.74 3142.45 4.81 3142.82 6.25 3143.45 6.31 3143.53 4.89 3144.01 6.12
3144.49 4.83 3145.01 6.25 3145.47 5.34 3145.61 6.25 3146.41 4.87 3146.81
4.78 3147.15 6.28 3147.41 6.25 3147.50 4.76 3148.49 6.25 3148.51 4.87
3149.45 4.70 3149.51 6.25 3149.81 6.25 3150.41 5.00 3151.22 6.25 3151.47
4.91 3151.49 5.00 3151.57 6.25 3152.48 5.00 3152.56 6.51 3153.22 6.25
3153.52 4.67 3154.06 6.25 3154.41 4.82 3155.51 6.62 3155.53 4.64 3156.21
4.65 3156.52 6.06 3156.57 6.25 3156.97 5.33 3157.46 4.71 3157.61 6.12
3158.61 6.25 3159.01 4.84 3159.53 4.63 3159.86 6.25 3160.21 6.25 3160.58
5.00 3161.47 6.60 3161.51 4.61 3161.61 4.63 3161.62 6.25 3162.49 6.31
3162.61 4.81 3163.41 6.25 3163.49 4.65 3164.51 4.81 3164.54 6.25 3165.01
6.13 3165.57 4.64 3166.53 6.39 3166.56 4.84 3166.75 4.87 3166.82 6.25
3167.53 4.80 3167.59 6.25 3168.53 6.17 3168.57 4.67 3169.21 6.25 3169.50
4.80 3170.41 6.25 3170.61 4.64 3171.50 4.62 3171.59 6.25 3171.79 5.32
3172.21 6.25 3172.49 6.35 3173.25 4.80 3173.58 6.34 3174.01 4.82 3174.58
4.67 3174.62 6.25 3175.22 5.00 3175.61 6.77 3176.55 6.33 3176.58 4.81
3177.01 6.25 3177.35 4.86 3177.62 6.25 3178.21 4.65 3178.51 6.25 3178.55
4.85 3179.61 6.25 3179.83 5.33 3180.51 4.64 3180.61 5.80 3181.30 5.32
3181.53 6.25 3182.01 6.12 3182.01 5.00 3182.65 4.87 3183.39 19.16 3183.41
19.02 3184.01 4.72 3184.55 5.03 3184.58 6.25 3185.52 4.82 3185.86 6.25
3185.96 6.25 3186.55 4.64 3187.41 6.13 3187.53 4.66 3187.61 6.34 3188.01
4.68 3188.50 6.15 3188.60 4.67 3189.56 4.67 3189.59 6.14 3190.30 6.16
3190.61 4.63 3191.61 6.26 3191.63 5.00 3192.21 6.25 3192.52 4.60 3192.91
5.33 3193.49 24.80 3193.49 24.80 3194.33 62.12 3194.33 62.12 3195.01
83.75 3195.41 81.25 3195.63 83.75 3196.53 83.75 3196.83 82.35 3197.21
83.07 3197.63 82.38 3198.15 83.75 3198.25 82.37 3198.81 83.75 3199.35
81.95 3199.53 81.68 3200.01 83.75 3200.43 82.38 3200.60 84.01 3201.53
81.58 3201.82 83.75 3202.17 83.04 3202.59 81.32 3202.89 83.06 3203.55
81.80 3203.57 81.80 3203.63 84.02 3204.51 83.13 3204.53 81.58 3205.45
82.36 3205.75 83.75 3206.58 83.25 3206.65 81.90 3207.01 83.75 3207.07
82.36 3208.03 83.03 3208.41 81.53 3208.75 83.13 3209.21 82.35 3209.57
83.75 3210.03 82.36 3210.53 81.37 3210.96 83.75 3211.61 81.59 3211.63
83.09 3212.41 83.05 3212.55 81.79 3213.15 83.04 3213.37 82.36 3213.65
83.75 3214.21 82.30 3214.61 83.78 3214.93 82.33 3215.63 84.01 3215.70
82.34 3216.21 81.34 3216.65 83.75 3217.56 83.59 3217.65 81.45 3218.21
81.58 3218.23 83.04 3218.69 82.31 3218.90 83.00 3219.81 83.75 3220.01
82.36 3220.41 83.10 3220.61 81.50 3221.51 82.34 3221.86 83.01 3222.56
82.00 3222.65 83.42 3223.30 83.04 3223.55 81.36 3224.41 83.75 3224.42
82.34 3224.58 83.75 3225.18 82.32 3225.56 81.62 3226.21 83.23 3226.68
81.25 3226.90 83.01 3227.09 82.90 3227.93 58.95 3227.93 58.95 3228.76
21.86 3228.77 21.86 3229.58 -13.61 3229.61 -13.61 3230.43 -51.19 3230.45
-51.91 3231.27 -83.13 3231.57 -81.88 3231.63 -83.39 3232.35 -82.95
3232.62 -81.45 3233.32 -82.39 3233.73 -83.06 3234.57 -81.87 3234.62
-83.08 3234.85 -82.33 3235.36 -83.75 3235.53 -82.37 3235.91 -83.03
3236.61 -83.16 3236.62 -82.12 3237.35 -83.05 3237.70 -81.58 3238.53
-82.36 3238.80 -83.13 3239.21 -81.27 3239.65 -83.26 3240.03 -82.23
3240.22 -83.75 3240.59 -81.69 3241.00 -83.08 3241.63 -81.68 3241.71
-83.05 3242.68 -81.36 3242.79 -83.75 3243.33 -83.00 3243.55 -82.31
3244.69 -81.63 3244.71 -83.75 3244.81 -83.75 3245.03 -82.32 3246.01
-83.04 3246.41 -80.65 3246.41 -80.65 3247.23 -45.10 3247.25 -44.69
3248.08 -7.77 3248.09 -7.77 3248.92 29.61 3248.93 29.61 3249.76 66.58
3249.77 66.58 3250.31 83.19 3250.62 81.37 3250.73 83.75 3251.61 83.02
3251.71 81.70 3252.66 83.75 3252.71 81.77 3253.35 83.03 3253.68 81.25
3254.71 83.75 3254.81 81.84 3255.15 82.36 3255.41 83.06 3255.87 82.36
3256.21 83.02 3256.69 83.75 3257.25 81.49 3257.50 81.65 3257.68 83.75
3258.41 83.75 3258.77 82.35 3259.13 83.06 3259.48 82.38 3260.56 83.75
3260.63 82.27 3260.81 81.34 3261.41 83.14 3261.63 81.19 3262.11 83.02
3262.81 83.75 3263.13 82.15 3263.41 83.15 3263.86 82.23 3264.25 81.77
3264.63 83.51 3265.30 82.27 3265.65 83.75 3265.81 81.64 3266.41 83.08
3267.15 83.03 3267.20 81.46 3267.83 82.99 3268.25 71.98 3268.25 71.98
3269.09 34.80 3269.09 34.80 3269.92 -2.63 3269.93 -2.63 3270.76 -39.10
3270.77 -39.10 3271.60 -75.90 3271.61 -75.90 3272.41 -83.75 3272.61
-83.13 3272.65 -81.64 3273.31 -83.75 3273.75 -81.41 3274.53 -82.36
3274.69 -84.04 3275.61 -83.12 3275.68 -81.46 3275.91 -82.31 3276.11
-83.75 3277.05 -83.14 3277.30 -81.57 3277.63 -83.20 3277.71 -81.72
3278.68 -84.03 3279.10 -81.89 3279.63 -81.48 3279.85 -83.02 3280.55
-83.12 3280.72 -81.71 3281.08 -82.29 3281.33 -83.09 3281.76 -81.35
3282.05 -83.08 3282.67 -83.75 3282.71 -82.05 3283.51 -83.06 3283.65
-81.45 3284.22 -83.04 3284.61 -82.36 3285.21 -81.30 3285.63 -83.10
3286.61 -83.75 3286.71 -81.43 3286.85 -82.32 3287.28 -82.99 3287.65
-81.24 3287.83 -83.00 3288.66 -83.16 3289.02 -82.34 3289.35 -83.01
3290.08 -74.79 3290.09 -74.79 3290.93 -36.68 3290.93 -36.68 3291.76
0.00 3291.77 0.00 3292.60 36.51 3292.61 37.26 3293.45 74.39 3293.45
74.39 3294.15 83.13 3294.61 81.25 3294.91 83.01 3295.65 83.20 3295.81
81.62 3296.41 81.69 3296.78 83.75 3297.42 82.36 3297.61 83.75 3297.70
81.75 3297.75 83.09 3298.68 83.75 3299.01 82.34 3299.56 82.34 3300.01
83.09 3300.61 81.75 3300.74 83.75 3301.11 82.36 3301.45 83.14 3301.91
82.37 3302.16 82.98 3302.81 81.62 3302.93 83.02 3303.61 81.89 3303.78
83.75 3304.71 83.93 3304.73 82.37 3305.61 83.75 3305.77 81.65 3306.46
83.05 3306.61 81.95 3307.51 83.75 3307.68 81.38 3308.03 83.03 3308.25
82.37 3308.70 81.95 3308.75 83.11 3309.88 82.30 3310.17 83.06 3310.91
83.75 3311.09 81.02 3311.09 81.02 3311.92 45.12 3311.93 45.12 3312.76
8.51 3312.77 8.51 3313.60 -28.68 3313.61 -28.84 3314.45 -65.86 3314.45
-65.86 3315.03 -83.42 3315.61 -81.73 3315.81 -83.75 3316.37 -83.01
3316.85 -82.24 3317.69 -83.75 3317.78 -81.41 3318.17 -82.35 3318.61
-83.75 3318.65 -83.10 3318.81 -81.25 3319.65 -82.31 3320.21 -83.75
3320.79 -81.64 3320.81 -83.75 3321.71 -81.93 3321.76 -83.10 3322.57
-82.29 3322.81 -83.75 3323.43 -82.30 3323.66 -83.04 3323.73 -83.20
3323.81 -81.43 3324.82 -81.48 3325.15 -83.18 3325.41 -81.51 3325.75
-84.11 3326.70 -81.64 3326.78 -83.75 3327.08 -82.28 3327.32 -83.07
3328.63 -82.33 3328.71 -83.39 3329.23 -82.33 3329.35 -83.75 3329.61
-83.11 3329.97 -82.28 3330.73 -81.40 3331.00 -83.05 3331.70 -83.03
3331.77 -82.06 3332.41 -83.09 3332.74 -81.25 3333.05 -83.75 3333.77
-81.41 3333.82 -83.02 3334.61 -60.41 3334.61 -60.41 3335.45 -23.13
3335.45 -23.13 3336.28 13.54 3336.29 13.54 3337.12 50.93 3337.13 50.93
3337.96 83.23 3338.49 82.44 3338.73 83.47 3339.17 82.34 3339.41 83.75
3339.90 82.37 3340.31 83.75 3340.75 81.44 3341.01 82.98 3341.83 82.98
3342.07 82.26 3342.41 83.02 3342.78 81.24 3343.13 83.02 3343.65 81.33
3344.01 81.31 3344.61 83.11 3344.72 81.35 3345.27 83.00 3345.85 81.60
3346.05 83.01 3346.73 83.16 3346.79 81.79 3347.50 83.01 3347.90 82.34
3348.79 81.71 3348.83 83.30 3349.20 84.00 3349.31 82.34 3349.86 83.75
3350.45 70.10 3350.57 71.74 3350.95 83.75 3351.61 81.25 3351.73 84.06
3352.41 83.75 3352.72 81.70 3353.26 83.06 3353.41 81.88 3354.01 83.75
3354.47 82.36 3354.82 82.12 3354.86 83.36 3355.83 83.87 3355.95 81.26
3356.83 81.60 3356.98 83.05 3357.81 83.12 3358.12 82.31 3358.15 83.83
3358.82 82.26 3359.07 83.06 3359.57 82.28 3359.87 83.75 3360.32 82.22
3360.86 81.40 3361.41 83.75 3361.77 82.30 3361.83 83.75 3362.87 83.75
3362.96 81.66 3363.45 83.75 3363.86 81.50 3364.31 83.75 3364.67 82.25
3364.90 83.02 3365.30 82.32 3365.87 83.75 3366.01 81.25 3366.71 82.35
3367.18 83.04 3367.51 82.37 3367.61 83.75 3368.41 82.86 3369.05 60.62
3369.05 60.62 3369.88 23.62 3369.89 23.62 3370.72 -13.48 3370.73 -13.48
3371.56 -50.48 3371.57 -50.48 3372.38 -83.00 3372.79 -83.45 3372.88
-82.10 3373.51 -83.75 3374.09 -82.33 3374.41 -81.88 3374.41 -83.01
3375.21 -83.75 3375.57 -82.30 3375.81 -83.47 3375.85 -81.78 3376.91
-81.25 3377.41 -83.10 3377.58 -82.30 3377.91 -83.75 3378.33 -82.27
3378.79 -83.08 3379.81 -83.97 3379.93 -82.28 3380.03 -82.13 3380.08
-83.34 3380.91 -83.75 3381.31 -82.29 3381.88 -81.32 3382.00 -83.85
3382.75 -82.33 3382.90 -83.85 3383.79 -81.80 3383.87 -83.75 3384.27
-82.31 3384.61 -83.03 3385.03 -82.33 3385.41 -83.75 3386.03 -83.02
3386.45 -82.34 3387.33 -82.20 3387.36 -83.43 3387.84 -81.52 3388.23
-83.05 3388.41 -83.99 3388.58 -82.36 3389.21 -83.75 3389.80 -81.68
3390.31 -83.02 3390.88 -65.80 3390.89 -65.80 3391.72 -28.76 3391.73
-28.76 3392.56 8.36 3392.57 8.36 3393.41 45.20 3393.41 45.20 3394.25
81.40 3394.25 81.40 3394.50 83.44 3395.81 83.47 3395.91 81.87 3396.01
83.75 3396.11 82.34 3396.87 81.25 3397.01 83.75 3397.87 83.75 3398.41
82.32 3398.73 83.05 3398.85 81.87 3399.79 82.34 3399.89 83.87 3400.30
81.75 3400.90 83.20 3401.17 82.35 3401.81 83.01 3401.91 81.47 3402.37
83.05 3402.83 81.17 3403.10 83.05 3403.82 82.25 3403.85 83.75 3404.55
83.07 3404.61 81.56 3405.27 83.08 3405.87 81.74 3406.43 82.32 3406.73
83.05 3407.16 82.23 3407.55 83.75 3407.82 81.46 3408.21 83.16 3408.85
81.76 3408.88 83.19 3409.37 82.30 3409.65 83.06 3410.77 82.29 3411.05
83.06 3411.30 82.38 3411.75 83.75 3411.89 83.16 3411.92 81.55 3412.73
82.58 3413.56 49.75 3413.57 49.75 3414.41 12.81 3414.41 12.81 3415.25
-24.32 3415.25 -24.32 3416.08 -61.19 3416.09 -61.19 3416.79 -83.33
3416.93 -83.27 3417.41 -81.25 3417.85 -81.23 3418.41 -83.04 3418.94
-81.86 3419.21 -83.75 3419.83 -83.55 3420.25 -81.25 3420.77 -82.34
3420.89 -83.88 3421.16 -83.11 3421.85 -81.84 3422.36 -82.36 3422.63
-83.02 3423.00 -81.31 3423.35 -83.03 3424.15 -83.06 3424.35 -81.26
3424.81 -83.75 3425.19 -82.25 3425.87 -83.87 3425.92 -82.32 3426.91
-81.98 3426.94 -83.17 3427.33 -82.33 3427.61 -83.75 3428.13 -82.30
3428.61 -83.75 3428.97 -82.30 3429.20 -83.15 3429.71 -82.32 3429.95
-83.75 3430.61 -82.02 3430.65 -83.11 3431.25 -81.60 3432.00 -83.19
3432.52 -82.35 3432.87 -83.16 3432.90 -83.12 3432.91 -81.52 3433.73
-82.88 3434.56 -59.45 3434.57 -59.45 3435.41 -22.38 3435.41 -22.38
3436.25 14.79 3436.25 14.79 3437.08 51.78 3437.09 51.78 3437.93 83.28
3437.98 81.63 3438.01 83.75 3438.98 82.95 3439.23 82.36 3439.80 83.24
3440.02 82.24 3440.97 81.73 3441.19 83.02 3441.81 83.75 3441.86 81.86
3442.41 83.75 3442.90 81.51 3443.36 83.03 3443.75 82.33 3443.98 81.73
3444.01 83.75 3444.88 83.06 3445.21 81.20 3445.53 83.02 3445.94 81.38
3446.96 83.75 3447.01 81.79 3447.17 83.19 3447.26 82.26 3448.61 84.07
3448.75 82.32 3448.94 81.62 3449.21 83.13 3449.89 83.10 3450.10 81.25
3450.71 83.75 3450.81 82.30 3451.61 81.48 3451.61 83.75 3452.25 83.75
3452.51 82.33 3453.61 83.75 3453.87 81.44 3453.89 81.44 3454.41 83.75
3454.95 83.51 3455.55 57.96 3455.57 58.08 3456.41 20.30 3456.41 20.30
3457.25 -16.49 3457.25 -16.61 3458.08 -53.36 3458.09 -53.36 3458.90
-83.41 3458.93 -83.73 3459.40 -81.91 3459.91 -81.84 3460.21 -83.05
3460.91 -83.39 3461.15 -82.35 3461.70 -83.05 3462.01 -81.50 3462.41
-83.75 3462.75 -82.34 3463.81 -81.59 3463.91 -83.21 3464.03 -81.64
3464.63 -83.11 3465.02 -81.48 3465.36 -83.05 3466.00 -83.23 3466.01
-82.00 3466.58 -82.10 3466.73 -83.33 3467.95 -81.30 3467.97 -83.79
3468.45 -83.75 3468.92 -82.22 3469.01 -83.03 3469.22 -82.34 3469.93
-83.75 3470.40 -81.73 3470.81 -81.25 3471.03 -83.75 3471.98 -83.75
3472.17 -82.33 3472.95 -82.24 3473.18 -83.06 3473.41 -83.75 3474.01
-82.00 3474.06 -82.97 3474.88 -61.08 3474.89 -61.08 3475.72 -23.95
3475.73 -23.95 3476.56 13.09 3476.57 13.09 3477.41 49.87 3477.41 49.87
3478.21 83.40 3478.60 83.35 3479.02 81.88 3479.28 83.04 3479.63 82.38
3480.03 81.65 3480.55 83.75 3480.90 84.02 3480.98 81.87 3481.85 83.47
3482.03 81.62 3483.01 83.01 3483.15 81.37 3483.61 83.75 3483.87 82.31
3484.20 81.56 3484.91 83.75 3485.01 82.10 3485.03 83.15 3485.81 83.75
3485.97 81.70 3487.03 81.21 3487.18 83.03 3487.61 81.25 3487.98 83.37
3488.61 81.69 3488.61 83.05 3489.53 83.10 3489.81 81.26 3490.21 83.75
3490.58 82.30 3491.03 83.96 3491.68 68.88 3491.69 68.88 3492.52 31.99
3492.53 31.99 3493.36 -5.33 3493.37 -5.77 3494.20 -42.54 3494.21 -42.39
3495.05 -78.98 3495.05 -79.41 3495.61 -83.75 3496.10 -82.34 3496.31
-83.09 3496.81 -83.75 3496.99 -81.67 3498.06 -83.47 3498.22 -82.34
3499.06 -81.28 3499.21 -83.75 3499.65 -82.30 3499.97 -83.50 3500.50
-82.24 3500.62 -83.20 3501.05 -81.26 3501.40 -83.07 3502.01 -81.84
3502.07 -83.75 3503.41 -81.47 3503.42 -83.75 3503.75 -81.58 3504.07
-83.75 3504.72 -82.25 3505.03 -83.68 3505.41 -82.31 3505.81 -83.01
3506.02 -81.49 3506.21 -83.94 3507.20 -82.99 3507.53 -82.30 3507.97
-83.26 3508.41 -81.25 3508.66 -83.04 3509.03 -81.56 3510.00 -81.78
3510.08 -83.39 3510.60 -82.33 3510.95 -83.16 3511.07 -82.97 3511.85
-55.62 3511.86 -55.79 3512.68 -18.74 3512.69 -18.74 3513.52 18.08 3513.53
18.08 3514.36 55.19 3514.37 55.80 3515.21 83.31 3515.97 81.80 3516.03
83.76 3516.05 84.14 3516.48 82.36 3517.04 83.75 3517.23 82.35 3518.01
83.91 3518.20 81.86 3518.98 83.11 3519.21 81.25 3520.03 81.40 3520.11
83.75 3520.85 82.14 3521.07 83.31 3521.55 82.26 3521.81 83.01 3521.99
83.30 3522.05 81.55 3523.03 82.28 3523.35 83.01 3524.03 82.07 3524.05
83.09 3524.69 82.97 3525.17 82.30 3525.60 81.97 3526.02 83.75 3526.32
83.01 3526.41 81.39 3527.06 82.12 3527.09 83.07 3528.03 82.37 3528.48
83.01 3529.09 81.82 3529.41 83.92 3529.61 81.25 3529.89 83.01 3530.65
83.01 3530.93 82.28 3531.28 82.99 3531.61 81.21 3532.05 81.80 3532.08
83.75 3532.85 83.00 3532.99 81.61 3534.11 81.52 3534.41 83.75 3535.07
83.75 3535.22 82.34 3535.68 83.04 3536.02 81.26 3536.75 82.33 3537.02
83.04 3537.06 82.06 3537.13 83.75 3538.03 81.74 3538.62 83.05 3538.91
82.31 3539.07 83.90 3540.01 81.65 3540.03 83.75 3540.70 83.14 3541.05
81.25 3541.61 83.75 3541.81 81.46 3542.15 83.13 3542.55 81.25 3543.18
83.75 3543.32 82.27 3544.03 82.30 3544.13 83.75 3544.95 81.35 3545.08
83.03 3545.61 83.75 3546.28 67.68 3546.29 67.68 3547.11 32.43 3547.13
30.49 3547.87 4.65 3548.13 4.00 3548.60 6.48 3548.95 6.88 3549.30 3.75
3549.82 4.85 3549.90 7.07 3551.03 4.79 3551.15 6.18 3552.07 4.78 3552.15
6.25 3552.35 4.58 3552.40 5.64 3553.05 4.59 3553.65 6.25 3554.05 6.11
3554.21 4.82 3555.08 4.61 3555.41 6.25 3555.67 5.29 3556.03 6.70 3557.04
6.07 3557.10 4.76 3557.41 6.25 3557.50 5.00 3558.10 4.55 3558.61 6.25
3559.14 6.25 3559.41 4.60 3559.81 6.25 3560.04 4.84 3561.10 4.76 3561.14
6.74 3562.09 6.42 3562.15 4.87 3562.95 4.85 3563.04 6.11 3563.09 4.64
3563.88 5.65 3564.11 4.84 3564.21 6.25 3564.81 6.25 3565.11 4.64 3566.01
6.25 3566.06 4.64 3566.86 5.65 3567.05 4.85 3567.30 6.25 3568.11 4.84
3568.14 6.25 3568.20 4.84 3569.05 4.82 3569.41 6.25 3570.01 6.25 3570.07
4.65 3571.07 6.25 3571.12 4.65 3572.08 6.18 3572.09 4.83 3572.41 6.25
3572.91 5.33 3573.17 4.94 3573.61 6.06 3574.21 4.94 3574.55 6.25 3575.07
6.18 3575.21 4.67 3575.81 6.25 3576.16 4.67 3577.01 6.25 3577.17 4.65
3577.45 6.25 3578.20 4.86 3578.21 5.00 3578.81 6.25 3579.14 4.88 3579.21
6.25 3580.01 6.25 3580.12 4.87 3580.80 4.81 3581.01 6.25 3582.07 6.25
3582.40 4.80 3582.41 5.00 3583.21 6.25 3583.61 4.95 3583.61 6.25 3584.12
5.00 3584.60 6.11 3585.08 4.81 3585.21 6.25 3586.01 6.25 3586.40 4.93
3586.61 6.25 3587.13 4.69 3587.80 4.66 3588.19 6.46 3588.42 5.65 3589.07
4.55 3589.17 4.63 3589.41 6.25 3590.01 6.25 3590.14 4.80 3590.95 6.25
3591.15 4.61 3592.20 5.89 3592.45 4.60 3593.11 4.90 3593.15 6.24 3594.00
6.09 3594.14 4.82 3594.17 5.00 3594.20 6.07 3595.13 6.25 3595.21 4.79
3596.09 6.13 3596.11 4.85 3597.01 5.00 3597.16 6.25 3598.18 6.25 3598.22
4.63 3599.18 6.59 3599.22 4.60 3599.24 4.60 3600.03 6.09 3600.16 4.87
3600.20 6.25 3601.14 4.88 3601.38 6.25 3602.18 4.81 3602.20 5.78 3602.95
5.64 3603.32 4.59 3603.48 6.25 3604.22 4.62 3604.64 6.25 3605.03 4.82
3605.20 6.25 3605.64 4.81 3606.14 6.13 3606.17 4.80 3607.04 6.25 3607.14
4.88 3608.19 4.85 3608.20 6.25 3608.64 5.00 3608.88 6.25 3609.84 6.25
3610.14 4.62 3610.16 4.82 3610.18 6.09 3611.08 6.25 3611.44 5.00 3612.04
6.25 3612.63 4.64 3612.83 4.58 3613.26 6.25 3614.04 6.25 3614.15 4.63
3614.83 6.12 3615.16 4.61 3615.26 4.61 3615.28 6.25 3616.20 4.86 3616.38
6.15 3617.16 6.12 3617.26 5.00 3617.84 5.00 3618.04 6.25 3619.04 6.25
3619.20 4.85 3619.53 4.83 3620.17 6.11 3620.25 4.65 3620.88 6.25 3621.16
4.90 3621.48 6.17 3622.25 4.76 3622.44 6.25 3622.78 4.59 3623.03 6.17
3623.98 6.25 3624.18 4.60 3625.03 4.80 3625.22 6.63 3625.78 5.00 3626.03
6.15 3626.44 6.25 3626.68 4.91 3627.05 6.25 3627.38 4.80 3628.18 6.34
3628.22 4.83 3629.03 4.86 3629.44 6.25 3629.64 6.25 3630.03 4.65 3630.63
4.87 3630.64 6.25 3631.24 6.18 3631.84 5.00 3632.18 4.88 3632.28 6.13
3633.04 6.25 3633.18 4.83 3633.98 6.18 3634.04 4.90 3635.18 5.05 3635.23
6.72 3635.84 6.25 3636.19 5.26 3636.22 6.25 3636.43 4.79 3637.04 6.25
3637.22 4.83 3638.29 6.19 3638.29 5.00 3639.24 4.82 3639.29 6.07 3640.25
6.66 3640.30 5.00 3640.68 5.00 3641.23 6.79 3641.24 6.25 3641.29 4.65
3642.24 6.33 3642.43 4.63 3643.20 6.35 3643.23 4.86 3644.29 6.09 3644.44
5.00 3644.68 6.25 3645.19 4.84 3645.64 6.25 3646.22 4.81 3646.28 4.86
3646.30 6.25 3647.29 6.11 3647.43 4.61 3648.04 6.25 3648.64 4.92 3649.18
4.67 3649.27 6.34 3650.24 6.16 3650.26 4.86 3651.26 4.85 3651.31 6.54
3651.32 6.54 3652.03 4.84 3652.22 4.84 3652.32 6.25 3653.31 4.64 3653.58
6.25 3654.25 6.15 3654.31 4.90 3655.20 4.88 3655.24 6.38 3656.24 4.63
3656.32 5.78 3656.64 5.00 3657.13 6.25 3657.24 6.19 3657.31 4.64 3658.31
4.63 3658.68 6.25 3659.03 4.90 3659.04 6.25 3660.21 6.21 3660.33 4.88
3660.64 6.19 3661.21 4.83 3661.63 4.87 3662.21 6.31 3662.28 4.64 3662.33
6.25 3663.33 4.66 3663.63 6.17 3664.24 5.00 3664.33 6.65 3664.83 4.82
3665.44 6.25 3666.04 6.25 3666.24 4.61 3667.03 6.16 3667.04 5.00 3667.32
4.63 3667.34 6.25 3668.33 6.25 3668.84 4.86 3669.08 4.58 3669.43 6.15
3670.30 6.12 3670.63 4.82 3671.23 4.80 3671.29 6.77 3671.84 6.25 3672.23
4.63 3672.32 4.65 3672.55 5.67 3673.34 4.89 3673.64 6.25 3674.31 6.25
3674.34 4.64 3675.13 6.25 3675.48 4.80 3676.34 4.82 3676.38 6.25 3677.26
4.80 3677.35 6.25 3677.68 6.25 3677.88 5.30 3678.29 4.57 3678.83 6.22
3679.25 4.86 3679.44 6.25 3680.03 6.25 3680.26 4.67 3681.03 4.77 3681.26
6.31 3681.58 4.84 3682.30 6.80 3682.44 5.00 3682.84 6.25 3683.25 6.16
3683.43 4.62 3684.33 6.15 3684.36 4.86 3685.36 4.64 3685.64 6.25 3686.26
4.84 3686.36 6.25 3686.73 6.25 3687.31 4.60 3687.64 6.25 3688.04 4.83
3688.30 6.25 3688.41 5.29 3689.64 6.25 3689.88 4.83 3690.31 5.79 3690.33
4.84 3690.84 6.25 3691.31 4.63 3691.64 5.00 3692.24 6.25 3692.68 5.29
3693.26 6.57 3693.48 5.32 3694.04 6.25 3694.26 5.80 3694.33 4.85 3695.03
4.65 3695.34 6.25 3696.28 5.00 3696.37 6.25 3697.29 6.25 3697.48 4.64
3698.08 6.25 3698.23 4.84 3698.38 4.82 3698.79 5.64 3699.31 6.62 3699.44
5.00 3700.32 4.78 3700.37 6.51 3701.36 4.62 3701.39 6.25 3702.03 4.81
3702.39 6.60 3702.83 4.84 3703.34 6.11 3703.78 6.25 3704.23 4.62 3704.30
4.81 3704.73 6.25 3705.23 4.86 3705.44 6.25 3706.30 6.25 3706.37 4.63
3707.30 6.25 3707.33 4.79 3708.04 6.25 3708.34 4.62 3708.93 4.62 3709.03
6.16 3709.32 4.65 3709.36 6.25 3710.23 6.25 3710.35 5.00 3711.13 6.25
3711.39 4.82 3711.93 6.25 3712.34 5.16 3713.30 4.81 3713.38 6.59 3713.71
5.30 3714.30 6.36 3714.35 4.84 3714.40 6.18 3715.39 4.61 3715.84 6.25
3716.30 6.15 3716.43 4.81 3717.29 4.89 3717.31 6.25 3718.38 4.82 3718.44
6.25 3719.03 6.14 3719.33 4.91 3719.36 6.10 3719.43 4.88 3720.38 4.61
3720.42 6.25 3721.37 4.60 3721.44 6.25 3722.23 6.12 3722.31 4.80 3723.42
6.25 3723.48 4.63 3723.64 6.25 3724.36 4.83 3724.40 4.79 3724.83 6.00
3725.25 5.46 3725.85 11.36 3726.31 11.93 3726.64 10.00 3727.33 10.65
3727.43 12.18 3728.36 12.19 3728.59 7.97 3728.63 7.92 3729.30 4.56
3729.44 6.25 3729.63 4.81 3730.32 4.59 3730.43 6.07 3731.36 5.68 3731.76
-0.49 3732.04 -1.25 3732.42 0.09 3732.80 0.00 3732.92 0.03 3733.64
0.00 3733.64 0.00 3734.48 0.00 3734.48 0.00 3735.32 0.00 3735.32 0.00
3736.16 0.00 3736.16 0.00 3737.00 0.00 3737.00 0.00 3737.84 0.00 3737.84
0.00 3738.68 0.00 3738.68 0.00 3739.52 0.00 3739.52 0.00 3740.36 0.00
3740.36 0.00 3741.20 0.00 3741.20 0.00 3742.04 0.00 3742.04 0.00 3742.88
0.00 3742.88 0.00 3743.72 0.00 3743.72 0.00 3744.56 0.00 3744.56 0.00
3745.40 0.00 3745.40 0.00 3746.24 0.00 3746.24 0.00 3747.08 0.00 3747.08
0.00 3747.92 0.00 3747.92 0.00 3748.76 0.00 3748.76 0.00 3749.60 0.00
3749.60 0.00 3750.44 0.00 3750.44 0.00 3751.28 0.00 3751.28 0.00 3752.12
0.00 3752.12 0.00 3752.96 0.00 3752.96 0.00 3753.80 0.00 3753.80 0.00
3754.64 0.00 3754.64 0.00 3755.48 0.00 3755.48 0.00 3756.32 0.00 3756.32
0.00 3757.16 0.00 3757.16 0.00 3758.00 0.00 3758.00 0.00 3758.84 0.00
3758.84 0.00 3759.68 0.00 3759.68 0.00 3760.52 0.00 3760.52 0.00 3761.36
0.00 3761.36 0.00 3762.20 0.00 3762.20 0.00 3763.04 0.00 3763.04 0.00
3763.88 0.00 3763.88 0.00 3764.72 0.00 3764.72 0.00 3765.56 0.00 3765.56
0.00 3766.40 0.00 3766.40 0.00 3767.24 0.00 3767.24 0.00 3768.08 0.00
3768.08 0.00 3768.92 0.00 3768.92 0.00 3769.76 0.00 3769.76 0.00 3770.60
0.00 3770.60 0.00 3771.44 0.00 3771.44 0.00 3772.28 0.00 3772.28 0.00
3773.12 0.00 3773.12 0.00 3773.96 0.00 3773.96 0.00 3774.80 0.00 3774.80
0.00 3775.64 0.00 3775.64 0.00 3776.48 0.00 3776.48 0.00 3777.32 0.00
3777.32 0.00 3778.16 0.00 3778.16 0.00 3779.00 0.00 3779.00 0.00 3779.84
0.00 3779.84 0.00 3780.68 0.00 3780.68 0.00 3781.52 0.00 3781.52 0.00
3782.36 0.00 3782.36 0.00 3783.20 0.00 3783.20 0.00 3784.04 0.00 3784.04
0.00 3784.88 0.00 3784.88 0.00 3785.72 0.00 3785.72 0.00 3786.56 0.00
3786.56 0.00 3787.40 0.00 3787.40 0.00 3788.24 0.00 3788.24 0.00 3789.08
0.00 3789.08 0.00 3789.92 0.00 3789.92 0.00 3790.76 0.00 3790.76 0.00
3791.60 0.00 3791.60 0.00 3792.44 0.00 3792.44 0.00 3793.28 0.00 3793.28
0.00 3794.12 0.00 3794.12 0.00 3794.96 0.00 3794.96 0.00 3795.80 0.00
3795.80 0.00 3796.64 0.00 3796.64 0.00 3797.48 0.00 3797.48 0.00 3798.32
0.00 3798.32 0.00 3799.16 0.00 3799.16 0.00 3800.00 0.00 3800.00 0.00
3800.84 0.00 3800.84 0.00 3801.68 0.00 3801.68 0.00 3802.52 0.00 3802.52
0.00 3803.36 0.00 3803.36 0.00 3804.20 0.00 3804.20 0.00 3805.04 0.00
3805.04 0.00 3805.88 0.00 3805.88 0.00 3806.72 0.00 3806.72 0.00 3807.56
0.00 3807.56 0.00 3808.40 0.00 3808.40 0.00 3809.24 0.00 3809.24 0.00
3810.08 0.00 3810.08 0.00 3810.92 0.00 3810.92 0.00 3811.76 0.00 3811.76
0.00 3812.60 0.00 3812.60 0.00 3813.44 0.00 3813.44 0.00 3814.28 0.00
3814.28 0.00 3815.12 0.00 3815.12 0.00 3815.96 0.00 3815.96 0.00 3816.80
0.00 3816.80 0.00 3817.64 0.00 3817.64 0.00 3818.48 0.00 3818.48 0.00
3819.32 0.00 3819.32 0.00 3820.16 0.00 3820.16 0.00 3821.00 0.00 3821.00
0.00 3821.84 0.00 3821.84 0.00 3822.68 0.00 3822.68 0.00 3823.52 0.00
3823.52 0.00 3824.36 0.00 3824.36 0.00 3825.20 0.00 3825.20 0.00 3826.04
0.00 3826.04 0.00 3826.88 0.00 3826.88 0.00 3827.72 0.00 3827.72 0.00
3828.56 0.00 3828.56 0.00 3829.40 0.00 3829.40 0.00 3830.24 0.00 3830.24
0.00 3831.08 0.00 3831.08 0.00 3831.92 0.00 3831.92 0.00 3832.76 0.00
3832.76 0.00 3833.60 0.00 3833.60 0.00 3834.44 0.00 3834.44 0.00 3835.28
0.00 3835.28 0.00 3836.12 0.00 3836.12 0.00 3836.96 0.00 3836.96 0.00
3837.80 0.00 3837.80 0.00 3838.64 0.00 3838.64 0.00 3839.48 0.00 3839.48
0.00 3840.32 0.00 3840.32 0.00 3841.16 0.00 3841.16 0.00 3842.00 0.00
3842.00 0.00 3842.84 0.00 3842.84 0.00 3843.68 0.00 3843.68 0.00 3844.52
0.00 3844.52 0.00 3845.36 0.00 3845.36 0.00 3846.20 0.00 3846.20 0.00
3847.04 0.00 3847.04 0.00 3847.88 0.00 3847.88 0.00 3848.72 0.00 3848.72
0.00 3849.56 0.00 3849.56 0.00 3850.40 0.00 3850.40 0.00 3851.24 0.00
3851.24 0.00 3852.08 0.00 3852.08 0.00 3852.92 0.00 3852.92 0.00 3853.76
0.00 3853.76 0.00 3854.60 0.00 3854.60 0.00 3855.44 0.00 3855.44 0.00
3856.28 0.00 3856.28 0.00 3857.12 0.00 3857.12 0.00 3857.96 0.00 3857.96
0.00 3858.80 0.00 3858.80 0.00 3859.64 0.00 3859.64 0.00 3860.48 0.00
3860.48 0.00 3861.32 0.00 3861.32 0.00 3862.16 0.00 3862.16 0.00 3863.00
0.00 3863.00 0.00 3863.84 0.00 3863.84 0.00 3864.68 0.00 3864.68 0.00
3865.52 0.00 3865.52 0.00 3866.36 0.00 3866.36 0.00 3867.20 0.00 3867.20
0.00 3868.04 0.00 3868.04 0.00 3868.88 0.00 3868.88 0.00 3869.72 0.00
3869.72 0.00 3870.56 0.00 3870.56 0.00 3871.40 0.00 3871.40 0.00 3872.24
0.00 3872.24 0.00 3873.08 0.00 3873.08 0.00 3873.92 0.00 3873.92 0.00
3874.76 0.00 3874.76 0.00 3875.60 0.00 3875.60 0.00 3876.44 0.00 3876.44
0.00 3877.28 0.00 3877.28 0.00 3878.12 0.00 3878.12 0.00 3878.96 0.00
3878.96 0.00 3879.80 0.00 3879.80 0.00 3880.64 0.00 3880.64 0.00 3881.48
0.00 3881.48 0.00 3882.32 0.00 3882.32 0.00 3883.16 0.00 3883.16 0.00
3884.00 0.00 3884.00 0.00 3884.84 0.00 3884.84 0.00 3885.68 0.00 3885.68
0.00 3886.52 0.00 3886.52 0.00 3887.36 0.00 3887.36 0.00 3888.20 0.00
3888.20 0.00 3889.04 0.00 3889.04 0.00 3889.88 0.00 3889.88 0.00 3890.72
0.00 3890.72 0.00 3891.56 0.00 3891.56 0.00 3892.40 0.00 3892.40 0.00
3893.24 0.00 3893.24 0.00 3894.08 0.00 3894.08 0.00 3894.92 0.00 3894.92
0.00 3895.76 0.00 3895.76 0.00 3896.60 0.00 3896.60 0.00 3897.44 0.00
3897.44 0.00 3898.28 0.00 3898.28 0.00 3899.12 0.00 3899.12 0.00 3899.96
0.00 3899.96 0.00 3900.80 0.00 3900.80 0.00 3901.64 0.00 3901.64 0.00
3902.48 0.00 3902.48 0.00 3903.32 0.00 3903.32 0.00 3904.16 0.00 3904.16
0.00 3905.00 0.00 3905.00 0.00 3905.84 0.00 3905.84 0.00 3906.68 0.00
3906.68 0.00 3907.52 0.00 3907.52 0.00 3908.36 0.00 3908.36 0.00 3909.20
0.00 3909.20 0.00 3910.04 0.00 3910.04 0.00 3910.88 0.00 3910.88 0.00
3911.72 0.00 3911.72 0.00 3912.56 0.00 3912.56 0.00 3913.40 0.00 3913.40
0.00 3914.24 0.00 3914.24 0.00 3915.08 0.00 3915.08 0.00 3915.92 0.00
3915.92 0.00 3916.76 0.00 3916.76 0.00 3917.60 0.00 3917.60 0.00 3918.44
0.00 3918.44 0.00 3919.28 0.00 3919.28 0.00 3920.12 0.00 3920.12 0.00
3920.96 0.00 3920.96 0.00 3921.80 0.00 3921.80 0.00 3922.64 0.00 3922.64
0.00 3923.48 0.00 3923.48 0.00 3924.32 0.00 3924.32 0.00 3925.16 0.00
3925.16 0.00 3926.00 0.00 3926.00 0.00 3926.84 0.00 3926.84 0.00 3927.68
0.00 3927.68 0.00 3928.52 0.00 3928.52 0.00 3929.36 0.00 3929.36 0.00
3930.20 0.00 3930.20 0.00 3931.04 0.00 3931.04 0.00 3931.88 0.00 3931.88
0.00 3932.72 0.00 3933.56 0.99 3933.56 0.99 3934.24 6.25 3934.40 5.51
3935.04 -0.47 3935.24 0.00 3935.24 0.00 3936.08 0.00 3936.08 0.00 3936.92
0.00 3936.92 0.00 3937.76 0.00 3937.76 0.00 3938.60 0.00 3938.60 0.00
3939.44 0.00 3940.24 4.66 3940.28 3.98 3941.00 0.00 3941.13 0.00 3941.73
1.25 3941.96 0.00 3941.97 0.39 3942.80 0.00 3942.80 0.00 3943.64 0.00
3943.64 0.00 3944.48 0.00 3944.48 0.00 3945.32 0.00 3945.32 0.00 3946.16
0.00 3946.16 0.00 3947.00 0.00 3947.00 0.00 3947.84 0.00 3947.84 0.00
3948.68 0.00 3948.68 0.00 3949.52 0.00 3949.52 0.00 3950.36 0.00 3950.36
0.00 3951.20 0.00 3951.20 0.00 3952.04 0.00 3952.04 0.00 3952.88 0.00
3952.88 0.00 3953.72 0.00 3953.72 0.00 3954.56 0.00 3954.56 0.00 3955.40
0.00 3955.40 0.00 3956.24 0.00 3956.24 0.00 3957.08 0.00 3957.08 0.00
3957.92 0.00 3957.92 0.00 3958.76 0.00 3958.76 0.00 3959.60 0.00 3959.60
0.00 3960.44 0.00 3960.44 0.00 3961.28 0.00 3961.28 0.00 3962.12 0.00
3962.12 0.00 3962.96 0.00 3962.96 0.00 3963.80 0.00 3963.80 0.00 3964.64
0.00 3964.64 0.00 3965.48 0.00 3965.48 0.00 3966.32 0.00 3966.32 0.00
3967.16 0.00 3967.16 0.00 3968.00 0.00 3968.00 0.00 3968.84 0.00 3968.84
0.00 3969.68 0.00 3969.68 0.00 3970.52 0.00 3970.52 0.00 3971.36 0.00
3971.36 0.00 3972.20 0.00 3972.20 0.00 3973.04 0.00 3973.04 0.00 3973.88
0.00 3973.88 0.00 3974.72 0.00 3974.72 0.00 3975.56 0.00 3975.56 0.00
3976.40 0.00 3976.40 0.00 3977.24 0.00 3977.24 0.00 3978.08 0.00 3978.08
0.00 3978.92 0.00 3978.92 0.00 3979.76 0.00 3979.76 0.00 3980.60 0.00
3980.60 0.00 3981.44 0.00 3981.44 0.00 3982.28 0.00 3982.28 0.00 3983.12
0.00 3983.12 0.00 3983.96 0.00 3983.96 0.00 3984.80 0.00 3984.80 0.00
3985.64 0.00 3985.64 0.00 3986.48 0.00 3986.48 0.00 3987.32 0.00 3987.32
0.00 3988.16 0.00 3988.16 0.00 3989.00 0.00 3989.00 0.00 3989.84 0.00
3989.84 0.00 3990.68 0.00 3990.68 0.00 3991.52 0.00 3991.52 0.00 3992.36
0.00 3992.36 0.00 3993.20 0.00 3993.20 0.00 3994.04 0.00 3994.04 0.00
3994.88 0.00 3994.88 0.00 3995.72 0.00 3995.72 0.00 3996.56 0.00 3996.56
0.00 3997.40 0.00 3997.40 0.00 3998.24 0.00 3998.24 0.00 3999.08 0.00
3999.08 0.00 3999.92 0.00 3999.92 0.00 4000.76 0.00 4000.76 0.00 4001.60
0.00 4001.60 0.00 4002.44 0.00 4002.44 0.00 4003.28 0.00 4003.28 0.00
4004.12 0.00 4004.12 0.00 4004.96 0.00 4004.96 0.00 4005.80 0.00 4005.80
0.00 4006.64 0.00 4006.64 0.00 4007.48 0.00 4007.48 0.00 4008.32 0.00
4008.32 0.00 4009.16 0.00 4009.16 0.00 4010.00 0.00 4010.00 0.00 4010.84
0.00 4010.84 0.00 4011.68 0.00 4011.68 0.00 4012.52 0.00 4012.52 0.00
4013.36 0.00 4013.36 0.00 4014.20 0.00 4014.20 0.00 4015.04 0.00 4015.04
0.00 4015.88 0.00 4015.88 0.00 4016.72 0.00 4016.72 0.00 4017.56 0.00
4017.56 0.00 4018.40 0.00 4018.40 0.00 4019.24 0.00 4019.24 0.00 4020.08
0.00 4020.08 0.00 4020.92 0.00 4020.92 0.00 4021.76 0.00 4021.76 0.00
4022.60 0.00 4022.60 0.00 4023.44 0.00 4023.44 0.00 4024.28 0.00 4024.28
0.00 4025.12 0.00 4025.12 0.00 4025.96 0.00 4025.96 0.00 4026.80 0.00
4026.80 0.00 4027.64 0.00 4027.64 0.00 4028.48 0.00 4028.48 0.00 4029.32
0.00 4029.32 0.00 4030.16 0.00 4030.16 0.00 4031.00 0.00 4031.00 0.00
4031.84 0.00 4031.84 0.00 4032.68 0.00 4032.68 0.00 4033.52 0.00 4033.52
0.00 4034.36 0.00 4034.36 0.00 4035.20 0.00 4035.20 0.00 4036.04 0.00
4036.04 0.00 4036.88 0.00 4036.88 0.00 4037.72 0.00 4037.72 0.00 4038.56
0.00 4038.56 0.00 4039.40 0.00 4039.40 0.00 4040.24 0.00 4040.24 0.00
4041.08 0.00 4041.08 0.00 4041.92 0.00 4041.92 0.00 4042.76 0.00 4042.76
0.00 4043.60 0.00 4043.60 0.00 4044.44 0.00 4044.44 0.00 4045.28 0.00
4045.28 0.00 4046.12 0.00 4046.12 0.00 4046.96 0.00 4046.96 0.00 4047.80
0.00 4047.80 0.00 4048.64 0.00 4048.64 0.00 4049.48 0.00 4049.48 0.00
4050.32 0.00 4050.32 0.00 4051.16 0.00 4051.16 0.00 4052.00 0.00 4052.00
0.00 4052.84 0.00 4052.84 0.00 4053.68 0.00 4053.68 0.00 4054.52 0.00
4054.52 0.00 4055.36 0.00 4055.36 0.00 4056.20 0.00 4056.20 0.00 4057.04
0.00 4057.04 0.00 4057.88 0.00 4057.88 0.00 4058.72 0.00 4058.72 0.00
4059.56 0.00 4059.56 0.00 4060.40 0.00 4060.40 0.00 4061.24 0.00 4061.24
0.00 4062.08 0.00 4062.08 0.00 4062.92 0.00 4062.92 0.00 4063.76 0.00
4063.76 0.00 4064.60 0.00 4064.60 0.00 4065.44 0.00 4065.44 0.00 4066.28
0.00 4066.28 0.00 4067.12 0.00 4067.12 0.00 4067.96 0.00 4067.96 0.00
4068.80 0.00 4068.80 0.00 4069.64 0.00 4069.64 0.00 4070.48 0.00 4070.48
0.00 4071.32 0.00 4071.32 0.00 4072.16 0.00 4072.16 0.00 4073.00 0.00
4073.00 0.00 4073.84 0.00 4073.84 0.00 4074.68 0.00 4074.68 0.00 4075.52
0.00 4075.52 0.00 4076.36 0.00 4076.36 0.00 4077.20 0.00 4077.20 0.00
4078.04 0.00 4078.04 0.00 4078.88 0.00 4078.88 0.00 4079.72 0.00 4079.72
0.00 4080.56 0.00 4080.56 0.00 4081.40 0.00 4081.40 0.00 4082.24 0.00
4082.24 0.00 4083.08 0.00 4083.08 0.00 4083.92 0.00 4083.92 0.00 4084.76
0.00 4084.76 0.00 4085.60 0.00 4085.60 0.00 4086.44 0.00 4086.44 0.00
4087.28 0.00 4087.28 0.00 4088.12 0.00 4088.12 0.00 4088.96 0.00 4088.96
0.00 4089.80 0.00 4089.80 0.00 4090.64 0.00 4090.64 0.00 4091.48 0.00
4091.48 0.00 4092.32 0.00 4092.32 0.00 4093.16 0.00 4093.16 0.00 4094.00
0.00 4094.00 0.00 4094.84 0.00 4094.84 0.00 4095.68 0.00 4095.68 0.00
4096.52 0.00 4096.52 0.00 4097.36 0.00 4097.36 0.00 4098.20 0.00 4098.20
0.00 4099.04 0.00 4099.04 0.00 4099.88 0.00 4099.88 0.00 4100.72 0.00
4100.72 0.00 4101.56 0.00 4101.56 0.00 4102.40 0.00 4102.40 0.00 4103.24
0.00 4103.24 0.00 4104.08 0.00 4104.08 0.00 4104.92 0.00 4104.92 0.00
4105.76 0.00 4105.76 0.00 4106.60 0.00 4106.60 0.00 4107.44 0.00 4107.44
0.00 4108.28 0.00 4108.28 0.00 4109.12 0.00 4109.12 0.00 4109.96 0.00
4109.96 0.00 4110.80 0.00 4110.80 0.00 4111.64 0.00 4111.64 0.00 4112.48
0.00 4112.48 0.00 4113.32 0.00 4113.32 0.00 4114.16 0.00 4114.16 0.00
4115.00 0.00 4115.00 0.00 4115.84 0.00 4115.84 0.00 4116.68 0.00 4116.68
0.00 4117.52 0.00 4117.52 0.00 4118.36 0.00 4118.36 0.00 4119.20 0.00
4119.20 0.00 4120.04 0.00 4120.04 0.00 4120.88 0.00 4120.88 0.00 4121.72
0.00 4121.72 0.00 4122.56 0.00 4122.56 0.00 4123.40 0.00 4123.40 0.00
4124.24 0.00 4124.24 0.00 4125.08 0.00 4125.08 0.00 4125.92 0.00 4125.92
0.00 4126.76 0.00 4126.76 0.00 4127.60 0.00 4127.60 0.00 4128.44 0.00
4128.44 0.00 4129.28 0.00 4129.28 0.00 4130.12 0.00 4130.12 0.00 4130.96
0.00 4130.96 0.00 4131.80 0.00 4131.80 0.00 4132.64 0.00 4132.64 0.00
4133.48 0.00 4133.48 0.00 4134.32 0.00 4134.32 0.00 4135.16 0.00 4135.16
0.00 4136.00 0.00 4136.00 0.00 4136.84 0.00 4136.84 0.00 4137.68 0.00
4137.68 0.00 4138.52 0.00 4138.52 0.00 4139.36 0.00 4139.36 0.00 4140.20
0.00 4140.20 0.00 4141.04 0.00 4141.04 0.00 4141.88 0.00 4141.88 0.00
4142.72 0.00 4142.72 0.00 4143.56 0.00 4143.56 0.00 4144.40 0.00 4144.40
0.00 4145.24 0.00 4145.24 0.00 4146.08 0.00 4146.08 0.00 4146.92 0.00
4146.92 0.00 4147.76 0.00 4147.76 0.00 4148.60 0.00 4148.60 0.00 4149.44
0.00 4149.44 0.00 4150.28 0.00 4150.28 0.00 4151.12 0.00 4151.12 0.00
4151.96 0.00 4151.96 0.00 4152.80 0.00 4152.80 0.00 4153.64 0.00 4153.64
0.00 4154.48 0.00 4154.48 0.00 4155.32 0.00 4155.32 0.00 4156.16 0.00
4156.16 0.00 4157.00 0.00 4157.00 0.00 4157.84 0.00 4157.84 0.00 4158.68
0.00 4158.68 0.00 4159.52 0.00 4159.52 0.00 4160.36 0.00 4160.36 0.00
4161.20 0.00 4161.20 0.00 4162.04 0.00 4162.04 0.00 4162.88 0.00 4162.88
0.00 4163.72 0.00 4163.72 0.00 4164.56 0.00 4164.56 0.00 4165.40 0.00
4165.40 0.00 4166.24 0.00 4166.24 0.00 4167.08 0.00 4167.08 0.00 4167.92
0.00 4167.92 0.00 4168.76 0.00 4168.76 0.00 4169.60 0.00 4169.60 0.00
4170.44 0.00 4170.44 0.00 4171.28 0.00 4171.28 0.00 4172.12 0.00 4172.12
0.00 4172.96 0.00 4172.96 0.00 4173.80 0.00 4173.80 0.00 4174.64 0.00
4174.64 0.00 4175.48 0.00 4175.48 0.00 4176.32 0.00 4176.32 0.00 4177.16
0.00 4177.16 0.00 4178.00 0.00 4178.00 0.00 4178.84 0.00 4178.84 0.00
4179.68 0.00 4179.68 0.00 4180.52 0.00 4180.52 0.00 4181.36 0.00 4181.36
0.00 4182.20 0.00 4182.20 0.00 4183.04 0.00 4183.04 0.00 4183.88 0.00
4183.88 0.00 4184.72 0.00 4184.72 0.00 4185.56 0.00 4185.56 0.00 4186.40
0.00 4186.40 0.00 4187.24 0.00 4187.24 0.00 4188.08 0.00 4188.08 0.00
4188.92 0.00 4188.92 0.00 4189.76 0.00 4189.76 0.00 4190.60 0.00 4190.60
0.00 4191.44 0.00 4191.44 0.00 4192.28 0.00 4192.28 0.00 4193.12 0.00
4193.12 0.00 4193.96 0.00 4193.96 0.00 4194.80 0.00 4194.80 0.00 4195.64
0.00 4195.64 0.00 4196.48 0.00 4196.48 0.00 4197.32 0.00 4197.32 0.00
4198.16 0.00   counttomark /m exch def /maxYValues 1 def /YValuePos
1 def /XValuePos 1 def /n m maxYValues 1 add div cvi def XValuePos
1 gt {n { maxYValues 1 add XValuePos neg roll dup /XValue ED maxYValues
1 add XValuePos 1 sub roll pop XValue maxYValues 1 add 1 roll m maxYValues
1 add roll } repeat } if maxYValues 1 gt {n { maxYValues YValuePos
1 sub neg roll maxYValues 1 sub { pop } repeat /m m maxYValues 1 sub
sub def m 2 roll } repeat } if /xMax -99999 def /yMax -99999 def /xP
0 def /yP 0 def m copy n { /y exch def /x exch def xMax x lt { /xMax
x def } if yMax y lt {/yMax y def } if xP x gt { /xP x def } if yP
y gt { /yP y def } if } repeat 0 0 gt 0 0 gt or () length 0 gt or ()
length 0 gt or () length 0 gt or () length 0 gt or { () length 0 gt
{ }{ xP } ifelse /xStart exch def () length 0 gt { }{ yP } ifelse /yStart
exch def () length 0 gt {  }{ xMax } ifelse /xEnd exch def () length
0 gt {  }{ yMax } ifelse /yEnd exch def n { m -2 roll 2 copy /yVal
exch def /xVal exch def xVal xP ge yVal yP ge and xVal xEnd le and
yVal yEnd le and xVal xStart ge and yVal yStart ge and { /xP xP 0 add
def /yP yP 0 add def }{pop pop /m m 2 sub def } ifelse } repeat }{/ncount
1 def () length 0 gt {  }{ m } ifelse /nEnd exch def n { m -2 roll
1 1 gt { ncount 0 sub 1 mod 0 eq }{ true } ifelse ncount nEnd le and
ncount 0 ge and not { pop pop /m m 2 sub def } if /ncount ncount 1
add def } repeat } ifelse  0.18335 0.07114 /y ED /x ED /yPSOp {  -100
sub 5.000000000000000000 mul 0 add y mul  1.0 mul } def /xPSOp {  0
sub 0.238151940938318647 mul 0 add x mul 1.0 mul } def counttomark
dup dup cvi eq not { exch pop } if /m exch def /n m 2 div cvi def n
{ yPSOp m 1 roll xPSOp m 1 roll /m m 2 sub def } repeat    /Lineto
/lineto load def 2  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   2  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
%%EndDocument 
countdictstack InitDictCount sub { end } repeat 
cleartomark restore grestore 
