%%
%% This is file `vecsym.mf',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% esvect.dtx  (with options: `mfvecsym')
%% 
%% esvect package to typeset vectors.
%% 
%% See also http://perso.wanadoo.fr/eddie.saudrais (in french)
%% 
%% Run LaTeX on escevt.ins to generate files.
%% 
%% Install the files:
%% 
%% -- esvect.sty and uesvect.fd on TEXINPUT;
%% -- vect5.mf, vect6.mf, vect7.mf, vect8.mf, vect9.mf, vect10.mf on
%% MFINPUT;
%% -- generate tfm files running METAFONT on *.mf files, and put
%% *.tfm files on the right location.
%% 
%% Run LaTeX on esvect.dtx to generate
%% documentation.
%% 

iff known r_arrow1: cmchar "Dessin original";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow1,18u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup fine.nib;%crisp -> fine pour tester
pos1(rule_thickness,90); pos2(rule_thickness,90);%Trait horizontal
pos3(rule_thickness,0); pos4(rule_thickness,0);%Extr\'emit\'e fl\`eche
y0=y1=y2=math_axis;%Axe horizontal
x1-.5rule_thickness=eps;%Extr\'emit\'e gauche
rt x0=hround(w)-eps;%Extr\'emit\'e droite
y3-y0=y0-y4=if monospace:.24 else:.36 fi asc_height+eps;%largeur
x3=x4=x0-if monospace:3u else:4u fi-eps;%longueur fl\`eche
pos5(rule_thickness,angle(z4-z0)); z5l=z0;%Pointe inf\'erieure fl\`eche
pos6(rule_thickness,angle(z3-z0)); z6l=z0;%Pointe sup\'erieure fl\`eche
z9=.2[.5[z3,z4],z0];%tangente extr\'emit\'es
numeric t; path p; p=z4l{z9-z4}..z6r;%Courbe fl\`eche
t=xpart(p intersectiontimes((0,y2l)--(w,y2l)));%Intersection
x2=xpart point t of p;%Abscisse de cette intersection
filldraw z0..{z4-z9}z4r--subpath (0,t) of\\(z4l{z9-z4}..z6r)
 --z2l---z1l..z1r---z2r--subpath (t,0) of\\(z3l{z9-z3}..z5r)
 --z3r{z9-z3}..z0 & cycle;  % arrowhead and stem
penlabels(0,1,2,3,4,5,6,9); endchar;

iff known r_arrow5: cmchar "Fl\`eche grande";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow5,18u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup fine.nib;
pos1(rule_thickness,90); pos2(rule_thickness,90);
pos3(rule_thickness,0); pos4(rule_thickness,0);
y0=y1=y2=math_axis; x1-.5rule_thickness=eps; rt x0=hround(w)-eps;
y3-y0=y0-y4=2.5u+eps;
x3=x4=x0-4.5u-eps;
z9=.35[.5[z3,z4],z0];
numeric t; path p; p=z4..z9;
t=xpart(p intersectiontimes((0,y2l)--(w,y2l))); x2=xpart point t of p;
filldraw z0..z4--subpath (0,t) of\\(z4..z9)
 --z2l---z1l..z1r---z2r--subpath (t,0) of\\(z3..z9)
 --z3..z0 & cycle;  % arrowhead and stem
penlabels(0,1,2,3,4,9); endchar;

iff known r_arrow3: cmchar "Fl\`eche normale";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow3,18u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup fine.nib;
pos1(rule_thickness,90); pos2(rule_thickness,90);
pos3(rule_thickness,0); pos4(rule_thickness,0);
y0=y1=y2=math_axis; x1-.5rule_thickness=eps; rt x0=hround(w)-eps;
y3-y0=y0-y4=2.1u+eps;
x3=x4=x0-3.8u-eps;
z9=.35[.5[z3,z4],z0];
numeric t; path p; p=z4..z9;
t=xpart(p intersectiontimes((0,y2l)--(w,y2l))); x2=xpart point t of p;
filldraw z0..z4--subpath (0,t) of\\(z4..z9)
 --z2l---z1l..z1r---z2r--subpath (t,0) of\\(z3..z9)
 --z3..z0 & cycle;  % arrowhead and stem
penlabels(0,1,2,3,4,9); endchar;

iff known r_arrow6: cmchar "Fl\`eche \'etroite";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow6,18u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup fine.nib;
pos1(rule_thickness,90); pos2(rule_thickness,90);
pos3(rule_thickness,0); pos4(rule_thickness,0);
y0=y1=y2=math_axis; x1-.5rule_thickness=eps; rt x0=hround(w)-eps;
y3-y0=y0-y4=1.5u+eps;
x3=x4=x0-4.5u-eps;
z9=.35[.5[z3,z4],z0];
numeric t; path p; p=z4..z9;
t=xpart(p intersectiontimes((0,y2l)--(w,y2l))); x2=xpart point t of p;
filldraw z0..z4--subpath (0,t) of\\(z4..z9)
 --z2l---z1l..z1r---z2r--subpath (t,0) of\\(z3..z9)
 --z3..z0 & cycle;  % arrowhead and stem
penlabels(0,1,2,3,4,9); endchar;

iff known r_arrow8: cmchar "Fleche droite";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow8,18u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup fine.nib;
pos1(rule_thickness,90); pos2(rule_thickness,-90);
pos3(hair,0); pos6(hair,0);
pos4(rule_thickness,0); pos5(rule_thickness,0);
y1=y2=math_axis; x1-.5rule_thickness=eps; rt x2=hround(w-2u);
y3-y1=y1-y6=2.2u+eps;
x3=x6=x2-3.5u-eps;
x4=x5=hround(w)-0.4rule_thickness;
y4-y1=y1-y5=.2hair;
filldraw z2l{dir 165}...{z3-z2}z3l--z3r{z4-z3}...
z4--z5...{z6-z5}z6r--z6l{z2-z6}...{dir 15}z2r---z1l..z1r---z2l & cycle;
penlabels(1,2,3,4,5,6);
endchar;

iff known r_arrow2: cmchar "cmsy plus \'etroit";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow2,18u#,v_center(spread#+rule_thickness#));%18u->12u
adjust_fit(0,0); pickup fine.nib;
pos1(rule_thickness,90); pos2(rule_thickness,90);
pos3(rule_thickness,0); pos4(rule_thickness,0);
y0=y1=y2=math_axis;%Axe horizontal
x1-.5rule_thickness=eps;%Extr\'emit\'e gauche
rt x0=hround(w)-eps;%Extr\'emit\'e droite
y3-y0=y0-y4=if monospace:.16 else:.22 fi asc_height+eps;%largeur
x3=x4=x0-if monospace:4u else:4u fi-eps;%longueur fl\`eche
pos5(rule_thickness,angle(z4-z0)); z5l=z0;%Pointe inf\'erieure fl\`eche
pos6(rule_thickness,angle(z3-z0)); z6l=z0;%Pointe sup\'erieure fl\`eche
z9=.5[.5[z3,z4],z0];%tangente extr\'emit\'es
numeric t; path p; p=z4l{z9-z4}..z6r;%Courbe fl\`eche
t=xpart(p intersectiontimes((0,y2l)--(w,y2l)));%Intersection
x2=xpart point t of p;%Abscisse de cette intersection
filldraw z0--z5..{z4-z9}z4r--subpath (0,t) of\\(z4l{z9-z4}..z6r)
 --z2l---z1l..z1r---z2r--subpath (t,0) of\\(z3l{z9-z3}..z5r)
 --z3r{z9-z3}..z6--z0 & cycle;  % arrowhead and stem
penlabels(0,1,2,3,4,5,6,9); endchar;

iff known r_arrow4: cmchar "Triangle";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow4,18u#,v_center(spread#+rule_thickness#));%18u->12u
adjust_fit(0,0); pickup fine.nib;
pos1(rule_thickness,90); pos2(rule_thickness,90);
pos3(rule_thickness,0); pos4(rule_thickness,0);
y0=y1=y2=math_axis; x1-.5rule_thickness=eps; rt x0=hround(w)-eps;
y3-y0=y0-y4=2.1u+eps;
x3=x4=x0-3.8u-eps;
numeric t; path p; p=z4..z3;
t=xpart(p intersectiontimes((0,y2l)--(w,y2l))); x2=xpart point t of p;
filldraw z0..z4--subpath (0,t) of\\(z4..z3)
 --z2l---z1l..z1r---z2r--subpath (t,0) of\\(z3..z4)
 --z3..z0 & cycle;  % arrowhead and stem
penlabels(0,1,2,3,4); endchar;

iff known r_arrow9: cmchar "Triangle pench\'e";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow9,18u#,v_center(spread#+rule_thickness#));%18u->12u
adjust_fit(0,0); pickup fine.nib;
pos1(rule_thickness,90); pos2(rule_thickness,76);
pos3(rule_thickness,0); pos4(rule_thickness,0);
y0=y1=y2=math_axis; x1-.5rule_thickness=eps; rt x0=hround(w)-eps;
y3-y0=y0-y4=2.1u+eps;
x2=hround(w-4u);
x3=.25(y3-y2)+x2-eps;
x4=-.25(y2-y4)+x2-eps;
filldraw z0..z3--z2r---z1r..z1l---z2l--z4..z0 & cycle;  % arrowhead and stem
penlabels(0,1,2,3,4); endchar;

iff known r_arrow7: cmchar "Harpon";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow7,18u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup fine.nib;
pos1(rule_thickness,90); pos2(rule_thickness,-90);
pos3(hair,0); pos6(hair,0);
pos4(rule_thickness,0); pos5(rule_thickness,0);
y1=y2=math_axis; x1-.5rule_thickness=eps; rt x2=hround(w-2u);
y3-y1=y1-y6=2.5u+eps;
x3=x6=x2-2u-eps;
x4=x5=hround(w)-0.4rule_thickness;
y4-y1=y1-y5=.2hair;
filldraw z2l{dir 175}...{dir 110}z3l--z3r{dir -60}...{dir
-5}z4--z5{dir 185}...{dir -120}z6r--z6l{dir 70}...{dir
5}z2r---z1l..z1r---z2l & cycle;
penlabels(1,2,3,4,5,6);
endchar;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

iff known r_arrow21: cmchar "Dessin original";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow21,10u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup fine.nib;%crisp -> fine pour tester
pos1(rule_thickness,90); pos2(rule_thickness,90);%Trait horizontal
pos3(rule_thickness,0); pos4(rule_thickness,0);%Extr\'emit\'e fl\`eche
y0=y1=y2=math_axis;%Axe horizontal
x1-.5rule_thickness=eps;%Extr\'emit\'e gauche
rt x0=hround(w-u);%Extr\'emit\'e droite
y3-y0=y0-y4=if monospace:.24 else:.36 fi asc_height+eps;%largeur
x3=x4=x0-if monospace:3u else:4u fi-eps;%longueur fl\`eche
pos5(rule_thickness,angle(z4-z0)); z5l=z0;%Pointe inf\'erieure fl\`eche
pos6(rule_thickness,angle(z3-z0)); z6l=z0;%Pointe sup\'erieure fl\`eche
z9=.2[.5[z3,z4],z0];%tangente extr\'emit\'es
numeric t; path p; p=z4l{z9-z4}..z6r;%Courbe fl\`eche
t=xpart(p intersectiontimes((0,y2l)--(w,y2l)));%Intersection
x2=xpart point t of p;%Abscisse de cette intersection
filldraw z0..{z4-z9}z4r--subpath (0,t) of\\(z4l{z9-z4}..z6r)
 --z2l---z1l..z1r---z2r--subpath (t,0) of\\(z3l{z9-z3}..z5r)
 --z3r{z9-z3}..z0 & cycle;  % arrowhead and stem
penlabels(0,1,2,3,4,5,6,9); endchar;

iff known r_arrow25: cmchar "Fl\`eche grande";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow25,10u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup fine.nib;
pos1(rule_thickness,90); pos2(rule_thickness,90);
pos3(rule_thickness,0); pos4(rule_thickness,0);
y0=y1=y2=math_axis; x1-.5rule_thickness=eps; rt x0=hround(w)-eps;
y3-y0=y0-y4=2.5u+eps;
x3=x4=x0-4.5u-eps;
z9=.35[.5[z3,z4],z0];
numeric t; path p; p=z4..z9;
t=xpart(p intersectiontimes((0,y2l)--(w,y2l))); x2=xpart point t of p;
filldraw z0..z4--subpath (0,t) of\\(z4..z9)
 --z2l---z1l..z1r---z2r--subpath (t,0) of\\(z3..z9)
 --z3..z0 & cycle;  % arrowhead and stem
penlabels(0,1,2,3,4,9); endchar;

iff known r_arrow23: cmchar "Fl\`eche normale";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow23,10u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup fine.nib;
pos1(rule_thickness,90); pos2(rule_thickness,90);
pos3(rule_thickness,0); pos4(rule_thickness,0);
y0=y1=y2=math_axis; x1-.5rule_thickness=eps; rt x0=hround(w)-eps;
y3-y0=y0-y4=2.1u+eps;
x3=x4=x0-3.8u-eps;
z9=.35[.5[z3,z4],z0];
numeric t; path p; p=z4..z9;
t=xpart(p intersectiontimes((0,y2l)--(w,y2l))); x2=xpart point t of p;
filldraw z0..z4--subpath (0,t) of\\(z4..z9)
 --z2l---z1l..z1r---z2r--subpath (t,0) of\\(z3..z9)
 --z3..z0 & cycle;  % arrowhead and stem
penlabels(0,1,2,3,4,9); endchar;

iff known r_arrow26: cmchar "Fl\`eche \'etroite";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow26,10u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup fine.nib;
pos1(rule_thickness,90); pos2(rule_thickness,90);
pos3(rule_thickness,0); pos4(rule_thickness,0);
y0=y1=y2=math_axis; x1-.5rule_thickness=eps; rt x0=hround(w)-eps;
y3-y0=y0-y4=1.5u+eps;
x3=x4=x0-4.5u-eps;
z9=.35[.5[z3,z4],z0];
numeric t; path p; p=z4..z9;
t=xpart(p intersectiontimes((0,y2l)--(w,y2l))); x2=xpart point t of p;
filldraw z0..z4--subpath (0,t) of\\(z4..z9)
 --z2l---z1l..z1r---z2r--subpath (t,0) of\\(z3..z9)
 --z3..z0 & cycle;  % arrowhead and stem
penlabels(0,1,2,3,4,9); endchar;

iff known r_arrow28: cmchar "Fl\`eche droite";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow28,10u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup fine.nib;
pos1(rule_thickness,90); pos2(rule_thickness,-90);
pos3(hair,0); pos6(hair,0);
pos4(rule_thickness,0); pos5(rule_thickness,0);
y1=y2=math_axis; x1-.5rule_thickness=eps; rt x2=hround(w-2u);
y3-y1=y1-y6=2.2u+eps;
x3=x6=x2-3.5u-eps;
x4=x5=hround(w)-0.4rule_thickness;
y4-y1=y1-y5=.2hair;
filldraw z2l{dir 165}...{z3-z2}z3l--z3r{z4-z3}...
z4--z5...{z6-z5}z6r--z6l{z2-z6}...{dir 15}z2r---z1l..z1r---z2l & cycle;
penlabels(1,2,3,4,5,6);
endchar;

iff known r_arrow22: cmchar "cmsy plus \'etroit";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow22,10u#,v_center(spread#+rule_thickness#));%18u->12u
adjust_fit(0,0); pickup fine.nib;
pos1(rule_thickness,90); pos2(rule_thickness,90);
pos3(rule_thickness,0); pos4(rule_thickness,0);
y0=y1=y2=math_axis;%Axe horizontal
x1-.5rule_thickness=eps;%Extr\'emit\'e gauche
rt x0=hround(w)-eps;%Extr\'emit\'e droite
y3-y0=y0-y4=if monospace:.16 else:.22 fi asc_height+eps;%largeur
x3=x4=x0-if monospace:4u else:4u fi-eps;%longueur fl\`eche
pos5(rule_thickness,angle(z4-z0)); z5l=z0;%Pointe inf\'erieure fl\`eche
pos6(rule_thickness,angle(z3-z0)); z6l=z0;%Pointe sup\'erieure fl\`eche
z9=.5[.5[z3,z4],z0];%tangente extr\'emit\'es
numeric t; path p; p=z4l{z9-z4}..z6r;%Courbe fl\`eche
t=xpart(p intersectiontimes((0,y2l)--(w,y2l)));%Intersection
x2=xpart point t of p;%Abscisse de cette intersection
filldraw z0--z5..{z4-z9}z4r--subpath (0,t) of\\(z4l{z9-z4}..z6r)
 --z2l---z1l..z1r---z2r--subpath (t,0) of\\(z3l{z9-z3}..z5r)
 --z3r{z9-z3}..z6--z0 & cycle;  % arrowhead and stem
penlabels(0,1,2,3,4,5,6,9); endchar;

iff known r_arrow24: cmchar "Triangle";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow24,10u#,v_center(spread#+rule_thickness#));%18u->12u
adjust_fit(0,0); pickup fine.nib;
pos1(rule_thickness,90); pos2(rule_thickness,90);
pos3(rule_thickness,0); pos4(rule_thickness,0);
y0=y1=y2=math_axis; x1-.5rule_thickness=eps; rt x0=hround(w)-eps;
y3-y0=y0-y4=2.1u+eps;
x3=x4=x0-3.8u-eps;
numeric t; path p; p=z4..z3;
t=xpart(p intersectiontimes((0,y2l)--(w,y2l))); x2=xpart point t of p;
filldraw z0..z4--subpath (0,t) of\\(z4..z3)
 --z2l---z1l..z1r---z2r--subpath (t,0) of\\(z3..z4)
 --z3..z0 & cycle;  % arrowhead and stem
penlabels(0,1,2,3,4); endchar;

iff known r_arrow29: cmchar "Triangle pench\'e";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow29,10u#,v_center(spread#+rule_thickness#));%18u->12u
adjust_fit(0,0); pickup fine.nib;
pos1(rule_thickness,90); pos2(rule_thickness,76);
pos3(rule_thickness,0); pos4(rule_thickness,0);
y0=y1=y2=math_axis; x1-.5rule_thickness=eps; rt x0=hround(w)-eps;
y3-y0=y0-y4=2.1u+eps;
x2=hround(w-4u);
x3=.25(y3-y2)+x2-eps;
x4=-.25(y2-y4)+x2-eps;
filldraw z0..z3--z2r---z1r..z1l---z2l--z4..z0 & cycle;  % arrowhead and stem
penlabels(0,1,2,3,4); endchar;

iff known r_arrow27: cmchar "Harpon";
compute_spread(.45x_height#,.55x_height#);
beginchar(r_arrow27,10u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup fine.nib;
pos1(rule_thickness,90); pos2(rule_thickness,-90);
pos3(hair,0); pos6(hair,0);
pos4(rule_thickness,0); pos5(rule_thickness,0);
y1=y2=math_axis; x1-.5rule_thickness=eps; rt x2=hround(w-2u);
y3-y1=y1-y6=2.5u+eps;
x3=x6=x2-2u-eps;
x4=x5=hround(w)-0.4rule_thickness;
y4-y1=y1-y5=.2hair;
filldraw z2l{dir 175}...{dir 110}z3l--z3r{dir -60}...{dir
-5}z4--z5{dir 185}...{dir -120}z6r--z6l{dir 70}...{dir
5}z2r---z1l..z1r---z2l & cycle;
penlabels(1,2,3,4,5,6);
endchar;

%%%%%%%%%%%%%%%%%%%% Trait pour remplissage

iff known trait01: cmchar "trait 3u";
compute_spread(.45x_height#,.55x_height#);
beginchar(trait01,3u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup rule.nib;
x1=eps;
x2=w-eps;
y1=y2=math_axis;
draw z1--z2;
penlabels(1,2);
endchar;

iff known trait02: cmchar "trait 4u";
compute_spread(.45x_height#,.55x_height#);
beginchar(trait02,4u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup rule.nib;
x1=eps;
x2=w-eps;
y1=y2=math_axis;
draw z1--z2;
penlabels(1,2);
endchar;

iff known trait03: cmchar "trait 5u";
compute_spread(.45x_height#,.55x_height#);
beginchar(trait03,5u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup rule.nib;
x1=eps;
x2=w-eps;
y1=y2=math_axis;
draw z1--z2;
penlabels(1,2);
endchar;

iff known trait04: cmchar "trait 6u";
compute_spread(.45x_height#,.55x_height#);
beginchar(trait04,6u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup rule.nib;
x1=eps;
x2=w-eps;
y1=y2=math_axis;
draw z1--z2;
penlabels(1,2);
endchar;

iff known trait05: cmchar "trait 7u";
compute_spread(.45x_height#,.55x_height#);
beginchar(trait05,7u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup rule.nib;
x1=eps;
x2=w-eps;
y1=y2=math_axis;
draw z1--z2;
penlabels(1,2);
endchar;

iff known trait06: cmchar "trait 8u";
compute_spread(.45x_height#,.55x_height#);
beginchar(trait06,8u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup rule.nib;
x1=eps;
x2=w-eps;
y1=y2=math_axis;
draw z1--z2;
penlabels(1,2);
endchar;

iff known trait07: cmchar "trait 9u";
compute_spread(.45x_height#,.55x_height#);
beginchar(trait07,9u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup rule.nib;
x1=eps;
x2=w-eps;
y1=y2=math_axis;
draw z1--z2;
penlabels(1,2);
endchar;

iff known trait08: cmchar "trait 10u";
compute_spread(.45x_height#,.55x_height#);
beginchar(trait08,10u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup rule.nib;
x1=eps;
x2=w-eps;
y1=y2=math_axis;
draw z1--z2;
penlabels(1,2);
endchar;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \`a virer traits pour tester

iff known traittest01: cmchar "traittest 3u";
compute_spread(.45x_height#,.55x_height#);
beginchar(traittest01,3u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup rule.nib;
x1=eps;
x2=w-eps;
y1=y2=math_axis;
x3=x4=x1;
y3-y1=y1-y4=1.5u;
x5=x6=x2;
y5-y2=y2-y6=1.5u;
draw z1--z2;
draw z3--z4;
draw z5--z6;
penlabels(1,2,3,4,5,6);
endchar;

iff known traittest02: cmchar "traittest 4u";
compute_spread(.45x_height#,.55x_height#);
beginchar(traittest02,4u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup rule.nib;
x1=eps;
x2=w-eps;
y1=y2=math_axis;
x3=x4=x1;
y3-y1=y1-y4=1.5u;
x5=x6=x2;
y5-y2=y2-y6=1.5u;
draw z1--z2;
draw z3--z4;
draw z5--z6;
penlabels(1,2,3,4,5,6);
endchar;

iff known traittest03: cmchar "traittest 5u";
compute_spread(.45x_height#,.55x_height#);
beginchar(traittest03,5u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup rule.nib;
x1=eps;
x2=w-eps;
y1=y2=math_axis;
x3=x4=x1;
y3-y1=y1-y4=1.5u;
x5=x6=x2;
y5-y2=y2-y6=1.5u;
draw z1--z2;
draw z3--z4;
draw z5--z6;
penlabels(1,2,3,4,5,6);
endchar;

iff known traittest04: cmchar "traittest 6u";
compute_spread(.45x_height#,.55x_height#);
beginchar(traittest04,6u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup rule.nib;
x1=eps;
x2=w-eps;
y1=y2=math_axis;
x3=x4=x1;
y3-y1=y1-y4=1.5u;
x5=x6=x2;
y5-y2=y2-y6=1.5u;
draw z1--z2;
draw z3--z4;
draw z5--z6;
penlabels(1,2,3,4,5,6);
endchar;

iff known traittest05: cmchar "traittest 7u";
compute_spread(.45x_height#,.55x_height#);
beginchar(traittest05,7u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup rule.nib;
x1=eps;
x2=w-eps;
y1=y2=math_axis;
x3=x4=x1;
y3-y1=y1-y4=1.5u;
x5=x6=x2;
y5-y2=y2-y6=1.5u;
draw z1--z2;
draw z3--z4;
draw z5--z6;
penlabels(1,2,3,4,5,6);
endchar;

iff known traittest06: cmchar "traittest 8u";
compute_spread(.45x_height#,.55x_height#);
beginchar(traittest06,8u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup rule.nib;
x1=eps;
x2=w-eps;
y1=y2=math_axis;
x3=x4=x1;
y3-y1=y1-y4=1.5u;
x5=x6=x2;
y5-y2=y2-y6=1.5u;
draw z1--z2;
draw z3--z4;
draw z5--z6;
penlabels(1,2,3,4,5,6);
endchar;

iff known traittest07: cmchar "traittest 9u";
compute_spread(.45x_height#,.55x_height#);
beginchar(traittest07,9u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup rule.nib;
x1=eps;
x2=w-eps;
y1=y2=math_axis;
x3=x4=x1;
y3-y1=y1-y4=1.5u;
x5=x6=x2;
y5-y2=y2-y6=1.5u;
draw z1--z2;
draw z3--z4;
draw z5--z6;
penlabels(1,2,3,4,5,6);
endchar;

iff known traittest08: cmchar "traittest 10u";
compute_spread(.45x_height#,.55x_height#);
beginchar(traittest08,10u#,v_center(spread#+rule_thickness#));
adjust_fit(0,0); pickup rule.nib;
x1=eps;
x2=w-eps;
y1=y2=math_axis;
x3=x4=x1;
y3-y1=y1-y4=1.5u;
x5=x6=x2;
y5-y2=y2-y6=1.5u;
draw z1--z2;
draw z3--z4;
draw z5--z6;
penlabels(1,2,3,4,5,6);
endchar;
\endinput
%%
%% End of file `vecsym.mf'.
